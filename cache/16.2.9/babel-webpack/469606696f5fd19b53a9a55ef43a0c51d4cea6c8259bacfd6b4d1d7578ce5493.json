{"ast":null,"code":"/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n\nimport U from '../Utilities.js';\nconst {\n  addEvent,\n  normalizeTickInterval,\n  pick\n} = U;\n/* *\n *\n *  Class\n *\n * */\n/**\n * @private\n */\nvar LogarithmicAxis;\n(function (LogarithmicAxis) {\n  /* *\n   *\n   *  Declarations\n   *\n   * */\n  /* *\n   *\n   *  Constants\n   *\n   * */\n  const composedMembers = [];\n  /* *\n   *\n   *  Functions\n   *\n   * */\n  /* eslint-disable valid-jsdoc */\n  /**\n   * Provides logarithmic support for axes.\n   * @private\n   */\n  function compose(AxisClass) {\n    if (U.pushUnique(composedMembers, AxisClass)) {\n      AxisClass.keepProps.push('logarithmic');\n      addEvent(AxisClass, 'init', onInit);\n      addEvent(AxisClass, 'afterInit', onAfterInit);\n    }\n    return AxisClass;\n  }\n  LogarithmicAxis.compose = compose;\n  /**\n   * @private\n   */\n  function onInit(e) {\n    const axis = this;\n    const options = e.userOptions;\n    let logarithmic = axis.logarithmic;\n    if (options.type !== 'logarithmic') {\n      axis.logarithmic = void 0;\n    } else {\n      if (!logarithmic) {\n        logarithmic = axis.logarithmic = new Additions(axis);\n      }\n    }\n  }\n  /**\n   * @private\n   */\n  function onAfterInit() {\n    const axis = this;\n    const log = axis.logarithmic;\n    // extend logarithmic axis\n    if (log) {\n      axis.lin2val = function (num) {\n        return log.lin2log(num);\n      };\n      axis.val2lin = function (num) {\n        return log.log2lin(num);\n      };\n    }\n  }\n  /* *\n   *\n   *  Class\n   *\n   * */\n  /**\n   * Provides logarithmic support for axes.\n   * @private\n   * @class\n   */\n  class Additions {\n    /* *\n    *\n    *  Constructors\n    *\n    * */\n    constructor(axis) {\n      this.axis = axis;\n    }\n    /* *\n    *\n    *  Functions\n    *\n    * */\n    /**\n     * Set the tick positions of a logarithmic axis.\n     */\n    getLogTickPositions(interval, min, max, minor) {\n      const log = this;\n      const axis = log.axis;\n      const axisLength = axis.len;\n      const options = axis.options;\n      // Since we use this method for both major and minor ticks,\n      // use a local variable and return the result\n      let positions = [];\n      // Reset\n      if (!minor) {\n        log.minorAutoInterval = void 0;\n      }\n      // First case: All ticks fall on whole logarithms: 1, 10, 100 etc.\n      if (interval >= 0.5) {\n        interval = Math.round(interval);\n        positions = axis.getLinearTickPositions(interval, min, max);\n        // Second case: We need intermediary ticks. For example\n        // 1, 2, 4, 6, 8, 10, 20, 40 etc.\n      } else if (interval >= 0.08) {\n        const roundedMin = Math.floor(min);\n        let intermediate, i, j, len, pos, lastPos, break2;\n        if (interval > 0.3) {\n          intermediate = [1, 2, 4];\n          // 0.2 equals five minor ticks per 1, 10, 100 etc\n        } else if (interval > 0.15) {\n          intermediate = [1, 2, 4, 6, 8];\n        } else {\n          // 0.1 equals ten minor ticks per 1, 10, 100 etc\n          intermediate = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n        }\n        for (i = roundedMin; i < max + 1 && !break2; i++) {\n          len = intermediate.length;\n          for (j = 0; j < len && !break2; j++) {\n            pos = log.log2lin(log.lin2log(i) * intermediate[j]);\n            // #1670, lastPos is #3113\n            if (pos > min && (!minor || lastPos <= max) && typeof lastPos !== 'undefined') {\n              positions.push(lastPos);\n            }\n            if (lastPos > max) {\n              break2 = true;\n            }\n            lastPos = pos;\n          }\n        }\n        // Third case: We are so deep in between whole logarithmic values,\n        // that we might as well handle the tick positions like a linear\n        // axis. For example 1.01, 1.02, 1.03, 1.04.\n      } else {\n        const realMin = log.lin2log(min),\n          realMax = log.lin2log(max),\n          tickIntervalOption = minor ? axis.getMinorTickInterval() : options.tickInterval,\n          filteredTickIntervalOption = tickIntervalOption === 'auto' ? null : tickIntervalOption,\n          tickPixelIntervalOption = options.tickPixelInterval / (minor ? 5 : 1),\n          totalPixelLength = minor ? axisLength / axis.tickPositions.length : axisLength;\n        interval = pick(filteredTickIntervalOption, log.minorAutoInterval, (realMax - realMin) * tickPixelIntervalOption / (totalPixelLength || 1));\n        interval = normalizeTickInterval(interval);\n        positions = axis.getLinearTickPositions(interval, realMin, realMax).map(log.log2lin);\n        if (!minor) {\n          log.minorAutoInterval = interval / 5;\n        }\n      }\n      // Set the axis-level tickInterval variable\n      if (!minor) {\n        axis.tickInterval = interval;\n      }\n      return positions;\n    }\n    lin2log(num) {\n      return Math.pow(10, num);\n    }\n    log2lin(num) {\n      return Math.log(num) / Math.LN10;\n    }\n  }\n  LogarithmicAxis.Additions = Additions;\n})(LogarithmicAxis || (LogarithmicAxis = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default LogarithmicAxis;","map":{"version":3,"names":["U","addEvent","normalizeTickInterval","pick","LogarithmicAxis","composedMembers","compose","AxisClass","pushUnique","keepProps","push","onInit","onAfterInit","e","axis","options","userOptions","logarithmic","type","Additions","log","lin2val","num","lin2log","val2lin","log2lin","constructor","getLogTickPositions","interval","min","max","minor","axisLength","len","positions","minorAutoInterval","Math","round","getLinearTickPositions","roundedMin","floor","intermediate","i","j","pos","lastPos","break2","length","realMin","realMax","tickIntervalOption","getMinorTickInterval","tickInterval","filteredTickIntervalOption","tickPixelIntervalOption","tickPixelInterval","totalPixelLength","tickPositions","map","pow","LN10"],"sources":["D:/Vamtage/angular-widget-project/node_modules/highcharts/es-modules/Core/Axis/LogarithmicAxis.js"],"sourcesContent":["/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport U from '../Utilities.js';\nconst { addEvent, normalizeTickInterval, pick } = U;\n/* *\n *\n *  Class\n *\n * */\n/**\n * @private\n */\nvar LogarithmicAxis;\n(function (LogarithmicAxis) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    const composedMembers = [];\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * Provides logarithmic support for axes.\n     * @private\n     */\n    function compose(AxisClass) {\n        if (U.pushUnique(composedMembers, AxisClass)) {\n            AxisClass.keepProps.push('logarithmic');\n            addEvent(AxisClass, 'init', onInit);\n            addEvent(AxisClass, 'afterInit', onAfterInit);\n        }\n        return AxisClass;\n    }\n    LogarithmicAxis.compose = compose;\n    /**\n     * @private\n     */\n    function onInit(e) {\n        const axis = this;\n        const options = e.userOptions;\n        let logarithmic = axis.logarithmic;\n        if (options.type !== 'logarithmic') {\n            axis.logarithmic = void 0;\n        }\n        else {\n            if (!logarithmic) {\n                logarithmic = axis.logarithmic = new Additions(axis);\n            }\n        }\n    }\n    /**\n     * @private\n     */\n    function onAfterInit() {\n        const axis = this;\n        const log = axis.logarithmic;\n        // extend logarithmic axis\n        if (log) {\n            axis.lin2val = function (num) {\n                return log.lin2log(num);\n            };\n            axis.val2lin = function (num) {\n                return log.log2lin(num);\n            };\n        }\n    }\n    /* *\n     *\n     *  Class\n     *\n     * */\n    /**\n     * Provides logarithmic support for axes.\n     * @private\n     * @class\n     */\n    class Additions {\n        /* *\n        *\n        *  Constructors\n        *\n        * */\n        constructor(axis) {\n            this.axis = axis;\n        }\n        /* *\n        *\n        *  Functions\n        *\n        * */\n        /**\n         * Set the tick positions of a logarithmic axis.\n         */\n        getLogTickPositions(interval, min, max, minor) {\n            const log = this;\n            const axis = log.axis;\n            const axisLength = axis.len;\n            const options = axis.options;\n            // Since we use this method for both major and minor ticks,\n            // use a local variable and return the result\n            let positions = [];\n            // Reset\n            if (!minor) {\n                log.minorAutoInterval = void 0;\n            }\n            // First case: All ticks fall on whole logarithms: 1, 10, 100 etc.\n            if (interval >= 0.5) {\n                interval = Math.round(interval);\n                positions = axis.getLinearTickPositions(interval, min, max);\n                // Second case: We need intermediary ticks. For example\n                // 1, 2, 4, 6, 8, 10, 20, 40 etc.\n            }\n            else if (interval >= 0.08) {\n                const roundedMin = Math.floor(min);\n                let intermediate, i, j, len, pos, lastPos, break2;\n                if (interval > 0.3) {\n                    intermediate = [1, 2, 4];\n                    // 0.2 equals five minor ticks per 1, 10, 100 etc\n                }\n                else if (interval > 0.15) {\n                    intermediate = [1, 2, 4, 6, 8];\n                }\n                else { // 0.1 equals ten minor ticks per 1, 10, 100 etc\n                    intermediate = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n                }\n                for (i = roundedMin; i < max + 1 && !break2; i++) {\n                    len = intermediate.length;\n                    for (j = 0; j < len && !break2; j++) {\n                        pos = log.log2lin(log.lin2log(i) * intermediate[j]);\n                        // #1670, lastPos is #3113\n                        if (pos > min &&\n                            (!minor || lastPos <= max) &&\n                            typeof lastPos !== 'undefined') {\n                            positions.push(lastPos);\n                        }\n                        if (lastPos > max) {\n                            break2 = true;\n                        }\n                        lastPos = pos;\n                    }\n                }\n                // Third case: We are so deep in between whole logarithmic values,\n                // that we might as well handle the tick positions like a linear\n                // axis. For example 1.01, 1.02, 1.03, 1.04.\n            }\n            else {\n                const realMin = log.lin2log(min), realMax = log.lin2log(max), tickIntervalOption = minor ?\n                    axis.getMinorTickInterval() :\n                    options.tickInterval, filteredTickIntervalOption = tickIntervalOption === 'auto' ?\n                    null :\n                    tickIntervalOption, tickPixelIntervalOption = options.tickPixelInterval / (minor ? 5 : 1), totalPixelLength = minor ?\n                    axisLength / axis.tickPositions.length :\n                    axisLength;\n                interval = pick(filteredTickIntervalOption, log.minorAutoInterval, (realMax - realMin) *\n                    tickPixelIntervalOption / (totalPixelLength || 1));\n                interval = normalizeTickInterval(interval);\n                positions = axis.getLinearTickPositions(interval, realMin, realMax).map(log.log2lin);\n                if (!minor) {\n                    log.minorAutoInterval = interval / 5;\n                }\n            }\n            // Set the axis-level tickInterval variable\n            if (!minor) {\n                axis.tickInterval = interval;\n            }\n            return positions;\n        }\n        lin2log(num) {\n            return Math.pow(10, num);\n        }\n        log2lin(num) {\n            return Math.log(num) / Math.LN10;\n        }\n    }\n    LogarithmicAxis.Additions = Additions;\n})(LogarithmicAxis || (LogarithmicAxis = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default LogarithmicAxis;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}