{"ast":null,"code":"/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n\nimport H from '../Core/Globals.js';\nconst {\n  deg2rad\n} = H;\nimport Series from '../Core/Series/Series.js';\nimport U from '../Core/Utilities.js';\nconst {\n  fireEvent,\n  isNumber,\n  pick,\n  relativeLength\n} = U;\n/**\n * @private\n */\nvar CenteredUtilities;\n(function (CenteredUtilities) {\n  /* *\n   *\n   *  Declarations\n   *\n   * */\n  /* *\n   *\n   *  Functions\n   *\n   * */\n  /* eslint-disable valid-jsdoc */\n  /**\n   * Get the center of the pie based on the size and center options relative\n   * to the plot area. Borrowed by the polar and gauge series types.\n   *\n   * @private\n   * @function Highcharts.CenteredSeriesMixin.getCenter\n   */\n  function getCenter() {\n    const options = this.options,\n      chart = this.chart,\n      slicingRoom = 2 * (options.slicedOffset || 0),\n      plotWidth = chart.plotWidth - 2 * slicingRoom,\n      plotHeight = chart.plotHeight - 2 * slicingRoom,\n      centerOption = options.center,\n      smallestSize = Math.min(plotWidth, plotHeight),\n      thickness = options.thickness;\n    let handleSlicingRoom,\n      size = options.size,\n      innerSize = options.innerSize || 0,\n      i,\n      value;\n    if (typeof size === 'string') {\n      size = parseFloat(size);\n    }\n    if (typeof innerSize === 'string') {\n      innerSize = parseFloat(innerSize);\n    }\n    const positions = [pick(centerOption[0], '50%'), pick(centerOption[1], '50%'),\n    // Prevent from negative values\n    pick(size && size < 0 ? void 0 : options.size, '100%'), pick(innerSize && innerSize < 0 ? void 0 : options.innerSize || 0, '0%')];\n    // No need for inner size in angular (gauges) series but still required\n    // for pie series\n    if (chart.angular && !(this instanceof Series)) {\n      positions[3] = 0;\n    }\n    for (i = 0; i < 4; ++i) {\n      value = positions[i];\n      handleSlicingRoom = i < 2 || i === 2 && /%$/.test(value);\n      // i == 0: centerX, relative to width\n      // i == 1: centerY, relative to height\n      // i == 2: size, relative to smallestSize\n      // i == 3: innerSize, relative to size\n      positions[i] = relativeLength(value, [plotWidth, plotHeight, smallestSize, positions[2]][i]) + (handleSlicingRoom ? slicingRoom : 0);\n    }\n    // innerSize cannot be larger than size (#3632)\n    if (positions[3] > positions[2]) {\n      positions[3] = positions[2];\n    }\n    // thickness overrides innerSize, need to be less than pie size (#6647)\n    if (isNumber(thickness) && thickness * 2 < positions[2] && thickness > 0) {\n      positions[3] = positions[2] - thickness * 2;\n    }\n    fireEvent(this, 'afterGetCenter', {\n      positions\n    });\n    return positions;\n  }\n  CenteredUtilities.getCenter = getCenter;\n  /**\n   * getStartAndEndRadians - Calculates start and end angles in radians.\n   * Used in series types such as pie and sunburst.\n   *\n   * @private\n   * @function Highcharts.CenteredSeriesMixin.getStartAndEndRadians\n   *\n   * @param {number} [start]\n   *        Start angle in degrees.\n   *\n   * @param {number} [end]\n   *        Start angle in degrees.\n   *\n   * @return {Highcharts.RadianAngles}\n   *         Returns an object containing start and end angles as radians.\n   */\n  function getStartAndEndRadians(start, end) {\n    const startAngle = isNumber(start) ? start : 0,\n      // must be a number\n      endAngle = isNumber(end) &&\n      // must be a number\n      end > startAngle &&\n      // must be larger than the start angle\n      // difference must be less than 360 degrees\n      end - startAngle < 360 ? end : startAngle + 360,\n      correction = -90;\n    return {\n      start: deg2rad * (startAngle + correction),\n      end: deg2rad * (endAngle + correction)\n    };\n  }\n  CenteredUtilities.getStartAndEndRadians = getStartAndEndRadians;\n})(CenteredUtilities || (CenteredUtilities = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default CenteredUtilities;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * @private\n * @interface Highcharts.RadianAngles\n */ /**\n    * @name Highcharts.RadianAngles#end\n    * @type {number}\n    */ /**\n       * @name Highcharts.RadianAngles#start\n       * @type {number}\n       */\n''; // keeps doclets above in JS file","map":{"version":3,"names":["H","deg2rad","Series","U","fireEvent","isNumber","pick","relativeLength","CenteredUtilities","getCenter","options","chart","slicingRoom","slicedOffset","plotWidth","plotHeight","centerOption","center","smallestSize","Math","min","thickness","handleSlicingRoom","size","innerSize","i","value","parseFloat","positions","angular","test","getStartAndEndRadians","start","end","startAngle","endAngle","correction"],"sources":["D:/Vamtage/angular-widget-project/node_modules/highcharts/es-modules/Series/CenteredUtilities.js"],"sourcesContent":["/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport H from '../Core/Globals.js';\nconst { deg2rad } = H;\nimport Series from '../Core/Series/Series.js';\nimport U from '../Core/Utilities.js';\nconst { fireEvent, isNumber, pick, relativeLength } = U;\n/**\n * @private\n */\nvar CenteredUtilities;\n(function (CenteredUtilities) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * Get the center of the pie based on the size and center options relative\n     * to the plot area. Borrowed by the polar and gauge series types.\n     *\n     * @private\n     * @function Highcharts.CenteredSeriesMixin.getCenter\n     */\n    function getCenter() {\n        const options = this.options, chart = this.chart, slicingRoom = 2 * (options.slicedOffset || 0), plotWidth = chart.plotWidth - 2 * slicingRoom, plotHeight = chart.plotHeight - 2 * slicingRoom, centerOption = options.center, smallestSize = Math.min(plotWidth, plotHeight), thickness = options.thickness;\n        let handleSlicingRoom, size = options.size, innerSize = options.innerSize || 0, i, value;\n        if (typeof size === 'string') {\n            size = parseFloat(size);\n        }\n        if (typeof innerSize === 'string') {\n            innerSize = parseFloat(innerSize);\n        }\n        const positions = [\n            pick(centerOption[0], '50%'),\n            pick(centerOption[1], '50%'),\n            // Prevent from negative values\n            pick(size && size < 0 ? void 0 : options.size, '100%'),\n            pick(innerSize && innerSize < 0 ? void 0 : options.innerSize || 0, '0%')\n        ];\n        // No need for inner size in angular (gauges) series but still required\n        // for pie series\n        if (chart.angular && !(this instanceof Series)) {\n            positions[3] = 0;\n        }\n        for (i = 0; i < 4; ++i) {\n            value = positions[i];\n            handleSlicingRoom = i < 2 || (i === 2 && /%$/.test(value));\n            // i == 0: centerX, relative to width\n            // i == 1: centerY, relative to height\n            // i == 2: size, relative to smallestSize\n            // i == 3: innerSize, relative to size\n            positions[i] = relativeLength(value, [plotWidth, plotHeight, smallestSize, positions[2]][i]) + (handleSlicingRoom ? slicingRoom : 0);\n        }\n        // innerSize cannot be larger than size (#3632)\n        if (positions[3] > positions[2]) {\n            positions[3] = positions[2];\n        }\n        // thickness overrides innerSize, need to be less than pie size (#6647)\n        if (isNumber(thickness) &&\n            thickness * 2 < positions[2] && thickness > 0) {\n            positions[3] = positions[2] - thickness * 2;\n        }\n        fireEvent(this, 'afterGetCenter', { positions });\n        return positions;\n    }\n    CenteredUtilities.getCenter = getCenter;\n    /**\n     * getStartAndEndRadians - Calculates start and end angles in radians.\n     * Used in series types such as pie and sunburst.\n     *\n     * @private\n     * @function Highcharts.CenteredSeriesMixin.getStartAndEndRadians\n     *\n     * @param {number} [start]\n     *        Start angle in degrees.\n     *\n     * @param {number} [end]\n     *        Start angle in degrees.\n     *\n     * @return {Highcharts.RadianAngles}\n     *         Returns an object containing start and end angles as radians.\n     */\n    function getStartAndEndRadians(start, end) {\n        const startAngle = isNumber(start) ? start : 0, // must be a number\n        endAngle = ((isNumber(end) && // must be a number\n            end > startAngle && // must be larger than the start angle\n            // difference must be less than 360 degrees\n            (end - startAngle) < 360) ?\n            end :\n            startAngle + 360), correction = -90;\n        return {\n            start: deg2rad * (startAngle + correction),\n            end: deg2rad * (endAngle + correction)\n        };\n    }\n    CenteredUtilities.getStartAndEndRadians = getStartAndEndRadians;\n})(CenteredUtilities || (CenteredUtilities = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default CenteredUtilities;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * @private\n * @interface Highcharts.RadianAngles\n */ /**\n* @name Highcharts.RadianAngles#end\n* @type {number}\n*/ /**\n* @name Highcharts.RadianAngles#start\n* @type {number}\n*/\n''; // keeps doclets above in JS file\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}