{"ast":null,"code":"/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n\nimport AST from './AST.js';\nimport SVGElement from '../SVG/SVGElement.js';\nimport SVGRenderer from '../SVG/SVGRenderer.js';\nimport U from '../../Utilities.js';\nconst {\n  attr,\n  createElement,\n  extend,\n  pick\n} = U;\n/* *\n *\n *  Constants\n *\n * */\nconst composedMembers = [];\n/* *\n *\n *  Class\n *\n * */\n/* eslint-disable valid-jsdoc */\n// Extend SvgRenderer for useHTML option.\nclass HTMLRenderer extends SVGRenderer {\n  /* *\n   *\n   *  Static Functions\n   *\n   * */\n  /** @private */\n  static compose(SVGRendererClass) {\n    if (U.pushUnique(composedMembers, SVGRendererClass)) {\n      const htmlRendererProto = HTMLRenderer.prototype,\n        svgRendererProto = SVGRendererClass.prototype;\n      svgRendererProto.html = htmlRendererProto.html;\n    }\n    return SVGRendererClass;\n  }\n  /* *\n   *\n   *  Functions\n   *\n   * */\n  /**\n   * Create HTML text node. This is used by the SVG renderer through the\n   * useHTML option.\n   *\n   * @private\n   * @function Highcharts.SVGRenderer#html\n   *\n   * @param {string} str\n   * The text of (subset) HTML to draw.\n   *\n   * @param {number} x\n   * The x position of the text's lower left corner.\n   *\n   * @param {number} y\n   * The y position of the text's lower left corner.\n   *\n   * @return {Highcharts.HTMLDOMElement}\n   * HTML element.\n   */\n  html(str, x, y) {\n    const wrapper = this.createElement('span'),\n      element = wrapper.element,\n      renderer = wrapper.renderer,\n      addSetters = function (gWrapper, style) {\n        // These properties are set as attributes on the SVG group, and\n        // as identical CSS properties on the div. (#3542)\n        ['opacity', 'visibility'].forEach(function (prop) {\n          gWrapper[prop + 'Setter'] = function (value, key, elem) {\n            const styleObject = gWrapper.div ? gWrapper.div.style : style;\n            SVGElement.prototype[prop + 'Setter'].call(this, value, key, elem);\n            if (styleObject) {\n              styleObject[key] = value;\n            }\n          };\n        });\n        gWrapper.addedSetters = true;\n      };\n    // Text setter\n    wrapper.textSetter = function (value) {\n      if (value !== this.textStr) {\n        delete this.bBox;\n        delete this.oldTextWidth;\n        AST.setElementHTML(this.element, pick(value, ''));\n        this.textStr = value;\n        wrapper.doTransform = true;\n      }\n    };\n    addSetters(wrapper, wrapper.element.style);\n    // Various setters which rely on update transform\n    wrapper.xSetter = wrapper.ySetter = wrapper.alignSetter = wrapper.rotationSetter = function (value, key) {\n      if (key === 'align') {\n        // Do not overwrite the SVGElement.align method.\n        wrapper.alignValue = wrapper.textAlign = value;\n      } else {\n        wrapper[key] = value;\n      }\n      wrapper.doTransform = true;\n    };\n    // Runs at the end of .attr()\n    wrapper.afterSetters = function () {\n      // Update transform. Do this outside the loop to prevent redundant\n      // updating for batch setting of attributes.\n      if (this.doTransform) {\n        this.htmlUpdateTransform();\n        this.doTransform = false;\n      }\n    };\n    // Set the default attributes\n    wrapper.attr({\n      text: str,\n      x: Math.round(x),\n      y: Math.round(y)\n    }).css({\n      position: 'absolute'\n    });\n    if (!renderer.styledMode) {\n      wrapper.css({\n        fontFamily: this.style.fontFamily,\n        fontSize: this.style.fontSize\n      });\n    }\n    // Keep the whiteSpace style outside the wrapper.styles collection\n    element.style.whiteSpace = 'nowrap';\n    // Use the HTML specific .css method\n    wrapper.css = wrapper.htmlCss;\n    wrapper.add = function (svgGroupWrapper) {\n      const container = renderer.box.parentNode,\n        parents = [];\n      let htmlGroup, parentGroup;\n      this.parentGroup = svgGroupWrapper;\n      // Create a mock group to hold the HTML elements\n      if (svgGroupWrapper) {\n        htmlGroup = svgGroupWrapper.div;\n        if (!htmlGroup) {\n          // Read the parent chain into an array and read from top\n          // down\n          parentGroup = svgGroupWrapper;\n          while (parentGroup) {\n            parents.push(parentGroup);\n            // Move up to the next parent group\n            parentGroup = parentGroup.parentGroup;\n          }\n          // Ensure dynamically updating position when any parent\n          // is translated\n          parents.reverse().forEach(function (parentGroup) {\n            const cls = attr(parentGroup.element, 'class'),\n              parentProtoCss = parentGroup.css;\n            /**\n             * Common translate setter for X and Y on the HTML\n             * group. Reverted the fix for #6957 du to\n             * positioning problems and offline export (#7254,\n             * #7280, #7529)\n             * @private\n             * @param {*} value\n             * @param {string} key\n                                     */\n            function translateSetter(value, key) {\n              parentGroup[key] = value;\n              if (key === 'translateX') {\n                htmlGroupStyle.left = value + 'px';\n              } else {\n                htmlGroupStyle.top = value + 'px';\n              }\n              parentGroup.doTransform = true;\n            }\n            // Create a HTML div and append it to the parent div\n            // to emulate the SVG group structure\n            const parentGroupStyles = parentGroup.styles || {};\n            htmlGroup = parentGroup.div = parentGroup.div || createElement('div', cls ? {\n              className: cls\n            } : void 0, {\n              position: 'absolute',\n              left: (parentGroup.translateX || 0) + 'px',\n              top: (parentGroup.translateY || 0) + 'px',\n              display: parentGroup.display,\n              opacity: parentGroup.opacity,\n              visibility: parentGroup.visibility\n              // the top group is appended to container\n            }, htmlGroup || container);\n            // Shortcut\n            const htmlGroupStyle = htmlGroup.style;\n            // Set listeners to update the HTML div's position\n            // whenever the SVG group position is changed.\n            extend(parentGroup, {\n              // (#7287) Pass htmlGroup to use\n              // the related group\n              classSetter: function (htmlGroup) {\n                return function (value) {\n                  this.element.setAttribute('class', value);\n                  htmlGroup.className = value;\n                };\n              }(htmlGroup),\n              // Extend the parent group's css function by\n              // updating the shadow div counterpart with the same\n              // style.\n              css: function (styles) {\n                // Call the base css method. The `parentGroup`\n                // can be either an SVGElement or an SVGLabel,\n                // in which the css method is extended (#19200).\n                parentProtoCss.call(parentGroup, styles);\n                [\n                // #6794\n                'cursor',\n                // #5595, #18821\n                'pointerEvents'].forEach(prop => {\n                  if (styles[prop]) {\n                    htmlGroupStyle[prop] = styles[prop];\n                  }\n                });\n                return parentGroup;\n              },\n              on: function () {\n                if (parents[0].div) {\n                  // #6418\n                  wrapper.on.apply({\n                    element: parents[0].div,\n                    onEvents: parentGroup.onEvents\n                  }, arguments);\n                }\n                return parentGroup;\n              },\n              translateXSetter: translateSetter,\n              translateYSetter: translateSetter\n            });\n            if (!parentGroup.addedSetters) {\n              addSetters(parentGroup);\n            }\n            // Apply pre-existing style\n            parentGroup.css(parentGroupStyles);\n          });\n        }\n      } else {\n        htmlGroup = container;\n      }\n      htmlGroup.appendChild(element);\n      wrapper.added = true;\n      if (wrapper.alignOnAdd) {\n        wrapper.htmlUpdateTransform();\n      }\n      return wrapper;\n    };\n    return wrapper;\n  }\n}\n/* *\n *\n *  Default Export\n *\n * */\nexport default HTMLRenderer;","map":{"version":3,"names":["AST","SVGElement","SVGRenderer","U","attr","createElement","extend","pick","composedMembers","HTMLRenderer","compose","SVGRendererClass","pushUnique","htmlRendererProto","prototype","svgRendererProto","html","str","x","y","wrapper","element","renderer","addSetters","gWrapper","style","forEach","prop","value","key","elem","styleObject","div","call","addedSetters","textSetter","textStr","bBox","oldTextWidth","setElementHTML","doTransform","xSetter","ySetter","alignSetter","rotationSetter","alignValue","textAlign","afterSetters","htmlUpdateTransform","text","Math","round","css","position","styledMode","fontFamily","fontSize","whiteSpace","htmlCss","add","svgGroupWrapper","container","box","parentNode","parents","htmlGroup","parentGroup","push","reverse","cls","parentProtoCss","translateSetter","htmlGroupStyle","left","top","parentGroupStyles","styles","className","translateX","translateY","display","opacity","visibility","classSetter","setAttribute","on","apply","onEvents","arguments","translateXSetter","translateYSetter","appendChild","added","alignOnAdd"],"sources":["D:/Vamtage/angular-widget-project/node_modules/highcharts/es-modules/Core/Renderer/HTML/HTMLRenderer.js"],"sourcesContent":["/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport AST from './AST.js';\nimport SVGElement from '../SVG/SVGElement.js';\nimport SVGRenderer from '../SVG/SVGRenderer.js';\nimport U from '../../Utilities.js';\nconst { attr, createElement, extend, pick } = U;\n/* *\n *\n *  Constants\n *\n * */\nconst composedMembers = [];\n/* *\n *\n *  Class\n *\n * */\n/* eslint-disable valid-jsdoc */\n// Extend SvgRenderer for useHTML option.\nclass HTMLRenderer extends SVGRenderer {\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    /** @private */\n    static compose(SVGRendererClass) {\n        if (U.pushUnique(composedMembers, SVGRendererClass)) {\n            const htmlRendererProto = HTMLRenderer.prototype, svgRendererProto = SVGRendererClass.prototype;\n            svgRendererProto.html = htmlRendererProto.html;\n        }\n        return SVGRendererClass;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Create HTML text node. This is used by the SVG renderer through the\n     * useHTML option.\n     *\n     * @private\n     * @function Highcharts.SVGRenderer#html\n     *\n     * @param {string} str\n     * The text of (subset) HTML to draw.\n     *\n     * @param {number} x\n     * The x position of the text's lower left corner.\n     *\n     * @param {number} y\n     * The y position of the text's lower left corner.\n     *\n     * @return {Highcharts.HTMLDOMElement}\n     * HTML element.\n     */\n    html(str, x, y) {\n        const wrapper = this.createElement('span'), element = wrapper.element, renderer = wrapper.renderer, addSetters = function (gWrapper, style) {\n            // These properties are set as attributes on the SVG group, and\n            // as identical CSS properties on the div. (#3542)\n            ['opacity', 'visibility'].forEach(function (prop) {\n                gWrapper[prop + 'Setter'] = function (value, key, elem) {\n                    const styleObject = gWrapper.div ?\n                        gWrapper.div.style :\n                        style;\n                    SVGElement.prototype[prop + 'Setter']\n                        .call(this, value, key, elem);\n                    if (styleObject) {\n                        styleObject[key] = value;\n                    }\n                };\n            });\n            gWrapper.addedSetters = true;\n        };\n        // Text setter\n        wrapper.textSetter = function (value) {\n            if (value !== this.textStr) {\n                delete this.bBox;\n                delete this.oldTextWidth;\n                AST.setElementHTML(this.element, pick(value, ''));\n                this.textStr = value;\n                wrapper.doTransform = true;\n            }\n        };\n        addSetters(wrapper, wrapper.element.style);\n        // Various setters which rely on update transform\n        wrapper.xSetter =\n            wrapper.ySetter =\n                wrapper.alignSetter =\n                    wrapper.rotationSetter =\n                        function (value, key) {\n                            if (key === 'align') {\n                                // Do not overwrite the SVGElement.align method.\n                                wrapper.alignValue = wrapper.textAlign = value;\n                            }\n                            else {\n                                wrapper[key] = value;\n                            }\n                            wrapper.doTransform = true;\n                        };\n        // Runs at the end of .attr()\n        wrapper.afterSetters = function () {\n            // Update transform. Do this outside the loop to prevent redundant\n            // updating for batch setting of attributes.\n            if (this.doTransform) {\n                this.htmlUpdateTransform();\n                this.doTransform = false;\n            }\n        };\n        // Set the default attributes\n        wrapper\n            .attr({\n            text: str,\n            x: Math.round(x),\n            y: Math.round(y)\n        })\n            .css({\n            position: 'absolute'\n        });\n        if (!renderer.styledMode) {\n            wrapper.css({\n                fontFamily: this.style.fontFamily,\n                fontSize: this.style.fontSize\n            });\n        }\n        // Keep the whiteSpace style outside the wrapper.styles collection\n        element.style.whiteSpace = 'nowrap';\n        // Use the HTML specific .css method\n        wrapper.css = wrapper.htmlCss;\n        wrapper.add = function (svgGroupWrapper) {\n            const container = renderer.box.parentNode, parents = [];\n            let htmlGroup, parentGroup;\n            this.parentGroup = svgGroupWrapper;\n            // Create a mock group to hold the HTML elements\n            if (svgGroupWrapper) {\n                htmlGroup = svgGroupWrapper.div;\n                if (!htmlGroup) {\n                    // Read the parent chain into an array and read from top\n                    // down\n                    parentGroup = svgGroupWrapper;\n                    while (parentGroup) {\n                        parents.push(parentGroup);\n                        // Move up to the next parent group\n                        parentGroup = parentGroup.parentGroup;\n                    }\n                    // Ensure dynamically updating position when any parent\n                    // is translated\n                    parents.reverse().forEach(function (parentGroup) {\n                        const cls = attr(parentGroup.element, 'class'), parentProtoCss = parentGroup.css;\n                        /**\n                         * Common translate setter for X and Y on the HTML\n                         * group. Reverted the fix for #6957 du to\n                         * positioning problems and offline export (#7254,\n                         * #7280, #7529)\n                         * @private\n                         * @param {*} value\n                         * @param {string} key\n                                                 */\n                        function translateSetter(value, key) {\n                            parentGroup[key] = value;\n                            if (key === 'translateX') {\n                                htmlGroupStyle.left = value + 'px';\n                            }\n                            else {\n                                htmlGroupStyle.top = value + 'px';\n                            }\n                            parentGroup.doTransform = true;\n                        }\n                        // Create a HTML div and append it to the parent div\n                        // to emulate the SVG group structure\n                        const parentGroupStyles = parentGroup.styles || {};\n                        htmlGroup =\n                            parentGroup.div =\n                                parentGroup.div || createElement('div', cls ? { className: cls } : void 0, {\n                                    position: 'absolute',\n                                    left: (parentGroup.translateX || 0) + 'px',\n                                    top: (parentGroup.translateY || 0) + 'px',\n                                    display: parentGroup.display,\n                                    opacity: parentGroup.opacity,\n                                    visibility: parentGroup.visibility\n                                    // the top group is appended to container\n                                }, htmlGroup || container);\n                        // Shortcut\n                        const htmlGroupStyle = htmlGroup.style;\n                        // Set listeners to update the HTML div's position\n                        // whenever the SVG group position is changed.\n                        extend(parentGroup, {\n                            // (#7287) Pass htmlGroup to use\n                            // the related group\n                            classSetter: (function (htmlGroup) {\n                                return function (value) {\n                                    this.element.setAttribute('class', value);\n                                    htmlGroup.className = value;\n                                };\n                            }(htmlGroup)),\n                            // Extend the parent group's css function by\n                            // updating the shadow div counterpart with the same\n                            // style.\n                            css: function (styles) {\n                                // Call the base css method. The `parentGroup`\n                                // can be either an SVGElement or an SVGLabel,\n                                // in which the css method is extended (#19200).\n                                parentProtoCss.call(parentGroup, styles);\n                                [\n                                    // #6794\n                                    'cursor',\n                                    // #5595, #18821\n                                    'pointerEvents'\n                                ].forEach((prop) => {\n                                    if (styles[prop]) {\n                                        htmlGroupStyle[prop] = styles[prop];\n                                    }\n                                });\n                                return parentGroup;\n                            },\n                            on: function () {\n                                if (parents[0].div) { // #6418\n                                    wrapper.on.apply({\n                                        element: parents[0].div,\n                                        onEvents: parentGroup.onEvents\n                                    }, arguments);\n                                }\n                                return parentGroup;\n                            },\n                            translateXSetter: translateSetter,\n                            translateYSetter: translateSetter\n                        });\n                        if (!parentGroup.addedSetters) {\n                            addSetters(parentGroup);\n                        }\n                        // Apply pre-existing style\n                        parentGroup.css(parentGroupStyles);\n                    });\n                }\n            }\n            else {\n                htmlGroup = container;\n            }\n            htmlGroup.appendChild(element);\n            wrapper.added = true;\n            if (wrapper.alignOnAdd) {\n                wrapper.htmlUpdateTransform();\n            }\n            return wrapper;\n        };\n        return wrapper;\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\nexport default HTMLRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}