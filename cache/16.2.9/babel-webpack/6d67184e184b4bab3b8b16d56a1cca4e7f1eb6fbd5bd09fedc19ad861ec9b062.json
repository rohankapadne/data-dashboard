{"ast":null,"code":"/* *\n *\n *  (c) 2010-2020 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n\nimport H from '../../Globals.js';\nconst {\n  SVG_NS,\n  win\n} = H;\nimport U from '../../Utilities.js';\nconst {\n  attr,\n  createElement,\n  css,\n  error,\n  isFunction,\n  isString,\n  objectEach,\n  splat\n} = U;\nconst {\n  trustedTypes\n} = win;\n/* *\n *\n *  Constants\n *\n * */\n// Create the trusted type policy. This should not be exposed.\nconst trustedTypesPolicy = trustedTypes && isFunction(trustedTypes.createPolicy) && trustedTypes.createPolicy('highcharts', {\n  createHTML: s => s\n});\nconst emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML('') : '';\n// IE9 and PhantomJS are only able to parse XML.\nconst hasValidDOMParser = function () {\n  try {\n    return Boolean(new DOMParser().parseFromString(emptyHTML, 'text/html'));\n  } catch (e) {\n    return false;\n  }\n}();\n/* *\n *\n *  Class\n *\n * */\n/**\n * The AST class represents an abstract syntax tree of HTML or SVG content. It\n * can take HTML as an argument, parse it, optionally transform it to SVG, then\n * perform sanitation before inserting it into the DOM.\n *\n * @class\n * @name Highcharts.AST\n *\n * @param {string|Array<Highcharts.ASTNode>} source\n * Either an HTML string or an ASTNode list to populate the tree.\n */\nclass AST {\n  /* *\n   *\n   *  Static Functions\n   *\n   * */\n  /**\n   * Filter an object of SVG or HTML attributes against the allow list.\n   *\n   * @static\n   *\n   * @function Highcharts.AST#filterUserAttributes\n   *\n   * @param {Highcharts.SVGAttributes} attributes The attributes to filter\n   *\n   * @return {Highcharts.SVGAttributes}\n   * The filtered attributes\n   */\n  static filterUserAttributes(attributes) {\n    objectEach(attributes, (val, key) => {\n      let valid = true;\n      if (AST.allowedAttributes.indexOf(key) === -1) {\n        valid = false;\n      }\n      if (['background', 'dynsrc', 'href', 'lowsrc', 'src'].indexOf(key) !== -1) {\n        valid = isString(val) && AST.allowedReferences.some(ref => val.indexOf(ref) === 0);\n      }\n      if (!valid) {\n        error(33, false, void 0, {\n          'Invalid attribute in config': `${key}`\n        });\n        delete attributes[key];\n      }\n      // #17753, < is not allowed in SVG attributes\n      if (isString(val) && attributes[key]) {\n        attributes[key] = val.replace(/</g, '&lt;');\n      }\n    });\n    return attributes;\n  }\n  static parseStyle(style) {\n    return style.split(';').reduce((styles, line) => {\n      const pair = line.split(':').map(s => s.trim()),\n        key = pair.shift();\n      if (key && pair.length) {\n        styles[key.replace(/-([a-z])/g, g => g[1].toUpperCase())] = pair.join(':'); // #17146\n      }\n\n      return styles;\n    }, {});\n  }\n  /**\n   * Utility function to set html content for an element by passing in a\n   * markup string. The markup is safely parsed by the AST class to avoid\n   * XSS vulnerabilities. This function should be used instead of setting\n   * `innerHTML` in all cases where the content is not fully trusted.\n   *\n   * @static\n   * @function Highcharts.AST#setElementHTML\n   *\n   * @param {SVGDOMElement|HTMLDOMElement} el\n   * Node to set content of.\n   *\n   * @param {string} html\n   * Markup string\n   */\n  static setElementHTML(el, html) {\n    el.innerHTML = AST.emptyHTML; // Clear previous\n    if (html) {\n      const ast = new AST(html);\n      ast.addToDOM(el);\n    }\n  }\n  /* *\n   *\n   *  Constructor\n   *\n   * */\n  // Construct an AST from HTML markup, or wrap an array of existing AST nodes\n  constructor(source) {\n    this.nodes = typeof source === 'string' ? this.parseMarkup(source) : source;\n  }\n  /* *\n   *\n   *  Functions\n   *\n   * */\n  /**\n   * Add the tree defined as a hierarchical JS structure to the DOM\n   *\n   * @function Highcharts.AST#addToDOM\n   *\n   * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} parent\n   * The node where it should be added\n   *\n   * @return {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement}\n   * The inserted node.\n   */\n  addToDOM(parent) {\n    /**\n     * @private\n     * @param {Highcharts.ASTNode} subtree\n     * HTML/SVG definition\n     * @param {Element} [subParent]\n     * parent node\n     * @return {Highcharts.SVGDOMElement|Highcharts.HTMLDOMElement}\n     * The inserted node.\n     */\n    function recurse(subtree, subParent) {\n      let ret;\n      splat(subtree).forEach(function (item) {\n        const tagName = item.tagName;\n        const textNode = item.textContent ? H.doc.createTextNode(item.textContent) : void 0;\n        // Whether to ignore the AST filtering totally, #15345\n        const bypassHTMLFiltering = AST.bypassHTMLFiltering;\n        let node;\n        if (tagName) {\n          if (tagName === '#text') {\n            node = textNode;\n          } else if (AST.allowedTags.indexOf(tagName) !== -1 || bypassHTMLFiltering) {\n            const NS = tagName === 'svg' ? SVG_NS : subParent.namespaceURI || SVG_NS;\n            const element = H.doc.createElementNS(NS, tagName);\n            const attributes = item.attributes || {};\n            // Apply attributes from root of AST node, legacy from\n            // from before TextBuilder\n            objectEach(item, function (val, key) {\n              if (key !== 'tagName' && key !== 'attributes' && key !== 'children' && key !== 'style' && key !== 'textContent') {\n                attributes[key] = val;\n              }\n            });\n            attr(element, bypassHTMLFiltering ? attributes : AST.filterUserAttributes(attributes));\n            if (item.style) {\n              css(element, item.style);\n            }\n            // Add text content\n            if (textNode) {\n              element.appendChild(textNode);\n            }\n            // Recurse\n            recurse(item.children || [], element);\n            node = element;\n          } else {\n            error(33, false, void 0, {\n              'Invalid tagName in config': tagName\n            });\n          }\n        }\n        // Add to the tree\n        if (node) {\n          subParent.appendChild(node);\n        }\n        ret = node;\n      });\n      // Return last node added (on top level it's the only one)\n      return ret;\n    }\n    return recurse(this.nodes, parent);\n  }\n  /**\n   * Parse HTML/SVG markup into AST Node objects. Used internally from the\n   * constructor.\n   *\n   * @private\n   *\n   * @function Highcharts.AST#getNodesFromMarkup\n   *\n   * @param {string} markup The markup string.\n   *\n   * @return {Array<Highcharts.ASTNode>} The parsed nodes.\n   */\n  parseMarkup(markup) {\n    const nodes = [];\n    markup = markup.trim()\n    // The style attribute throws a warning when parsing when CSP is\n    // enabled (#6884), so use an alias and pick it up below\n    // Make all quotation marks parse correctly to DOM (#17627)\n    .replace(/ style=([\"'])/g, ' data-style=$1');\n    let doc;\n    if (hasValidDOMParser) {\n      doc = new DOMParser().parseFromString(trustedTypesPolicy ? trustedTypesPolicy.createHTML(markup) : markup, 'text/html');\n    } else {\n      const body = createElement('div');\n      body.innerHTML = markup;\n      doc = {\n        body\n      };\n    }\n    const appendChildNodes = (node, addTo) => {\n      const tagName = node.nodeName.toLowerCase();\n      // Add allowed tags\n      const astNode = {\n        tagName\n      };\n      if (tagName === '#text') {\n        astNode.textContent = node.textContent || '';\n      }\n      const parsedAttributes = node.attributes;\n      // Add attributes\n      if (parsedAttributes) {\n        const attributes = {};\n        [].forEach.call(parsedAttributes, attrib => {\n          if (attrib.name === 'data-style') {\n            astNode.style = AST.parseStyle(attrib.value);\n          } else {\n            attributes[attrib.name] = attrib.value;\n          }\n        });\n        astNode.attributes = attributes;\n      }\n      // Handle children\n      if (node.childNodes.length) {\n        const children = [];\n        [].forEach.call(node.childNodes, childNode => {\n          appendChildNodes(childNode, children);\n        });\n        if (children.length) {\n          astNode.children = children;\n        }\n      }\n      addTo.push(astNode);\n    };\n    [].forEach.call(doc.body.childNodes, childNode => appendChildNodes(childNode, nodes));\n    return nodes;\n  }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * The list of allowed SVG or HTML attributes, used for sanitizing\n * potentially harmful content from the chart configuration before adding to\n * the DOM.\n *\n * @see [Source code with default values](\n * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedAttributes)\n *\n * @example\n * // Allow a custom, trusted attribute\n * Highcharts.AST.allowedAttributes.push('data-value');\n *\n * @name Highcharts.AST.allowedAttributes\n * @type {Array<string>}\n */\nAST.allowedAttributes = ['alt', 'aria-controls', 'aria-describedby', 'aria-expanded', 'aria-haspopup', 'aria-hidden', 'aria-label', 'aria-labelledby', 'aria-live', 'aria-pressed', 'aria-readonly', 'aria-roledescription', 'aria-selected', 'class', 'clip-path', 'color', 'colspan', 'cx', 'cy', 'd', 'dx', 'dy', 'disabled', 'fill', 'filterUnits', 'flood-color', 'flood-opacity', 'height', 'href', 'id', 'in', 'markerHeight', 'markerWidth', 'offset', 'opacity', 'orient', 'padding', 'paddingLeft', 'paddingRight', 'patternUnits', 'r', 'refX', 'refY', 'role', 'scope', 'slope', 'src', 'startOffset', 'stdDeviation', 'stroke', 'stroke-linecap', 'stroke-width', 'style', 'tableValues', 'result', 'rowspan', 'summary', 'target', 'tabindex', 'text-align', 'text-anchor', 'textAnchor', 'textLength', 'title', 'type', 'valign', 'width', 'x', 'x1', 'x2', 'xlink:href', 'y', 'y1', 'y2', 'zIndex'];\n/**\n * The list of allowed references for referring attributes like `href` and\n * `src`. Attribute values will only be allowed if they start with one of\n * these strings.\n *\n * @see [Source code with default values](\n * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedReferences)\n *\n * @example\n * // Allow tel:\n * Highcharts.AST.allowedReferences.push('tel:');\n *\n * @name    Highcharts.AST.allowedReferences\n * @type    {Array<string>}\n */\nAST.allowedReferences = ['https://', 'http://', 'mailto:', '/', '../', './', '#'];\n/**\n * The list of allowed SVG or HTML tags, used for sanitizing potentially\n * harmful content from the chart configuration before adding to the DOM.\n *\n * @see [Source code with default values](\n * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedTags)\n *\n * @example\n * // Allow a custom, trusted tag\n * Highcharts.AST.allowedTags.push('blink'); // ;)\n *\n * @name    Highcharts.AST.allowedTags\n * @type    {Array<string>}\n */\nAST.allowedTags = ['a', 'abbr', 'b', 'br', 'button', 'caption', 'circle', 'clipPath', 'code', 'dd', 'defs', 'div', 'dl', 'dt', 'em', 'feComponentTransfer', 'feDropShadow', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feOffset', 'feMerge', 'feMergeNode', 'filter', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'img', 'li', 'linearGradient', 'marker', 'ol', 'p', 'path', 'pattern', 'pre', 'rect', 'small', 'span', 'stop', 'strong', 'style', 'sub', 'sup', 'svg', 'table', 'text', 'textPath', 'thead', 'title', 'tbody', 'tspan', 'td', 'th', 'tr', 'u', 'ul', '#text'];\nAST.emptyHTML = emptyHTML;\n/**\n * Allow all custom SVG and HTML attributes, references and tags (together\n * with potentially harmful ones) to be added to the DOM from the chart\n * configuration. In other words, disable the the allow-listing which is the\n * primary functionality of the AST.\n *\n * WARNING: Setting this property to `true` while allowing untrusted user\n * data in the chart configuration will expose your application to XSS\n * security risks!\n *\n * Note that in case you want to allow a known set of tags or attributes,\n * you should allow-list them instead of disabling the filtering totally.\n * See [allowedAttributes](Highcharts.AST#.allowedAttributes),\n * [allowedReferences](Highcharts.AST#.allowedReferences) and\n * [allowedTags](Highcharts.AST#.allowedTags). The `bypassHTMLFiltering`\n * setting is intended only for those cases where allow-listing is not\n * practical, and the chart configuration already comes from a secure\n * source.\n *\n * @example\n * // Allow all custom attributes, references and tags (disable DOM XSS\n * // filtering)\n * Highcharts.AST.bypassHTMLFiltering = true;\n *\n * @name Highcharts.AST.bypassHTMLFiltering\n * @static\n */\nAST.bypassHTMLFiltering = false;\n/* *\n *\n *  Default Export\n *\n * */\nexport default AST;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Serialized form of an SVG/HTML definition, including children.\n *\n * @interface Highcharts.ASTNode\n */ /**\n    * @name Highcharts.ASTNode#attributes\n    * @type {Highcharts.SVGAttributes|undefined}\n    */ /**\n       * @name Highcharts.ASTNode#children\n       * @type {Array<Highcharts.ASTNode>|undefined}\n       */ /**\n          * @name Highcharts.ASTNode#tagName\n          * @type {string|undefined}\n          */ /**\n             * @name Highcharts.ASTNode#textContent\n             * @type {string|undefined}\n             */\n''; // keeps doclets above in file","map":{"version":3,"names":["H","SVG_NS","win","U","attr","createElement","css","error","isFunction","isString","objectEach","splat","trustedTypes","trustedTypesPolicy","createPolicy","createHTML","s","emptyHTML","hasValidDOMParser","Boolean","DOMParser","parseFromString","e","AST","filterUserAttributes","attributes","val","key","valid","allowedAttributes","indexOf","allowedReferences","some","ref","replace","parseStyle","style","split","reduce","styles","line","pair","map","trim","shift","length","g","toUpperCase","join","setElementHTML","el","html","innerHTML","ast","addToDOM","constructor","source","nodes","parseMarkup","parent","recurse","subtree","subParent","ret","forEach","item","tagName","textNode","textContent","doc","createTextNode","bypassHTMLFiltering","node","allowedTags","NS","namespaceURI","element","createElementNS","appendChild","children","markup","body","appendChildNodes","addTo","nodeName","toLowerCase","astNode","parsedAttributes","call","attrib","name","value","childNodes","childNode","push"],"sources":["D:/Vamtage/angular-widget-project/node_modules/highcharts/es-modules/Core/Renderer/HTML/AST.js"],"sourcesContent":["/* *\n *\n *  (c) 2010-2020 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport H from '../../Globals.js';\nconst { SVG_NS, win } = H;\nimport U from '../../Utilities.js';\nconst { attr, createElement, css, error, isFunction, isString, objectEach, splat } = U;\nconst { trustedTypes } = win;\n/* *\n *\n *  Constants\n *\n * */\n// Create the trusted type policy. This should not be exposed.\nconst trustedTypesPolicy = (trustedTypes &&\n    isFunction(trustedTypes.createPolicy) &&\n    trustedTypes.createPolicy('highcharts', {\n        createHTML: (s) => s\n    }));\nconst emptyHTML = trustedTypesPolicy ?\n    trustedTypesPolicy.createHTML('') :\n    '';\n// IE9 and PhantomJS are only able to parse XML.\nconst hasValidDOMParser = (function () {\n    try {\n        return Boolean(new DOMParser().parseFromString(emptyHTML, 'text/html'));\n    }\n    catch (e) {\n        return false;\n    }\n}());\n/* *\n *\n *  Class\n *\n * */\n/**\n * The AST class represents an abstract syntax tree of HTML or SVG content. It\n * can take HTML as an argument, parse it, optionally transform it to SVG, then\n * perform sanitation before inserting it into the DOM.\n *\n * @class\n * @name Highcharts.AST\n *\n * @param {string|Array<Highcharts.ASTNode>} source\n * Either an HTML string or an ASTNode list to populate the tree.\n */\nclass AST {\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    /**\n     * Filter an object of SVG or HTML attributes against the allow list.\n     *\n     * @static\n     *\n     * @function Highcharts.AST#filterUserAttributes\n     *\n     * @param {Highcharts.SVGAttributes} attributes The attributes to filter\n     *\n     * @return {Highcharts.SVGAttributes}\n     * The filtered attributes\n     */\n    static filterUserAttributes(attributes) {\n        objectEach(attributes, (val, key) => {\n            let valid = true;\n            if (AST.allowedAttributes.indexOf(key) === -1) {\n                valid = false;\n            }\n            if (['background', 'dynsrc', 'href', 'lowsrc', 'src']\n                .indexOf(key) !== -1) {\n                valid = isString(val) && AST.allowedReferences.some((ref) => val.indexOf(ref) === 0);\n            }\n            if (!valid) {\n                error(33, false, void 0, {\n                    'Invalid attribute in config': `${key}`\n                });\n                delete attributes[key];\n            }\n            // #17753, < is not allowed in SVG attributes\n            if (isString(val) && attributes[key]) {\n                attributes[key] = val.replace(/</g, '&lt;');\n            }\n        });\n        return attributes;\n    }\n    static parseStyle(style) {\n        return style\n            .split(';')\n            .reduce((styles, line) => {\n            const pair = line.split(':').map((s) => s.trim()), key = pair.shift();\n            if (key && pair.length) {\n                styles[key.replace(/-([a-z])/g, (g) => g[1].toUpperCase())] = pair.join(':'); // #17146\n            }\n            return styles;\n        }, {});\n    }\n    /**\n     * Utility function to set html content for an element by passing in a\n     * markup string. The markup is safely parsed by the AST class to avoid\n     * XSS vulnerabilities. This function should be used instead of setting\n     * `innerHTML` in all cases where the content is not fully trusted.\n     *\n     * @static\n     * @function Highcharts.AST#setElementHTML\n     *\n     * @param {SVGDOMElement|HTMLDOMElement} el\n     * Node to set content of.\n     *\n     * @param {string} html\n     * Markup string\n     */\n    static setElementHTML(el, html) {\n        el.innerHTML = AST.emptyHTML; // Clear previous\n        if (html) {\n            const ast = new AST(html);\n            ast.addToDOM(el);\n        }\n    }\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    // Construct an AST from HTML markup, or wrap an array of existing AST nodes\n    constructor(source) {\n        this.nodes = typeof source === 'string' ?\n            this.parseMarkup(source) : source;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Add the tree defined as a hierarchical JS structure to the DOM\n     *\n     * @function Highcharts.AST#addToDOM\n     *\n     * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} parent\n     * The node where it should be added\n     *\n     * @return {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement}\n     * The inserted node.\n     */\n    addToDOM(parent) {\n        /**\n         * @private\n         * @param {Highcharts.ASTNode} subtree\n         * HTML/SVG definition\n         * @param {Element} [subParent]\n         * parent node\n         * @return {Highcharts.SVGDOMElement|Highcharts.HTMLDOMElement}\n         * The inserted node.\n         */\n        function recurse(subtree, subParent) {\n            let ret;\n            splat(subtree).forEach(function (item) {\n                const tagName = item.tagName;\n                const textNode = item.textContent ?\n                    H.doc.createTextNode(item.textContent) :\n                    void 0;\n                // Whether to ignore the AST filtering totally, #15345\n                const bypassHTMLFiltering = AST.bypassHTMLFiltering;\n                let node;\n                if (tagName) {\n                    if (tagName === '#text') {\n                        node = textNode;\n                    }\n                    else if (AST.allowedTags.indexOf(tagName) !== -1 ||\n                        bypassHTMLFiltering) {\n                        const NS = tagName === 'svg' ?\n                            SVG_NS :\n                            (subParent.namespaceURI || SVG_NS);\n                        const element = H.doc.createElementNS(NS, tagName);\n                        const attributes = item.attributes || {};\n                        // Apply attributes from root of AST node, legacy from\n                        // from before TextBuilder\n                        objectEach(item, function (val, key) {\n                            if (key !== 'tagName' &&\n                                key !== 'attributes' &&\n                                key !== 'children' &&\n                                key !== 'style' &&\n                                key !== 'textContent') {\n                                attributes[key] = val;\n                            }\n                        });\n                        attr(element, bypassHTMLFiltering ?\n                            attributes :\n                            AST.filterUserAttributes(attributes));\n                        if (item.style) {\n                            css(element, item.style);\n                        }\n                        // Add text content\n                        if (textNode) {\n                            element.appendChild(textNode);\n                        }\n                        // Recurse\n                        recurse(item.children || [], element);\n                        node = element;\n                    }\n                    else {\n                        error(33, false, void 0, {\n                            'Invalid tagName in config': tagName\n                        });\n                    }\n                }\n                // Add to the tree\n                if (node) {\n                    subParent.appendChild(node);\n                }\n                ret = node;\n            });\n            // Return last node added (on top level it's the only one)\n            return ret;\n        }\n        return recurse(this.nodes, parent);\n    }\n    /**\n     * Parse HTML/SVG markup into AST Node objects. Used internally from the\n     * constructor.\n     *\n     * @private\n     *\n     * @function Highcharts.AST#getNodesFromMarkup\n     *\n     * @param {string} markup The markup string.\n     *\n     * @return {Array<Highcharts.ASTNode>} The parsed nodes.\n     */\n    parseMarkup(markup) {\n        const nodes = [];\n        markup = markup\n            .trim()\n            // The style attribute throws a warning when parsing when CSP is\n            // enabled (#6884), so use an alias and pick it up below\n            // Make all quotation marks parse correctly to DOM (#17627)\n            .replace(/ style=([\"'])/g, ' data-style=$1');\n        let doc;\n        if (hasValidDOMParser) {\n            doc = new DOMParser().parseFromString(trustedTypesPolicy ?\n                trustedTypesPolicy.createHTML(markup) :\n                markup, 'text/html');\n        }\n        else {\n            const body = createElement('div');\n            body.innerHTML = markup;\n            doc = { body };\n        }\n        const appendChildNodes = (node, addTo) => {\n            const tagName = node.nodeName.toLowerCase();\n            // Add allowed tags\n            const astNode = {\n                tagName\n            };\n            if (tagName === '#text') {\n                astNode.textContent = node.textContent || '';\n            }\n            const parsedAttributes = node.attributes;\n            // Add attributes\n            if (parsedAttributes) {\n                const attributes = {};\n                [].forEach.call(parsedAttributes, (attrib) => {\n                    if (attrib.name === 'data-style') {\n                        astNode.style = AST.parseStyle(attrib.value);\n                    }\n                    else {\n                        attributes[attrib.name] = attrib.value;\n                    }\n                });\n                astNode.attributes = attributes;\n            }\n            // Handle children\n            if (node.childNodes.length) {\n                const children = [];\n                [].forEach.call(node.childNodes, (childNode) => {\n                    appendChildNodes(childNode, children);\n                });\n                if (children.length) {\n                    astNode.children = children;\n                }\n            }\n            addTo.push(astNode);\n        };\n        [].forEach.call(doc.body.childNodes, (childNode) => appendChildNodes(childNode, nodes));\n        return nodes;\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * The list of allowed SVG or HTML attributes, used for sanitizing\n * potentially harmful content from the chart configuration before adding to\n * the DOM.\n *\n * @see [Source code with default values](\n * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedAttributes)\n *\n * @example\n * // Allow a custom, trusted attribute\n * Highcharts.AST.allowedAttributes.push('data-value');\n *\n * @name Highcharts.AST.allowedAttributes\n * @type {Array<string>}\n */\nAST.allowedAttributes = [\n    'alt',\n    'aria-controls',\n    'aria-describedby',\n    'aria-expanded',\n    'aria-haspopup',\n    'aria-hidden',\n    'aria-label',\n    'aria-labelledby',\n    'aria-live',\n    'aria-pressed',\n    'aria-readonly',\n    'aria-roledescription',\n    'aria-selected',\n    'class',\n    'clip-path',\n    'color',\n    'colspan',\n    'cx',\n    'cy',\n    'd',\n    'dx',\n    'dy',\n    'disabled',\n    'fill',\n    'filterUnits',\n    'flood-color',\n    'flood-opacity',\n    'height',\n    'href',\n    'id',\n    'in',\n    'markerHeight',\n    'markerWidth',\n    'offset',\n    'opacity',\n    'orient',\n    'padding',\n    'paddingLeft',\n    'paddingRight',\n    'patternUnits',\n    'r',\n    'refX',\n    'refY',\n    'role',\n    'scope',\n    'slope',\n    'src',\n    'startOffset',\n    'stdDeviation',\n    'stroke',\n    'stroke-linecap',\n    'stroke-width',\n    'style',\n    'tableValues',\n    'result',\n    'rowspan',\n    'summary',\n    'target',\n    'tabindex',\n    'text-align',\n    'text-anchor',\n    'textAnchor',\n    'textLength',\n    'title',\n    'type',\n    'valign',\n    'width',\n    'x',\n    'x1',\n    'x2',\n    'xlink:href',\n    'y',\n    'y1',\n    'y2',\n    'zIndex'\n];\n/**\n * The list of allowed references for referring attributes like `href` and\n * `src`. Attribute values will only be allowed if they start with one of\n * these strings.\n *\n * @see [Source code with default values](\n * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedReferences)\n *\n * @example\n * // Allow tel:\n * Highcharts.AST.allowedReferences.push('tel:');\n *\n * @name    Highcharts.AST.allowedReferences\n * @type    {Array<string>}\n */\nAST.allowedReferences = [\n    'https://',\n    'http://',\n    'mailto:',\n    '/',\n    '../',\n    './',\n    '#'\n];\n/**\n * The list of allowed SVG or HTML tags, used for sanitizing potentially\n * harmful content from the chart configuration before adding to the DOM.\n *\n * @see [Source code with default values](\n * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedTags)\n *\n * @example\n * // Allow a custom, trusted tag\n * Highcharts.AST.allowedTags.push('blink'); // ;)\n *\n * @name    Highcharts.AST.allowedTags\n * @type    {Array<string>}\n */\nAST.allowedTags = [\n    'a',\n    'abbr',\n    'b',\n    'br',\n    'button',\n    'caption',\n    'circle',\n    'clipPath',\n    'code',\n    'dd',\n    'defs',\n    'div',\n    'dl',\n    'dt',\n    'em',\n    'feComponentTransfer',\n    'feDropShadow',\n    'feFuncA',\n    'feFuncB',\n    'feFuncG',\n    'feFuncR',\n    'feGaussianBlur',\n    'feOffset',\n    'feMerge',\n    'feMergeNode',\n    'filter',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'hr',\n    'i',\n    'img',\n    'li',\n    'linearGradient',\n    'marker',\n    'ol',\n    'p',\n    'path',\n    'pattern',\n    'pre',\n    'rect',\n    'small',\n    'span',\n    'stop',\n    'strong',\n    'style',\n    'sub',\n    'sup',\n    'svg',\n    'table',\n    'text',\n    'textPath',\n    'thead',\n    'title',\n    'tbody',\n    'tspan',\n    'td',\n    'th',\n    'tr',\n    'u',\n    'ul',\n    '#text'\n];\nAST.emptyHTML = emptyHTML;\n/**\n * Allow all custom SVG and HTML attributes, references and tags (together\n * with potentially harmful ones) to be added to the DOM from the chart\n * configuration. In other words, disable the the allow-listing which is the\n * primary functionality of the AST.\n *\n * WARNING: Setting this property to `true` while allowing untrusted user\n * data in the chart configuration will expose your application to XSS\n * security risks!\n *\n * Note that in case you want to allow a known set of tags or attributes,\n * you should allow-list them instead of disabling the filtering totally.\n * See [allowedAttributes](Highcharts.AST#.allowedAttributes),\n * [allowedReferences](Highcharts.AST#.allowedReferences) and\n * [allowedTags](Highcharts.AST#.allowedTags). The `bypassHTMLFiltering`\n * setting is intended only for those cases where allow-listing is not\n * practical, and the chart configuration already comes from a secure\n * source.\n *\n * @example\n * // Allow all custom attributes, references and tags (disable DOM XSS\n * // filtering)\n * Highcharts.AST.bypassHTMLFiltering = true;\n *\n * @name Highcharts.AST.bypassHTMLFiltering\n * @static\n */\nAST.bypassHTMLFiltering = false;\n/* *\n *\n *  Default Export\n *\n * */\nexport default AST;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Serialized form of an SVG/HTML definition, including children.\n *\n * @interface Highcharts.ASTNode\n */ /**\n* @name Highcharts.ASTNode#attributes\n* @type {Highcharts.SVGAttributes|undefined}\n*/ /**\n* @name Highcharts.ASTNode#children\n* @type {Array<Highcharts.ASTNode>|undefined}\n*/ /**\n* @name Highcharts.ASTNode#tagName\n* @type {string|undefined}\n*/ /**\n* @name Highcharts.ASTNode#textContent\n* @type {string|undefined}\n*/\n(''); // keeps doclets above in file\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AACZ,OAAOA,CAAC,MAAM,kBAAkB;AAChC,MAAM;EAAEC,MAAM;EAAEC;AAAI,CAAC,GAAGF,CAAC;AACzB,OAAOG,CAAC,MAAM,oBAAoB;AAClC,MAAM;EAAEC,IAAI;EAAEC,aAAa;EAAEC,GAAG;EAAEC,KAAK;EAAEC,UAAU;EAAEC,QAAQ;EAAEC,UAAU;EAAEC;AAAM,CAAC,GAAGR,CAAC;AACtF,MAAM;EAAES;AAAa,CAAC,GAAGV,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMW,kBAAkB,GAAID,YAAY,IACpCJ,UAAU,CAACI,YAAY,CAACE,YAAY,CAAC,IACrCF,YAAY,CAACE,YAAY,CAAC,YAAY,EAAE;EACpCC,UAAU,EAAGC,CAAC,IAAKA;AACvB,CAAC,CAAE;AACP,MAAMC,SAAS,GAAGJ,kBAAkB,GAChCA,kBAAkB,CAACE,UAAU,CAAC,EAAE,CAAC,GACjC,EAAE;AACN;AACA,MAAMG,iBAAiB,GAAI,YAAY;EACnC,IAAI;IACA,OAAOC,OAAO,CAAC,IAAIC,SAAS,CAAC,CAAC,CAACC,eAAe,CAACJ,SAAS,EAAE,WAAW,CAAC,CAAC;EAC3E,CAAC,CACD,OAAOK,CAAC,EAAE;IACN,OAAO,KAAK;EAChB;AACJ,CAAC,CAAC,CAAE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,GAAG,CAAC;EACN;AACJ;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,oBAAoBA,CAACC,UAAU,EAAE;IACpCf,UAAU,CAACe,UAAU,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;MACjC,IAAIC,KAAK,GAAG,IAAI;MAChB,IAAIL,GAAG,CAACM,iBAAiB,CAACC,OAAO,CAACH,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;QAC3CC,KAAK,GAAG,KAAK;MACjB;MACA,IAAI,CAAC,YAAY,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC,CAChDE,OAAO,CAACH,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;QACtBC,KAAK,GAAGnB,QAAQ,CAACiB,GAAG,CAAC,IAAIH,GAAG,CAACQ,iBAAiB,CAACC,IAAI,CAAEC,GAAG,IAAKP,GAAG,CAACI,OAAO,CAACG,GAAG,CAAC,KAAK,CAAC,CAAC;MACxF;MACA,IAAI,CAACL,KAAK,EAAE;QACRrB,KAAK,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE;UACrB,6BAA6B,EAAG,GAAEoB,GAAI;QAC1C,CAAC,CAAC;QACF,OAAOF,UAAU,CAACE,GAAG,CAAC;MAC1B;MACA;MACA,IAAIlB,QAAQ,CAACiB,GAAG,CAAC,IAAID,UAAU,CAACE,GAAG,CAAC,EAAE;QAClCF,UAAU,CAACE,GAAG,CAAC,GAAGD,GAAG,CAACQ,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;MAC/C;IACJ,CAAC,CAAC;IACF,OAAOT,UAAU;EACrB;EACA,OAAOU,UAAUA,CAACC,KAAK,EAAE;IACrB,OAAOA,KAAK,CACPC,KAAK,CAAC,GAAG,CAAC,CACVC,MAAM,CAAC,CAACC,MAAM,EAAEC,IAAI,KAAK;MAC1B,MAAMC,IAAI,GAAGD,IAAI,CAACH,KAAK,CAAC,GAAG,CAAC,CAACK,GAAG,CAAE1B,CAAC,IAAKA,CAAC,CAAC2B,IAAI,CAAC,CAAC,CAAC;QAAEhB,GAAG,GAAGc,IAAI,CAACG,KAAK,CAAC,CAAC;MACrE,IAAIjB,GAAG,IAAIc,IAAI,CAACI,MAAM,EAAE;QACpBN,MAAM,CAACZ,GAAG,CAACO,OAAO,CAAC,WAAW,EAAGY,CAAC,IAAKA,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,GAAGN,IAAI,CAACO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;MAClF;;MACA,OAAOT,MAAM;IACjB,CAAC,EAAE,CAAC,CAAC,CAAC;EACV;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOU,cAAcA,CAACC,EAAE,EAAEC,IAAI,EAAE;IAC5BD,EAAE,CAACE,SAAS,GAAG7B,GAAG,CAACN,SAAS,CAAC,CAAC;IAC9B,IAAIkC,IAAI,EAAE;MACN,MAAME,GAAG,GAAG,IAAI9B,GAAG,CAAC4B,IAAI,CAAC;MACzBE,GAAG,CAACC,QAAQ,CAACJ,EAAE,CAAC;IACpB;EACJ;EACA;AACJ;AACA;AACA;AACA;EACI;EACAK,WAAWA,CAACC,MAAM,EAAE;IAChB,IAAI,CAACC,KAAK,GAAG,OAAOD,MAAM,KAAK,QAAQ,GACnC,IAAI,CAACE,WAAW,CAACF,MAAM,CAAC,GAAGA,MAAM;EACzC;EACA;AACJ;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIF,QAAQA,CAACK,MAAM,EAAE;IACb;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAASC,OAAOA,CAACC,OAAO,EAAEC,SAAS,EAAE;MACjC,IAAIC,GAAG;MACPpD,KAAK,CAACkD,OAAO,CAAC,CAACG,OAAO,CAAC,UAAUC,IAAI,EAAE;QACnC,MAAMC,OAAO,GAAGD,IAAI,CAACC,OAAO;QAC5B,MAAMC,QAAQ,GAAGF,IAAI,CAACG,WAAW,GAC7BpE,CAAC,CAACqE,GAAG,CAACC,cAAc,CAACL,IAAI,CAACG,WAAW,CAAC,GACtC,KAAK,CAAC;QACV;QACA,MAAMG,mBAAmB,GAAGhD,GAAG,CAACgD,mBAAmB;QACnD,IAAIC,IAAI;QACR,IAAIN,OAAO,EAAE;UACT,IAAIA,OAAO,KAAK,OAAO,EAAE;YACrBM,IAAI,GAAGL,QAAQ;UACnB,CAAC,MACI,IAAI5C,GAAG,CAACkD,WAAW,CAAC3C,OAAO,CAACoC,OAAO,CAAC,KAAK,CAAC,CAAC,IAC5CK,mBAAmB,EAAE;YACrB,MAAMG,EAAE,GAAGR,OAAO,KAAK,KAAK,GACxBjE,MAAM,GACL6D,SAAS,CAACa,YAAY,IAAI1E,MAAO;YACtC,MAAM2E,OAAO,GAAG5E,CAAC,CAACqE,GAAG,CAACQ,eAAe,CAACH,EAAE,EAAER,OAAO,CAAC;YAClD,MAAMzC,UAAU,GAAGwC,IAAI,CAACxC,UAAU,IAAI,CAAC,CAAC;YACxC;YACA;YACAf,UAAU,CAACuD,IAAI,EAAE,UAAUvC,GAAG,EAAEC,GAAG,EAAE;cACjC,IAAIA,GAAG,KAAK,SAAS,IACjBA,GAAG,KAAK,YAAY,IACpBA,GAAG,KAAK,UAAU,IAClBA,GAAG,KAAK,OAAO,IACfA,GAAG,KAAK,aAAa,EAAE;gBACvBF,UAAU,CAACE,GAAG,CAAC,GAAGD,GAAG;cACzB;YACJ,CAAC,CAAC;YACFtB,IAAI,CAACwE,OAAO,EAAEL,mBAAmB,GAC7B9C,UAAU,GACVF,GAAG,CAACC,oBAAoB,CAACC,UAAU,CAAC,CAAC;YACzC,IAAIwC,IAAI,CAAC7B,KAAK,EAAE;cACZ9B,GAAG,CAACsE,OAAO,EAAEX,IAAI,CAAC7B,KAAK,CAAC;YAC5B;YACA;YACA,IAAI+B,QAAQ,EAAE;cACVS,OAAO,CAACE,WAAW,CAACX,QAAQ,CAAC;YACjC;YACA;YACAP,OAAO,CAACK,IAAI,CAACc,QAAQ,IAAI,EAAE,EAAEH,OAAO,CAAC;YACrCJ,IAAI,GAAGI,OAAO;UAClB,CAAC,MACI;YACDrE,KAAK,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE;cACrB,2BAA2B,EAAE2D;YACjC,CAAC,CAAC;UACN;QACJ;QACA;QACA,IAAIM,IAAI,EAAE;UACNV,SAAS,CAACgB,WAAW,CAACN,IAAI,CAAC;QAC/B;QACAT,GAAG,GAAGS,IAAI;MACd,CAAC,CAAC;MACF;MACA,OAAOT,GAAG;IACd;IACA,OAAOH,OAAO,CAAC,IAAI,CAACH,KAAK,EAAEE,MAAM,CAAC;EACtC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACID,WAAWA,CAACsB,MAAM,EAAE;IAChB,MAAMvB,KAAK,GAAG,EAAE;IAChBuB,MAAM,GAAGA,MAAM,CACVrC,IAAI,CAAC;IACN;IACA;IACA;IAAA,CACCT,OAAO,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;IAChD,IAAImC,GAAG;IACP,IAAInD,iBAAiB,EAAE;MACnBmD,GAAG,GAAG,IAAIjD,SAAS,CAAC,CAAC,CAACC,eAAe,CAACR,kBAAkB,GACpDA,kBAAkB,CAACE,UAAU,CAACiE,MAAM,CAAC,GACrCA,MAAM,EAAE,WAAW,CAAC;IAC5B,CAAC,MACI;MACD,MAAMC,IAAI,GAAG5E,aAAa,CAAC,KAAK,CAAC;MACjC4E,IAAI,CAAC7B,SAAS,GAAG4B,MAAM;MACvBX,GAAG,GAAG;QAAEY;MAAK,CAAC;IAClB;IACA,MAAMC,gBAAgB,GAAGA,CAACV,IAAI,EAAEW,KAAK,KAAK;MACtC,MAAMjB,OAAO,GAAGM,IAAI,CAACY,QAAQ,CAACC,WAAW,CAAC,CAAC;MAC3C;MACA,MAAMC,OAAO,GAAG;QACZpB;MACJ,CAAC;MACD,IAAIA,OAAO,KAAK,OAAO,EAAE;QACrBoB,OAAO,CAAClB,WAAW,GAAGI,IAAI,CAACJ,WAAW,IAAI,EAAE;MAChD;MACA,MAAMmB,gBAAgB,GAAGf,IAAI,CAAC/C,UAAU;MACxC;MACA,IAAI8D,gBAAgB,EAAE;QAClB,MAAM9D,UAAU,GAAG,CAAC,CAAC;QACrB,EAAE,CAACuC,OAAO,CAACwB,IAAI,CAACD,gBAAgB,EAAGE,MAAM,IAAK;UAC1C,IAAIA,MAAM,CAACC,IAAI,KAAK,YAAY,EAAE;YAC9BJ,OAAO,CAAClD,KAAK,GAAGb,GAAG,CAACY,UAAU,CAACsD,MAAM,CAACE,KAAK,CAAC;UAChD,CAAC,MACI;YACDlE,UAAU,CAACgE,MAAM,CAACC,IAAI,CAAC,GAAGD,MAAM,CAACE,KAAK;UAC1C;QACJ,CAAC,CAAC;QACFL,OAAO,CAAC7D,UAAU,GAAGA,UAAU;MACnC;MACA;MACA,IAAI+C,IAAI,CAACoB,UAAU,CAAC/C,MAAM,EAAE;QACxB,MAAMkC,QAAQ,GAAG,EAAE;QACnB,EAAE,CAACf,OAAO,CAACwB,IAAI,CAAChB,IAAI,CAACoB,UAAU,EAAGC,SAAS,IAAK;UAC5CX,gBAAgB,CAACW,SAAS,EAAEd,QAAQ,CAAC;QACzC,CAAC,CAAC;QACF,IAAIA,QAAQ,CAAClC,MAAM,EAAE;UACjByC,OAAO,CAACP,QAAQ,GAAGA,QAAQ;QAC/B;MACJ;MACAI,KAAK,CAACW,IAAI,CAACR,OAAO,CAAC;IACvB,CAAC;IACD,EAAE,CAACtB,OAAO,CAACwB,IAAI,CAACnB,GAAG,CAACY,IAAI,CAACW,UAAU,EAAGC,SAAS,IAAKX,gBAAgB,CAACW,SAAS,EAAEpC,KAAK,CAAC,CAAC;IACvF,OAAOA,KAAK;EAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlC,GAAG,CAACM,iBAAiB,GAAG,CACpB,KAAK,EACL,eAAe,EACf,kBAAkB,EAClB,eAAe,EACf,eAAe,EACf,aAAa,EACb,YAAY,EACZ,iBAAiB,EACjB,WAAW,EACX,cAAc,EACd,eAAe,EACf,sBAAsB,EACtB,eAAe,EACf,OAAO,EACP,WAAW,EACX,OAAO,EACP,SAAS,EACT,IAAI,EACJ,IAAI,EACJ,GAAG,EACH,IAAI,EACJ,IAAI,EACJ,UAAU,EACV,MAAM,EACN,aAAa,EACb,aAAa,EACb,eAAe,EACf,QAAQ,EACR,MAAM,EACN,IAAI,EACJ,IAAI,EACJ,cAAc,EACd,aAAa,EACb,QAAQ,EACR,SAAS,EACT,QAAQ,EACR,SAAS,EACT,aAAa,EACb,cAAc,EACd,cAAc,EACd,GAAG,EACH,MAAM,EACN,MAAM,EACN,MAAM,EACN,OAAO,EACP,OAAO,EACP,KAAK,EACL,aAAa,EACb,cAAc,EACd,QAAQ,EACR,gBAAgB,EAChB,cAAc,EACd,OAAO,EACP,aAAa,EACb,QAAQ,EACR,SAAS,EACT,SAAS,EACT,QAAQ,EACR,UAAU,EACV,YAAY,EACZ,aAAa,EACb,YAAY,EACZ,YAAY,EACZ,OAAO,EACP,MAAM,EACN,QAAQ,EACR,OAAO,EACP,GAAG,EACH,IAAI,EACJ,IAAI,EACJ,YAAY,EACZ,GAAG,EACH,IAAI,EACJ,IAAI,EACJ,QAAQ,CACX;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAN,GAAG,CAACQ,iBAAiB,GAAG,CACpB,UAAU,EACV,SAAS,EACT,SAAS,EACT,GAAG,EACH,KAAK,EACL,IAAI,EACJ,GAAG,CACN;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,GAAG,CAACkD,WAAW,GAAG,CACd,GAAG,EACH,MAAM,EACN,GAAG,EACH,IAAI,EACJ,QAAQ,EACR,SAAS,EACT,QAAQ,EACR,UAAU,EACV,MAAM,EACN,IAAI,EACJ,MAAM,EACN,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,qBAAqB,EACrB,cAAc,EACd,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,gBAAgB,EAChB,UAAU,EACV,SAAS,EACT,aAAa,EACb,QAAQ,EACR,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,GAAG,EACH,KAAK,EACL,IAAI,EACJ,gBAAgB,EAChB,QAAQ,EACR,IAAI,EACJ,GAAG,EACH,MAAM,EACN,SAAS,EACT,KAAK,EACL,MAAM,EACN,OAAO,EACP,MAAM,EACN,MAAM,EACN,QAAQ,EACR,OAAO,EACP,KAAK,EACL,KAAK,EACL,KAAK,EACL,OAAO,EACP,MAAM,EACN,UAAU,EACV,OAAO,EACP,OAAO,EACP,OAAO,EACP,OAAO,EACP,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,GAAG,EACH,IAAI,EACJ,OAAO,CACV;AACDlD,GAAG,CAACN,SAAS,GAAGA,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAM,GAAG,CAACgD,mBAAmB,GAAG,KAAK;AAC/B;AACA;AACA;AACA;AACA;AACA,eAAehD,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAJA,CAII;AACJ;AACA;AACA,MAHI,CAGD;AACH;AACA;AACA,SAHG,CAGA;AACH;AACA;AACA,YAHG,CAGA;AACH;AACA;AACA;AACC,EAAE,CAAE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}