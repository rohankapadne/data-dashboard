{"ast":null,"code":"/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n\nimport Series from '../../Core/Series/Series.js';\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nimport U from '../../Core/Utilities.js';\nconst {\n  defined,\n  merge,\n  isObject\n} = U;\n/* *\n *\n *  Class\n *\n * */\n/**\n * The line series is the base type and is therefor the series base prototype.\n *\n * @private\n */\nclass LineSeries extends Series {\n  constructor() {\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    super(...arguments);\n    /* *\n     *\n     *  Properties\n     *\n     * */\n    this.data = void 0;\n    this.options = void 0;\n    this.points = void 0;\n  }\n  /* *\n   *\n   *  Functions\n   *\n   * */\n  /**\n   * Draw the graph. Called internally when rendering line-like series\n   * types. The first time it generates the `series.graph` item and\n   * optionally other series-wide items like `series.area` for area\n   * charts. On subsequent calls these items are updated with new\n   * positions and attributes.\n   *\n   * @function Highcharts.Series#drawGraph\n   */\n  drawGraph() {\n    const series = this,\n      options = this.options,\n      graphPath = (this.gappedPath || this.getGraphPath).call(this),\n      styledMode = this.chart.styledMode;\n    let props = [['graph', 'highcharts-graph']];\n    // Presentational properties\n    if (!styledMode) {\n      props[0].push(options.lineColor || this.color || \"#cccccc\" /* Palette.neutralColor20 */ // when colorByPoint = true\n      , options.dashStyle);\n    }\n    props = series.getZonesGraphs(props);\n    // Draw the graph\n    props.forEach(function (prop, i) {\n      const graphKey = prop[0];\n      let attribs,\n        graph = series[graphKey];\n      const verb = graph ? 'animate' : 'attr';\n      if (graph) {\n        graph.endX = series.preventGraphAnimation ? null : graphPath.xMap;\n        graph.animate({\n          d: graphPath\n        });\n      } else if (graphPath.length) {\n        // #1487\n        /**\n         * SVG element of area-based charts. Can be used for styling\n         * purposes. If zones are configured, this element will be\n         * hidden and replaced by multiple zone areas, accessible\n         * via `series['zone-area-x']` (where x is a number,\n         * starting with 0).\n         *\n         * @name Highcharts.Series#area\n         * @type {Highcharts.SVGElement|undefined}\n         */\n        /**\n         * SVG element of line-based charts. Can be used for styling\n         * purposes. If zones are configured, this element will be\n         * hidden and replaced by multiple zone lines, accessible\n         * via `series['zone-graph-x']` (where x is a number,\n         * starting with 0).\n         *\n         * @name Highcharts.Series#graph\n         * @type {Highcharts.SVGElement|undefined}\n         */\n        series[graphKey] = graph = series.chart.renderer.path(graphPath).addClass(prop[1]).attr({\n          zIndex: 1\n        }) // #1069\n        .add(series.group);\n      }\n      if (graph && !styledMode) {\n        attribs = {\n          'stroke': prop[2],\n          'stroke-width': options.lineWidth || 0,\n          // Polygon series use filled graph\n          'fill': series.fillGraph && series.color || 'none'\n        };\n        // Apply dash style\n        if (prop[3]) {\n          attribs.dashstyle = prop[3];\n          // The reason for the `else if` is that linecaps don't mix well\n          // with dashstyle. The gaps get partially filled by the\n          // linecap.\n        } else if (options.linecap !== 'square') {\n          attribs['stroke-linecap'] = attribs['stroke-linejoin'] = 'round';\n        }\n        graph[verb](attribs)\n        // Add shadow to normal series (0) or to first\n        // zone (1) #3932\n        .shadow(i < 2 && options.shadow &&\n        // If shadow is defined, call function with\n        // `filterUnits: 'userSpaceOnUse'` to avoid known\n        // SVG filter bug (#19093)\n        merge({\n          filterUnits: 'userSpaceOnUse'\n        }, isObject(options.shadow) ? options.shadow : {}));\n      }\n      // Helpers for animation\n      if (graph) {\n        graph.startX = graphPath.xMap;\n        graph.isArea = graphPath.isArea; // For arearange animation\n      }\n    });\n  }\n  // eslint-disable-next-line valid-jsdoc\n  /**\n   * Get the graph path.\n   *\n   * @private\n   */\n  getGraphPath(points, nullsAsZeroes, connectCliffs) {\n    const series = this,\n      options = series.options,\n      graphPath = [],\n      xMap = [];\n    let gap,\n      step = options.step;\n    points = points || series.points;\n    // Bottom of a stack is reversed\n    const reversed = points.reversed;\n    if (reversed) {\n      points.reverse();\n    }\n    // Reverse the steps (#5004)\n    step = {\n      right: 1,\n      center: 2\n    }[step] || step && 3;\n    if (step && reversed) {\n      step = 4 - step;\n    }\n    // Remove invalid points, especially in spline (#5015)\n    points = this.getValidPoints(points, false, !(options.connectNulls && !nullsAsZeroes && !connectCliffs));\n    // Build the line\n    points.forEach(function (point, i) {\n      const plotX = point.plotX,\n        plotY = point.plotY,\n        lastPoint = points[i - 1],\n        isNull = point.isNull || typeof plotY !== 'number';\n      // the path to this point from the previous\n      let pathToPoint;\n      if ((point.leftCliff || lastPoint && lastPoint.rightCliff) && !connectCliffs) {\n        gap = true; // ... and continue\n      }\n      // Line series, nullsAsZeroes is not handled\n      if (isNull && !defined(nullsAsZeroes) && i > 0) {\n        gap = !options.connectNulls;\n        // Area series, nullsAsZeroes is set\n      } else if (isNull && !nullsAsZeroes) {\n        gap = true;\n      } else {\n        if (i === 0 || gap) {\n          pathToPoint = [['M', point.plotX, point.plotY]];\n          // Generate the spline as defined in the SplineSeries object\n        } else if (series.getPointSpline) {\n          pathToPoint = [series.getPointSpline(points, point, i)];\n        } else if (step) {\n          if (step === 1) {\n            // right\n            pathToPoint = [['L', lastPoint.plotX, plotY]];\n          } else if (step === 2) {\n            // center\n            pathToPoint = [['L', (lastPoint.plotX + plotX) / 2, lastPoint.plotY], ['L', (lastPoint.plotX + plotX) / 2, plotY]];\n          } else {\n            pathToPoint = [['L', plotX, lastPoint.plotY]];\n          }\n          pathToPoint.push(['L', plotX, plotY]);\n        } else {\n          // normal line to next point\n          pathToPoint = [['L', plotX, plotY]];\n        }\n        // Prepare for animation. When step is enabled, there are\n        // two path nodes for each x value.\n        xMap.push(point.x);\n        if (step) {\n          xMap.push(point.x);\n          if (step === 2) {\n            // step = center (#8073)\n            xMap.push(point.x);\n          }\n        }\n        graphPath.push.apply(graphPath, pathToPoint);\n        gap = false;\n      }\n    });\n    graphPath.xMap = xMap;\n    series.graphPath = graphPath;\n    return graphPath;\n  }\n  // eslint-disable-next-line valid-jsdoc\n  /**\n   * Get zones properties for building graphs. Extendable by series with\n   * multiple lines within one series.\n   *\n   * @private\n   */\n  getZonesGraphs(props) {\n    // Add the zone properties if any\n    this.zones.forEach(function (zone, i) {\n      const propset = ['zone-graph-' + i, 'highcharts-graph highcharts-zone-graph-' + i + ' ' + (zone.className || '')];\n      if (!this.chart.styledMode) {\n        propset.push(zone.color || this.color, zone.dashStyle || this.options.dashStyle);\n      }\n      props.push(propset);\n    }, this);\n    return props;\n  }\n}\nLineSeries.defaultOptions = merge(Series.defaultOptions,\n/**\n * General options for all series types.\n *\n * @optionparent plotOptions.series\n */\n{\n  legendSymbol: 'lineMarker'\n});\nSeriesRegistry.registerSeriesType('line', LineSeries);\n/* *\n *\n *  Default Export\n *\n * */\nexport default LineSeries;\n/* *\n *\n *  API Options\n *\n * */\n/**\n * A line series displays information as a series of data points connected by\n * straight line segments.\n *\n * @sample {highcharts} highcharts/demo/line-chart/\n *         Line chart\n * @sample {highstock} stock/demo/basic-line/\n *         Line chart\n *\n * @extends   plotOptions.series\n * @product   highcharts highstock\n * @apioption plotOptions.line\n */\n/**\n * The SVG value used for the `stroke-linecap` and `stroke-linejoin`\n * of a line graph. Round means that lines are rounded in the ends and\n * bends.\n *\n * @type       {Highcharts.SeriesLinecapValue}\n * @default    round\n * @since      3.0.7\n * @apioption  plotOptions.line.linecap\n */\n/**\n * A `line` series. If the [type](#series.line.type) option is not\n * specified, it is inherited from [chart.type](#chart.type).\n *\n * @extends   series,plotOptions.line\n * @excluding dataParser,dataURL\n * @product   highcharts highstock\n * @apioption series.line\n */\n/**\n * An array of data points for the series. For the `line` series type,\n * points can be given in the following ways:\n *\n * 1. An array of numerical values. In this case, the numerical values will be\n *    interpreted as `y` options. The `x` values will be automatically\n *    calculated, either starting at 0 and incremented by 1, or from\n *    `pointStart` and `pointInterval` given in the series options. If the axis\n *    has categories, these will be used. Example:\n *    ```js\n *    data: [0, 5, 3, 5]\n *    ```\n *\n * 2. An array of arrays with 2 values. In this case, the values correspond to\n *    `x,y`. If the first value is a string, it is applied as the name of the\n *    point, and the `x` value is inferred.\n *    ```js\n *    data: [\n *        [0, 1],\n *        [1, 2],\n *        [2, 8]\n *    ]\n *    ```\n *\n * 3. An array of objects with named values. The following snippet shows only a\n *    few settings, see the complete options set below. If the total number of\n *    data points exceeds the series'\n *    [turboThreshold](#series.line.turboThreshold),\n *    this option is not available.\n *    ```js\n *    data: [{\n *        x: 1,\n *        y: 9,\n *        name: \"Point2\",\n *        color: \"#00FF00\"\n *    }, {\n *        x: 1,\n *        y: 6,\n *        name: \"Point1\",\n *        color: \"#FF00FF\"\n *    }]\n *    ```\n *\n * **Note:** In TypeScript you have to extend `PointOptionsObject` with an\n * additional declaration to allow custom data types:\n * ```ts\n * declare module `highcharts` {\n *   interface PointOptionsObject {\n *     custom: Record<string, (boolean|number|string)>;\n *   }\n * }\n * ```\n *\n * @sample {highcharts} highcharts/chart/reflow-true/\n *         Numerical values\n * @sample {highcharts} highcharts/series/data-array-of-arrays/\n *         Arrays of numeric x and y\n * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n *         Arrays of datetime x and y\n * @sample {highcharts} highcharts/series/data-array-of-name-value/\n *         Arrays of point.name and y\n * @sample {highcharts} highcharts/series/data-array-of-objects/\n *         Config objects\n *\n * @declare   Highcharts.PointOptionsObject\n * @type      {Array<number|Array<(number|string),(number|null)>|null|*>}\n * @apioption series.line.data\n */\n/**\n * An additional, individual class name for the data point's graphic\n * representation. Changes to a point's color will also be reflected in a\n * chart's legend and tooltip.\n *\n * @sample {highcharts} highcharts/css/point-series-classname\n *         Series and point class name\n *\n * @type      {string}\n * @since     5.0.0\n * @product   highcharts gantt\n * @apioption series.line.data.className\n */\n/**\n * Individual color for the point. By default the color is pulled from\n * the global `colors` array.\n *\n * In styled mode, the `color` option doesn't take effect. Instead, use\n * `colorIndex`.\n *\n * @sample {highcharts} highcharts/point/color/\n *         Mark the highest point\n *\n * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n * @product   highcharts highstock gantt\n * @apioption series.line.data.color\n */\n/**\n * A specific color index to use for the point, so its graphic representations\n * are given the class name `highcharts-color-{n}`. In styled mode this will\n * change the color of the graphic. In non-styled mode, the color is set by the\n * `fill` attribute, so the change in class name won't have a visual effect by\n * default.\n *\n * Since v11, CSS variables on the form `--highcharts-color-{n}` make changing\n * the color scheme very convenient.\n *\n * @sample    {highcharts} highcharts/css/colorindex/\n *            Series and point color index\n *\n * @type      {number}\n * @since     5.0.0\n * @product   highcharts gantt\n * @apioption series.line.data.colorIndex\n */\n/**\n * A reserved subspace to store options and values for customized functionality.\n * Here you can add additional data for your own event callbacks and formatter\n * callbacks.\n *\n * @sample {highcharts} highcharts/point/custom/\n *         Point and series with custom data\n *\n * @type      {Highcharts.Dictionary<*>}\n * @apioption series.line.data.custom\n */\n/**\n * Individual data label for each point. The options are the same as\n * the ones for [plotOptions.series.dataLabels](\n * #plotOptions.series.dataLabels).\n *\n * @sample highcharts/point/datalabels/\n *         Show a label for the last value\n *\n * @type      {*|Array<*>}\n * @declare   Highcharts.DataLabelsOptions\n * @extends   plotOptions.line.dataLabels\n * @product   highcharts highstock gantt\n * @apioption series.line.data.dataLabels\n */\n/**\n * A description of the point to add to the screen reader information\n * about the point.\n *\n * @type      {string}\n * @since     5.0.0\n * @requires  modules/accessibility\n * @apioption series.line.data.description\n */\n/**\n * An id for the point. This can be used after render time to get a\n * pointer to the point object through `chart.get()`.\n *\n * @sample {highcharts} highcharts/point/id/\n *         Remove an id'd point\n *\n * @type      {string}\n * @since     1.2.0\n * @product   highcharts highstock gantt\n * @apioption series.line.data.id\n */\n/**\n * The rank for this point's data label in case of collision. If two\n * data labels are about to overlap, only the one with the highest `labelrank`\n * will be drawn.\n *\n * @type      {number}\n * @apioption series.line.data.labelrank\n */\n/**\n * The name of the point as shown in the legend, tooltip, dataLabels, etc.\n *\n * @see [xAxis.uniqueNames](#xAxis.uniqueNames)\n *\n * @sample {highcharts} highcharts/series/data-array-of-objects/\n *         Point names\n *\n * @type      {string}\n * @apioption series.line.data.name\n */\n/**\n * Whether the data point is selected initially.\n *\n * @type      {boolean}\n * @default   false\n * @product   highcharts highstock gantt\n * @apioption series.line.data.selected\n */\n/**\n * The x value of the point. For datetime axes, the X value is the timestamp\n * in milliseconds since 1970.\n *\n * @type      {number}\n * @product   highcharts highstock\n * @apioption series.line.data.x\n */\n/**\n * The y value of the point.\n *\n * @type      {number|null}\n * @product   highcharts highstock\n * @apioption series.line.data.y\n */\n/**\n * The individual point events.\n *\n * @extends   plotOptions.series.point.events\n * @product   highcharts highstock gantt\n * @apioption series.line.data.events\n */\n/**\n * Options for the point markers of line-like series.\n *\n * @declare   Highcharts.PointMarkerOptionsObject\n * @extends   plotOptions.series.marker\n * @product   highcharts highstock\n * @apioption series.line.data.marker\n */\n''; // include precedent doclets in transpilat","map":{"version":3,"names":["Series","SeriesRegistry","U","defined","merge","isObject","LineSeries","constructor","arguments","data","options","points","drawGraph","series","graphPath","gappedPath","getGraphPath","call","styledMode","chart","props","push","lineColor","color","dashStyle","getZonesGraphs","forEach","prop","i","graphKey","attribs","graph","verb","endX","preventGraphAnimation","xMap","animate","d","length","renderer","path","addClass","attr","zIndex","add","group","lineWidth","fillGraph","dashstyle","linecap","shadow","filterUnits","startX","isArea","nullsAsZeroes","connectCliffs","gap","step","reversed","reverse","right","center","getValidPoints","connectNulls","point","plotX","plotY","lastPoint","isNull","pathToPoint","leftCliff","rightCliff","getPointSpline","x","apply","zones","zone","propset","className","defaultOptions","legendSymbol","registerSeriesType"],"sources":["D:/Vamtage/angular-widget-project/node_modules/highcharts/es-modules/Series/Line/LineSeries.js"],"sourcesContent":["/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport Series from '../../Core/Series/Series.js';\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nimport U from '../../Core/Utilities.js';\nconst { defined, merge, isObject } = U;\n/* *\n *\n *  Class\n *\n * */\n/**\n * The line series is the base type and is therefor the series base prototype.\n *\n * @private\n */\nclass LineSeries extends Series {\n    constructor() {\n        /* *\n         *\n         *  Static Functions\n         *\n         * */\n        super(...arguments);\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        this.data = void 0;\n        this.options = void 0;\n        this.points = void 0;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Draw the graph. Called internally when rendering line-like series\n     * types. The first time it generates the `series.graph` item and\n     * optionally other series-wide items like `series.area` for area\n     * charts. On subsequent calls these items are updated with new\n     * positions and attributes.\n     *\n     * @function Highcharts.Series#drawGraph\n     */\n    drawGraph() {\n        const series = this, options = this.options, graphPath = (this.gappedPath || this.getGraphPath).call(this), styledMode = this.chart.styledMode;\n        let props = [[\n                'graph',\n                'highcharts-graph'\n            ]];\n        // Presentational properties\n        if (!styledMode) {\n            props[0].push((options.lineColor ||\n                this.color ||\n                \"#cccccc\" /* Palette.neutralColor20 */ // when colorByPoint = true\n            ), options.dashStyle);\n        }\n        props = series.getZonesGraphs(props);\n        // Draw the graph\n        props.forEach(function (prop, i) {\n            const graphKey = prop[0];\n            let attribs, graph = series[graphKey];\n            const verb = graph ? 'animate' : 'attr';\n            if (graph) {\n                graph.endX = series.preventGraphAnimation ?\n                    null :\n                    graphPath.xMap;\n                graph.animate({ d: graphPath });\n            }\n            else if (graphPath.length) { // #1487\n                /**\n                 * SVG element of area-based charts. Can be used for styling\n                 * purposes. If zones are configured, this element will be\n                 * hidden and replaced by multiple zone areas, accessible\n                 * via `series['zone-area-x']` (where x is a number,\n                 * starting with 0).\n                 *\n                 * @name Highcharts.Series#area\n                 * @type {Highcharts.SVGElement|undefined}\n                 */\n                /**\n                 * SVG element of line-based charts. Can be used for styling\n                 * purposes. If zones are configured, this element will be\n                 * hidden and replaced by multiple zone lines, accessible\n                 * via `series['zone-graph-x']` (where x is a number,\n                 * starting with 0).\n                 *\n                 * @name Highcharts.Series#graph\n                 * @type {Highcharts.SVGElement|undefined}\n                 */\n                series[graphKey] = graph = series.chart.renderer\n                    .path(graphPath)\n                    .addClass(prop[1])\n                    .attr({ zIndex: 1 }) // #1069\n                    .add(series.group);\n            }\n            if (graph && !styledMode) {\n                attribs = {\n                    'stroke': prop[2],\n                    'stroke-width': options.lineWidth || 0,\n                    // Polygon series use filled graph\n                    'fill': (series.fillGraph && series.color) || 'none'\n                };\n                // Apply dash style\n                if (prop[3]) {\n                    attribs.dashstyle = prop[3];\n                    // The reason for the `else if` is that linecaps don't mix well\n                    // with dashstyle. The gaps get partially filled by the\n                    // linecap.\n                }\n                else if (options.linecap !== 'square') {\n                    attribs['stroke-linecap'] =\n                        attribs['stroke-linejoin'] = 'round';\n                }\n                graph[verb](attribs)\n                    // Add shadow to normal series (0) or to first\n                    // zone (1) #3932\n                    .shadow((i < 2) &&\n                    options.shadow &&\n                    // If shadow is defined, call function with\n                    // `filterUnits: 'userSpaceOnUse'` to avoid known\n                    // SVG filter bug (#19093)\n                    merge({ filterUnits: 'userSpaceOnUse' }, isObject(options.shadow) ? options.shadow : {}));\n            }\n            // Helpers for animation\n            if (graph) {\n                graph.startX = graphPath.xMap;\n                graph.isArea = graphPath.isArea; // For arearange animation\n            }\n        });\n    }\n    // eslint-disable-next-line valid-jsdoc\n    /**\n     * Get the graph path.\n     *\n     * @private\n     */\n    getGraphPath(points, nullsAsZeroes, connectCliffs) {\n        const series = this, options = series.options, graphPath = [], xMap = [];\n        let gap, step = options.step;\n        points = points || series.points;\n        // Bottom of a stack is reversed\n        const reversed = points.reversed;\n        if (reversed) {\n            points.reverse();\n        }\n        // Reverse the steps (#5004)\n        step = {\n            right: 1,\n            center: 2\n        }[step] || (step && 3);\n        if (step && reversed) {\n            step = 4 - step;\n        }\n        // Remove invalid points, especially in spline (#5015)\n        points = this.getValidPoints(points, false, !(options.connectNulls && !nullsAsZeroes && !connectCliffs));\n        // Build the line\n        points.forEach(function (point, i) {\n            const plotX = point.plotX, plotY = point.plotY, lastPoint = points[i - 1], isNull = point.isNull || typeof plotY !== 'number';\n            // the path to this point from the previous\n            let pathToPoint;\n            if ((point.leftCliff || (lastPoint && lastPoint.rightCliff)) &&\n                !connectCliffs) {\n                gap = true; // ... and continue\n            }\n            // Line series, nullsAsZeroes is not handled\n            if (isNull && !defined(nullsAsZeroes) && i > 0) {\n                gap = !options.connectNulls;\n                // Area series, nullsAsZeroes is set\n            }\n            else if (isNull && !nullsAsZeroes) {\n                gap = true;\n            }\n            else {\n                if (i === 0 || gap) {\n                    pathToPoint = [[\n                            'M',\n                            point.plotX,\n                            point.plotY\n                        ]];\n                    // Generate the spline as defined in the SplineSeries object\n                }\n                else if (series.getPointSpline) {\n                    pathToPoint = [series.getPointSpline(points, point, i)];\n                }\n                else if (step) {\n                    if (step === 1) { // right\n                        pathToPoint = [[\n                                'L',\n                                lastPoint.plotX,\n                                plotY\n                            ]];\n                    }\n                    else if (step === 2) { // center\n                        pathToPoint = [[\n                                'L',\n                                (lastPoint.plotX + plotX) / 2,\n                                lastPoint.plotY\n                            ], [\n                                'L',\n                                (lastPoint.plotX + plotX) / 2,\n                                plotY\n                            ]];\n                    }\n                    else {\n                        pathToPoint = [[\n                                'L',\n                                plotX,\n                                lastPoint.plotY\n                            ]];\n                    }\n                    pathToPoint.push([\n                        'L',\n                        plotX,\n                        plotY\n                    ]);\n                }\n                else {\n                    // normal line to next point\n                    pathToPoint = [[\n                            'L',\n                            plotX,\n                            plotY\n                        ]];\n                }\n                // Prepare for animation. When step is enabled, there are\n                // two path nodes for each x value.\n                xMap.push(point.x);\n                if (step) {\n                    xMap.push(point.x);\n                    if (step === 2) { // step = center (#8073)\n                        xMap.push(point.x);\n                    }\n                }\n                graphPath.push.apply(graphPath, pathToPoint);\n                gap = false;\n            }\n        });\n        graphPath.xMap = xMap;\n        series.graphPath = graphPath;\n        return graphPath;\n    }\n    // eslint-disable-next-line valid-jsdoc\n    /**\n     * Get zones properties for building graphs. Extendable by series with\n     * multiple lines within one series.\n     *\n     * @private\n     */\n    getZonesGraphs(props) {\n        // Add the zone properties if any\n        this.zones.forEach(function (zone, i) {\n            const propset = [\n                'zone-graph-' + i,\n                'highcharts-graph highcharts-zone-graph-' + i + ' ' +\n                    (zone.className || '')\n            ];\n            if (!this.chart.styledMode) {\n                propset.push((zone.color || this.color), (zone.dashStyle || this.options.dashStyle));\n            }\n            props.push(propset);\n        }, this);\n        return props;\n    }\n}\nLineSeries.defaultOptions = merge(Series.defaultOptions, \n/**\n * General options for all series types.\n *\n * @optionparent plotOptions.series\n */\n{\n    legendSymbol: 'lineMarker'\n});\nSeriesRegistry.registerSeriesType('line', LineSeries);\n/* *\n *\n *  Default Export\n *\n * */\nexport default LineSeries;\n/* *\n *\n *  API Options\n *\n * */\n/**\n * A line series displays information as a series of data points connected by\n * straight line segments.\n *\n * @sample {highcharts} highcharts/demo/line-chart/\n *         Line chart\n * @sample {highstock} stock/demo/basic-line/\n *         Line chart\n *\n * @extends   plotOptions.series\n * @product   highcharts highstock\n * @apioption plotOptions.line\n */\n/**\n * The SVG value used for the `stroke-linecap` and `stroke-linejoin`\n * of a line graph. Round means that lines are rounded in the ends and\n * bends.\n *\n * @type       {Highcharts.SeriesLinecapValue}\n * @default    round\n * @since      3.0.7\n * @apioption  plotOptions.line.linecap\n */\n/**\n * A `line` series. If the [type](#series.line.type) option is not\n * specified, it is inherited from [chart.type](#chart.type).\n *\n * @extends   series,plotOptions.line\n * @excluding dataParser,dataURL\n * @product   highcharts highstock\n * @apioption series.line\n */\n/**\n * An array of data points for the series. For the `line` series type,\n * points can be given in the following ways:\n *\n * 1. An array of numerical values. In this case, the numerical values will be\n *    interpreted as `y` options. The `x` values will be automatically\n *    calculated, either starting at 0 and incremented by 1, or from\n *    `pointStart` and `pointInterval` given in the series options. If the axis\n *    has categories, these will be used. Example:\n *    ```js\n *    data: [0, 5, 3, 5]\n *    ```\n *\n * 2. An array of arrays with 2 values. In this case, the values correspond to\n *    `x,y`. If the first value is a string, it is applied as the name of the\n *    point, and the `x` value is inferred.\n *    ```js\n *    data: [\n *        [0, 1],\n *        [1, 2],\n *        [2, 8]\n *    ]\n *    ```\n *\n * 3. An array of objects with named values. The following snippet shows only a\n *    few settings, see the complete options set below. If the total number of\n *    data points exceeds the series'\n *    [turboThreshold](#series.line.turboThreshold),\n *    this option is not available.\n *    ```js\n *    data: [{\n *        x: 1,\n *        y: 9,\n *        name: \"Point2\",\n *        color: \"#00FF00\"\n *    }, {\n *        x: 1,\n *        y: 6,\n *        name: \"Point1\",\n *        color: \"#FF00FF\"\n *    }]\n *    ```\n *\n * **Note:** In TypeScript you have to extend `PointOptionsObject` with an\n * additional declaration to allow custom data types:\n * ```ts\n * declare module `highcharts` {\n *   interface PointOptionsObject {\n *     custom: Record<string, (boolean|number|string)>;\n *   }\n * }\n * ```\n *\n * @sample {highcharts} highcharts/chart/reflow-true/\n *         Numerical values\n * @sample {highcharts} highcharts/series/data-array-of-arrays/\n *         Arrays of numeric x and y\n * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n *         Arrays of datetime x and y\n * @sample {highcharts} highcharts/series/data-array-of-name-value/\n *         Arrays of point.name and y\n * @sample {highcharts} highcharts/series/data-array-of-objects/\n *         Config objects\n *\n * @declare   Highcharts.PointOptionsObject\n * @type      {Array<number|Array<(number|string),(number|null)>|null|*>}\n * @apioption series.line.data\n */\n/**\n * An additional, individual class name for the data point's graphic\n * representation. Changes to a point's color will also be reflected in a\n * chart's legend and tooltip.\n *\n * @sample {highcharts} highcharts/css/point-series-classname\n *         Series and point class name\n *\n * @type      {string}\n * @since     5.0.0\n * @product   highcharts gantt\n * @apioption series.line.data.className\n */\n/**\n * Individual color for the point. By default the color is pulled from\n * the global `colors` array.\n *\n * In styled mode, the `color` option doesn't take effect. Instead, use\n * `colorIndex`.\n *\n * @sample {highcharts} highcharts/point/color/\n *         Mark the highest point\n *\n * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n * @product   highcharts highstock gantt\n * @apioption series.line.data.color\n */\n/**\n * A specific color index to use for the point, so its graphic representations\n * are given the class name `highcharts-color-{n}`. In styled mode this will\n * change the color of the graphic. In non-styled mode, the color is set by the\n * `fill` attribute, so the change in class name won't have a visual effect by\n * default.\n *\n * Since v11, CSS variables on the form `--highcharts-color-{n}` make changing\n * the color scheme very convenient.\n *\n * @sample    {highcharts} highcharts/css/colorindex/\n *            Series and point color index\n *\n * @type      {number}\n * @since     5.0.0\n * @product   highcharts gantt\n * @apioption series.line.data.colorIndex\n */\n/**\n * A reserved subspace to store options and values for customized functionality.\n * Here you can add additional data for your own event callbacks and formatter\n * callbacks.\n *\n * @sample {highcharts} highcharts/point/custom/\n *         Point and series with custom data\n *\n * @type      {Highcharts.Dictionary<*>}\n * @apioption series.line.data.custom\n */\n/**\n * Individual data label for each point. The options are the same as\n * the ones for [plotOptions.series.dataLabels](\n * #plotOptions.series.dataLabels).\n *\n * @sample highcharts/point/datalabels/\n *         Show a label for the last value\n *\n * @type      {*|Array<*>}\n * @declare   Highcharts.DataLabelsOptions\n * @extends   plotOptions.line.dataLabels\n * @product   highcharts highstock gantt\n * @apioption series.line.data.dataLabels\n */\n/**\n * A description of the point to add to the screen reader information\n * about the point.\n *\n * @type      {string}\n * @since     5.0.0\n * @requires  modules/accessibility\n * @apioption series.line.data.description\n */\n/**\n * An id for the point. This can be used after render time to get a\n * pointer to the point object through `chart.get()`.\n *\n * @sample {highcharts} highcharts/point/id/\n *         Remove an id'd point\n *\n * @type      {string}\n * @since     1.2.0\n * @product   highcharts highstock gantt\n * @apioption series.line.data.id\n */\n/**\n * The rank for this point's data label in case of collision. If two\n * data labels are about to overlap, only the one with the highest `labelrank`\n * will be drawn.\n *\n * @type      {number}\n * @apioption series.line.data.labelrank\n */\n/**\n * The name of the point as shown in the legend, tooltip, dataLabels, etc.\n *\n * @see [xAxis.uniqueNames](#xAxis.uniqueNames)\n *\n * @sample {highcharts} highcharts/series/data-array-of-objects/\n *         Point names\n *\n * @type      {string}\n * @apioption series.line.data.name\n */\n/**\n * Whether the data point is selected initially.\n *\n * @type      {boolean}\n * @default   false\n * @product   highcharts highstock gantt\n * @apioption series.line.data.selected\n */\n/**\n * The x value of the point. For datetime axes, the X value is the timestamp\n * in milliseconds since 1970.\n *\n * @type      {number}\n * @product   highcharts highstock\n * @apioption series.line.data.x\n */\n/**\n * The y value of the point.\n *\n * @type      {number|null}\n * @product   highcharts highstock\n * @apioption series.line.data.y\n */\n/**\n * The individual point events.\n *\n * @extends   plotOptions.series.point.events\n * @product   highcharts highstock gantt\n * @apioption series.line.data.events\n */\n/**\n * Options for the point markers of line-like series.\n *\n * @declare   Highcharts.PointMarkerOptionsObject\n * @extends   plotOptions.series.marker\n * @product   highcharts highstock\n * @apioption series.line.data.marker\n */\n''; // include precedent doclets in transpilat\n"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}