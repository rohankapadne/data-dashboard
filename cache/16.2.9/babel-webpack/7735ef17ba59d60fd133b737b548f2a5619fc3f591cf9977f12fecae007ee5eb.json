{"ast":null,"code":"/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n\nimport U from './Utilities.js';\nconst {\n  diffObjects,\n  extend,\n  find,\n  isArray,\n  isObject,\n  merge,\n  objectEach,\n  pick,\n  splat,\n  uniqueKey\n} = U;\n/* *\n *\n *  Composition\n *\n * */\nvar Responsive;\n(function (Responsive) {\n  /* *\n   *\n   *  Declarations\n   *\n   * */\n  /* *\n   *\n   *  Constants\n   *\n   * */\n  const composedMembers = [];\n  /* *\n   *\n   *  Functions\n   *\n   * */\n  /**\n   * @private\n   */\n  function compose(ChartClass) {\n    if (U.pushUnique(composedMembers, ChartClass)) {\n      extend(ChartClass.prototype, {\n        matchResponsiveRule,\n        setResponsive\n      });\n    }\n    return ChartClass;\n  }\n  Responsive.compose = compose;\n  /**\n   * Handle a single responsiveness rule.\n   *\n   * @private\n   * @function Highcharts.Chart#matchResponsiveRule\n   * @param {Highcharts.ResponsiveRulesOptions} rule\n   * @param {Array<string>} matches\n   */\n  function matchResponsiveRule(rule, matches) {\n    const condition = rule.condition,\n      fn = condition.callback || function () {\n        return this.chartWidth <= pick(condition.maxWidth, Number.MAX_VALUE) && this.chartHeight <= pick(condition.maxHeight, Number.MAX_VALUE) && this.chartWidth >= pick(condition.minWidth, 0) && this.chartHeight >= pick(condition.minHeight, 0);\n      };\n    if (fn.call(this)) {\n      matches.push(rule._id);\n    }\n  }\n  /**\n   * Update the chart based on the current chart/document size and options\n   * for responsiveness.\n   *\n   * @private\n   * @function Highcharts.Chart#setResponsive\n   * @param  {boolean} [redraw=true]\n   * @param  {boolean} [reset=false]\n   * Reset by un-applying all rules. Chart.update resets all rules before\n   * applying updated options.\n   */\n  function setResponsive(redraw, reset) {\n    const options = this.options.responsive,\n      currentResponsive = this.currentResponsive;\n    let ruleIds = [],\n      undoOptions;\n    if (!reset && options && options.rules) {\n      options.rules.forEach(rule => {\n        if (typeof rule._id === 'undefined') {\n          rule._id = uniqueKey();\n        }\n        this.matchResponsiveRule(rule, ruleIds /* , redraw */);\n      }, this);\n    }\n    // Merge matching rules\n    const mergedOptions = merge(...ruleIds.map(ruleId => find((options || {}).rules || [], rule => rule._id === ruleId)).map(rule => rule && rule.chartOptions));\n    mergedOptions.isResponsiveOptions = true;\n    // Stringified key for the rules that currently apply.\n    ruleIds = ruleIds.toString() || void 0;\n    const currentRuleIds = currentResponsive && currentResponsive.ruleIds;\n    // Changes in what rules apply\n    if (ruleIds !== currentRuleIds) {\n      // Undo previous rules. Before we apply a new set of rules, we\n      // need to roll back completely to base options (#6291).\n      if (currentResponsive) {\n        this.update(currentResponsive.undoOptions, redraw, true);\n      }\n      if (ruleIds) {\n        // Get undo-options for matching rules. The `undoOptions``\n        // hold the current values before they are changed by the\n        // `mergedOptions`.\n        undoOptions = diffObjects(mergedOptions, this.options, true, this.collectionsWithUpdate);\n        undoOptions.isResponsiveOptions = true;\n        this.currentResponsive = {\n          ruleIds: ruleIds,\n          mergedOptions: mergedOptions,\n          undoOptions: undoOptions\n        };\n        this.update(mergedOptions, redraw, true);\n      } else {\n        this.currentResponsive = void 0;\n      }\n    }\n  }\n})(Responsive || (Responsive = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default Responsive;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * A callback function to gain complete control on when the responsive rule\n * applies.\n *\n * @callback Highcharts.ResponsiveCallbackFunction\n *\n * @param {Highcharts.Chart} this\n * Chart context.\n *\n * @return {boolean}\n * Return `true` if it applies.\n */\n''; // keeps doclets above in JS file\n/* *\n *\n *  API Options\n *\n * */\n/**\n * Allows setting a set of rules to apply for different screen or chart\n * sizes. Each rule specifies additional chart options.\n *\n * @sample {highstock} stock/demo/responsive/\n *         Stock chart\n * @sample highcharts/responsive/axis/\n *         Axis\n * @sample highcharts/responsive/legend/\n *         Legend\n * @sample highcharts/responsive/classname/\n *         Class name\n *\n * @since     5.0.0\n * @apioption responsive\n */\n/**\n * A set of rules for responsive settings. The rules are executed from\n * the top down.\n *\n * @sample {highcharts} highcharts/responsive/axis/\n *         Axis changes\n * @sample {highstock} highcharts/responsive/axis/\n *         Axis changes\n * @sample {highmaps} highcharts/responsive/axis/\n *         Axis changes\n *\n * @type      {Array<*>}\n * @since     5.0.0\n * @apioption responsive.rules\n */\n/**\n * A full set of chart options to apply as overrides to the general\n * chart options. The chart options are applied when the given rule\n * is active.\n *\n * A special case is configuration objects that take arrays, for example\n * [xAxis](#xAxis), [yAxis](#yAxis) or [series](#series). For these\n * collections, an `id` option is used to map the new option set to\n * an existing object. If an existing object of the same id is not found,\n * the item of the same indexupdated. So for example, setting `chartOptions`\n * with two series items without an `id`, will cause the existing chart's\n * two series to be updated with respective options.\n *\n * @sample {highstock} stock/demo/responsive/\n *         Stock chart\n * @sample highcharts/responsive/axis/\n *         Axis\n * @sample highcharts/responsive/legend/\n *         Legend\n * @sample highcharts/responsive/classname/\n *         Class name\n *\n * @type      {Highcharts.Options}\n * @since     5.0.0\n * @apioption responsive.rules.chartOptions\n */\n/**\n * Under which conditions the rule applies.\n *\n * @since     5.0.0\n * @apioption responsive.rules.condition\n */\n/**\n * A callback function to gain complete control on when the responsive\n * rule applies. Return `true` if it applies. This opens for checking\n * against other metrics than the chart size, for example the document\n * size or other elements.\n *\n * @type      {Highcharts.ResponsiveCallbackFunction}\n * @since     5.0.0\n * @context   Highcharts.Chart\n * @apioption responsive.rules.condition.callback\n */\n/**\n * The responsive rule applies if the chart height is less than this.\n *\n * @type      {number}\n * @since     5.0.0\n * @apioption responsive.rules.condition.maxHeight\n */\n/**\n * The responsive rule applies if the chart width is less than this.\n *\n * @sample highcharts/responsive/axis/\n *         Max width is 500\n *\n * @type      {number}\n * @since     5.0.0\n * @apioption responsive.rules.condition.maxWidth\n */\n/**\n * The responsive rule applies if the chart height is greater than this.\n *\n * @type      {number}\n * @default   0\n * @since     5.0.0\n * @apioption responsive.rules.condition.minHeight\n */\n/**\n * The responsive rule applies if the chart width is greater than this.\n *\n * @type      {number}\n * @default   0\n * @since     5.0.0\n * @apioption responsive.rules.condition.minWidth\n */\n''; // keeps doclets above in JS file","map":{"version":3,"names":["U","diffObjects","extend","find","isArray","isObject","merge","objectEach","pick","splat","uniqueKey","Responsive","composedMembers","compose","ChartClass","pushUnique","prototype","matchResponsiveRule","setResponsive","rule","matches","condition","fn","callback","chartWidth","maxWidth","Number","MAX_VALUE","chartHeight","maxHeight","minWidth","minHeight","call","push","_id","redraw","reset","options","responsive","currentResponsive","ruleIds","undoOptions","rules","forEach","mergedOptions","map","ruleId","chartOptions","isResponsiveOptions","toString","currentRuleIds","update","collectionsWithUpdate"],"sources":["D:/Vamtage/angular-widget-project/node_modules/highcharts/es-modules/Core/Responsive.js"],"sourcesContent":["/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport U from './Utilities.js';\nconst { diffObjects, extend, find, isArray, isObject, merge, objectEach, pick, splat, uniqueKey } = U;\n/* *\n *\n *  Composition\n *\n * */\nvar Responsive;\n(function (Responsive) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    const composedMembers = [];\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * @private\n     */\n    function compose(ChartClass) {\n        if (U.pushUnique(composedMembers, ChartClass)) {\n            extend(ChartClass.prototype, {\n                matchResponsiveRule,\n                setResponsive\n            });\n        }\n        return ChartClass;\n    }\n    Responsive.compose = compose;\n    /**\n     * Handle a single responsiveness rule.\n     *\n     * @private\n     * @function Highcharts.Chart#matchResponsiveRule\n     * @param {Highcharts.ResponsiveRulesOptions} rule\n     * @param {Array<string>} matches\n     */\n    function matchResponsiveRule(rule, matches) {\n        const condition = rule.condition, fn = condition.callback || function () {\n            return (this.chartWidth <= pick(condition.maxWidth, Number.MAX_VALUE) &&\n                this.chartHeight <= pick(condition.maxHeight, Number.MAX_VALUE) &&\n                this.chartWidth >= pick(condition.minWidth, 0) &&\n                this.chartHeight >= pick(condition.minHeight, 0));\n        };\n        if (fn.call(this)) {\n            matches.push(rule._id);\n        }\n    }\n    /**\n     * Update the chart based on the current chart/document size and options\n     * for responsiveness.\n     *\n     * @private\n     * @function Highcharts.Chart#setResponsive\n     * @param  {boolean} [redraw=true]\n     * @param  {boolean} [reset=false]\n     * Reset by un-applying all rules. Chart.update resets all rules before\n     * applying updated options.\n     */\n    function setResponsive(redraw, reset) {\n        const options = this.options.responsive, currentResponsive = this.currentResponsive;\n        let ruleIds = [], undoOptions;\n        if (!reset && options && options.rules) {\n            options.rules.forEach((rule) => {\n                if (typeof rule._id === 'undefined') {\n                    rule._id = uniqueKey();\n                }\n                this.matchResponsiveRule(rule, ruleIds /* , redraw */);\n            }, this);\n        }\n        // Merge matching rules\n        const mergedOptions = merge(...ruleIds\n            .map((ruleId) => find((options || {}).rules || [], (rule) => (rule._id === ruleId)))\n            .map((rule) => (rule && rule.chartOptions)));\n        mergedOptions.isResponsiveOptions = true;\n        // Stringified key for the rules that currently apply.\n        ruleIds = (ruleIds.toString() || void 0);\n        const currentRuleIds = (currentResponsive && currentResponsive.ruleIds);\n        // Changes in what rules apply\n        if (ruleIds !== currentRuleIds) {\n            // Undo previous rules. Before we apply a new set of rules, we\n            // need to roll back completely to base options (#6291).\n            if (currentResponsive) {\n                this.update(currentResponsive.undoOptions, redraw, true);\n            }\n            if (ruleIds) {\n                // Get undo-options for matching rules. The `undoOptions``\n                // hold the current values before they are changed by the\n                // `mergedOptions`.\n                undoOptions = diffObjects(mergedOptions, this.options, true, this.collectionsWithUpdate);\n                undoOptions.isResponsiveOptions = true;\n                this.currentResponsive = {\n                    ruleIds: ruleIds,\n                    mergedOptions: mergedOptions,\n                    undoOptions: undoOptions\n                };\n                this.update(mergedOptions, redraw, true);\n            }\n            else {\n                this.currentResponsive = void 0;\n            }\n        }\n    }\n})(Responsive || (Responsive = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default Responsive;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * A callback function to gain complete control on when the responsive rule\n * applies.\n *\n * @callback Highcharts.ResponsiveCallbackFunction\n *\n * @param {Highcharts.Chart} this\n * Chart context.\n *\n * @return {boolean}\n * Return `true` if it applies.\n */\n(''); // keeps doclets above in JS file\n/* *\n *\n *  API Options\n *\n * */\n/**\n * Allows setting a set of rules to apply for different screen or chart\n * sizes. Each rule specifies additional chart options.\n *\n * @sample {highstock} stock/demo/responsive/\n *         Stock chart\n * @sample highcharts/responsive/axis/\n *         Axis\n * @sample highcharts/responsive/legend/\n *         Legend\n * @sample highcharts/responsive/classname/\n *         Class name\n *\n * @since     5.0.0\n * @apioption responsive\n */\n/**\n * A set of rules for responsive settings. The rules are executed from\n * the top down.\n *\n * @sample {highcharts} highcharts/responsive/axis/\n *         Axis changes\n * @sample {highstock} highcharts/responsive/axis/\n *         Axis changes\n * @sample {highmaps} highcharts/responsive/axis/\n *         Axis changes\n *\n * @type      {Array<*>}\n * @since     5.0.0\n * @apioption responsive.rules\n */\n/**\n * A full set of chart options to apply as overrides to the general\n * chart options. The chart options are applied when the given rule\n * is active.\n *\n * A special case is configuration objects that take arrays, for example\n * [xAxis](#xAxis), [yAxis](#yAxis) or [series](#series). For these\n * collections, an `id` option is used to map the new option set to\n * an existing object. If an existing object of the same id is not found,\n * the item of the same indexupdated. So for example, setting `chartOptions`\n * with two series items without an `id`, will cause the existing chart's\n * two series to be updated with respective options.\n *\n * @sample {highstock} stock/demo/responsive/\n *         Stock chart\n * @sample highcharts/responsive/axis/\n *         Axis\n * @sample highcharts/responsive/legend/\n *         Legend\n * @sample highcharts/responsive/classname/\n *         Class name\n *\n * @type      {Highcharts.Options}\n * @since     5.0.0\n * @apioption responsive.rules.chartOptions\n */\n/**\n * Under which conditions the rule applies.\n *\n * @since     5.0.0\n * @apioption responsive.rules.condition\n */\n/**\n * A callback function to gain complete control on when the responsive\n * rule applies. Return `true` if it applies. This opens for checking\n * against other metrics than the chart size, for example the document\n * size or other elements.\n *\n * @type      {Highcharts.ResponsiveCallbackFunction}\n * @since     5.0.0\n * @context   Highcharts.Chart\n * @apioption responsive.rules.condition.callback\n */\n/**\n * The responsive rule applies if the chart height is less than this.\n *\n * @type      {number}\n * @since     5.0.0\n * @apioption responsive.rules.condition.maxHeight\n */\n/**\n * The responsive rule applies if the chart width is less than this.\n *\n * @sample highcharts/responsive/axis/\n *         Max width is 500\n *\n * @type      {number}\n * @since     5.0.0\n * @apioption responsive.rules.condition.maxWidth\n */\n/**\n * The responsive rule applies if the chart height is greater than this.\n *\n * @type      {number}\n * @default   0\n * @since     5.0.0\n * @apioption responsive.rules.condition.minHeight\n */\n/**\n * The responsive rule applies if the chart width is greater than this.\n *\n * @type      {number}\n * @default   0\n * @since     5.0.0\n * @apioption responsive.rules.condition.minWidth\n */\n(''); // keeps doclets above in JS file\n"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}