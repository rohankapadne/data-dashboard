{"ast":null,"code":"/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n\nimport H from '../Globals.js';\nimport U from '../Utilities.js';\nconst {\n  isNumber,\n  merge,\n  pInt\n} = U;\n/* *\n *\n *  Class\n *\n * */\n/* eslint-disable valid-jsdoc */\n/**\n * Handle color operations. Some object methods are chainable.\n *\n * @class\n * @name Highcharts.Color\n *\n * @param {Highcharts.ColorType} input\n * The input color in either rbga or hex format\n */\nclass Color {\n  /* *\n   *\n   *  Static Functions\n   *\n   * */\n  /**\n   * Creates a color instance out of a color string or object.\n   *\n   * @function Highcharts.Color.parse\n   *\n   * @param {Highcharts.ColorType} [input]\n   * The input color in either rbga or hex format.\n   *\n   * @return {Highcharts.Color}\n   * Color instance.\n   */\n  static parse(input) {\n    return input ? new Color(input) : Color.None;\n  }\n  /* *\n   *\n   *  Constructor\n   *\n   * */\n  constructor(input) {\n    this.rgba = [NaN, NaN, NaN, NaN];\n    this.input = input;\n    const GlobalColor = H.Color;\n    // Backwards compatibility, allow class overwrite\n    if (GlobalColor && GlobalColor !== Color) {\n      return new GlobalColor(input);\n    }\n    this.init(input);\n  }\n  /* *\n   *\n   *  Functions\n   *\n   * */\n  /**\n   * Parse the input color to rgba array\n   *\n   * @private\n   * @function Highcharts.Color#init\n   *\n   * @param {Highcharts.ColorType} input\n   * The input color in either rbga or hex format\n   */\n  init(input) {\n    let result, rgba, i, parser;\n    // Gradients\n    if (typeof input === 'object' && typeof input.stops !== 'undefined') {\n      this.stops = input.stops.map(stop => new Color(stop[1]));\n      // Solid colors\n    } else if (typeof input === 'string') {\n      this.input = input = Color.names[input.toLowerCase()] || input;\n      // Bitmasking as input[0] is not working for legacy IE.\n      if (input.charAt(0) === '#') {\n        const len = input.length,\n          col = parseInt(input.substr(1), 16);\n        // Handle long-form, e.g. #AABBCC\n        if (len === 7) {\n          rgba = [(col & 0xFF0000) >> 16, (col & 0xFF00) >> 8, col & 0xFF, 1];\n          // Handle short-form, e.g. #ABC\n          // In short form, the value is assumed to be the same\n          // for both nibbles for each component. e.g. #ABC = #AABBCC\n        } else if (len === 4) {\n          rgba = [(col & 0xF00) >> 4 | (col & 0xF00) >> 8, (col & 0xF0) >> 4 | col & 0xF0, (col & 0xF) << 4 | col & 0xF, 1];\n        }\n      }\n      // Otherwise, check regex parsers\n      if (!rgba) {\n        i = Color.parsers.length;\n        while (i-- && !rgba) {\n          parser = Color.parsers[i];\n          result = parser.regex.exec(input);\n          if (result) {\n            rgba = parser.parse(result);\n          }\n        }\n      }\n    }\n    if (rgba) {\n      this.rgba = rgba;\n    }\n  }\n  /**\n   * Return the color or gradient stops in the specified format\n   *\n   * @function Highcharts.Color#get\n   *\n   * @param {string} [format]\n   * Possible values are 'a', 'rgb', 'rgba' (default).\n   *\n   * @return {Highcharts.ColorType}\n   * This color as a string or gradient stops.\n   */\n  get(format) {\n    const input = this.input,\n      rgba = this.rgba;\n    if (typeof input === 'object' && typeof this.stops !== 'undefined') {\n      const ret = merge(input);\n      ret.stops = [].slice.call(ret.stops);\n      this.stops.forEach((stop, i) => {\n        ret.stops[i] = [ret.stops[i][0], stop.get(format)];\n      });\n      return ret;\n    }\n    // it's NaN if gradient colors on a column chart\n    if (rgba && isNumber(rgba[0])) {\n      if (format === 'rgb' || !format && rgba[3] === 1) {\n        return 'rgb(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ')';\n      }\n      if (format === 'a') {\n        return `${rgba[3]}`;\n      }\n      return 'rgba(' + rgba.join(',') + ')';\n    }\n    return input;\n  }\n  /**\n   * Brighten the color instance.\n   *\n   * @function Highcharts.Color#brighten\n   *\n   * @param {number} alpha\n   * The alpha value.\n   *\n   * @return {Highcharts.Color}\n   * This color with modifications.\n   */\n  brighten(alpha) {\n    const rgba = this.rgba;\n    if (this.stops) {\n      this.stops.forEach(function (stop) {\n        stop.brighten(alpha);\n      });\n    } else if (isNumber(alpha) && alpha !== 0) {\n      for (let i = 0; i < 3; i++) {\n        rgba[i] += pInt(alpha * 255);\n        if (rgba[i] < 0) {\n          rgba[i] = 0;\n        }\n        if (rgba[i] > 255) {\n          rgba[i] = 255;\n        }\n      }\n    }\n    return this;\n  }\n  /**\n   * Set the color's opacity to a given alpha value.\n   *\n   * @function Highcharts.Color#setOpacity\n   *\n   * @param {number} alpha\n   *        Opacity between 0 and 1.\n   *\n   * @return {Highcharts.Color}\n   *         Color with modifications.\n   */\n  setOpacity(alpha) {\n    this.rgba[3] = alpha;\n    return this;\n  }\n  /**\n   * Return an intermediate color between two colors.\n   *\n   * @function Highcharts.Color#tweenTo\n   *\n   * @param {Highcharts.Color} to\n   * The color object to tween to.\n   *\n   * @param {number} pos\n   * The intermediate position, where 0 is the from color (current color\n   * item), and 1 is the `to` color.\n   *\n   * @return {Highcharts.ColorType}\n   * The intermediate color in rgba notation, or unsupported type.\n   */\n  tweenTo(to, pos) {\n    const fromRgba = this.rgba,\n      toRgba = to.rgba;\n    // Unsupported color, return to-color (#3920, #7034)\n    if (!isNumber(fromRgba[0]) || !isNumber(toRgba[0])) {\n      return to.input || 'none';\n    }\n    // Check for has alpha, because rgba colors perform worse due to\n    // lack of support in WebKit.\n    const hasAlpha = toRgba[3] !== 1 || fromRgba[3] !== 1;\n    return (hasAlpha ? 'rgba(' : 'rgb(') + Math.round(toRgba[0] + (fromRgba[0] - toRgba[0]) * (1 - pos)) + ',' + Math.round(toRgba[1] + (fromRgba[1] - toRgba[1]) * (1 - pos)) + ',' + Math.round(toRgba[2] + (fromRgba[2] - toRgba[2]) * (1 - pos)) + (hasAlpha ? ',' + (toRgba[3] + (fromRgba[3] - toRgba[3]) * (1 - pos)) : '') + ')';\n  }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * Collection of named colors. Can be extended from the outside by adding\n * colors to Highcharts.Color.names.\n * @private\n */\nColor.names = {\n  white: '#ffffff',\n  black: '#000000'\n};\n/**\n * Collection of parsers. This can be extended from the outside by pushing\n * parsers to `Color.parsers`.\n */\nColor.parsers = [{\n  // RGBA color\n  // eslint-disable-next-line max-len\n  regex: /rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]?(?:\\.[0-9]+)?)\\s*\\)/,\n  parse: function (result) {\n    return [pInt(result[1]), pInt(result[2]), pInt(result[3]), parseFloat(result[4], 10)];\n  }\n}, {\n  // RGB color\n  regex: /rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/,\n  parse: function (result) {\n    return [pInt(result[1]), pInt(result[2]), pInt(result[3]), 1];\n  }\n}];\n// Must be last static member for init cycle\nColor.None = new Color('');\n/* *\n *\n *  Default Export\n *\n * */\nexport default Color;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * A valid color to be parsed and handled by Highcharts. Highcharts internally\n * supports hex colors like `#ffffff`, rgb colors like `rgb(255,255,255)` and\n * rgba colors like `rgba(255,255,255,1)`. Other colors may be supported by the\n * browsers and displayed correctly, but Highcharts is not able to process them\n * and apply concepts like opacity and brightening.\n *\n * @typedef {string} Highcharts.ColorString\n */\n/**\n * A valid color type than can be parsed and handled by Highcharts. It can be a\n * color string, a gradient object, or a pattern object.\n *\n * @typedef {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject} Highcharts.ColorType\n */\n/**\n * Gradient options instead of a solid color.\n *\n * @example\n * // Linear gradient used as a color option\n * color: {\n *     linearGradient: { x1: 0, x2: 0, y1: 0, y2: 1 },\n *     stops: [\n *         [0, '#003399'], // start\n *         [0.5, '#ffffff'], // middle\n *         [1, '#3366AA'] // end\n *     ]\n * }\n *\n * @interface Highcharts.GradientColorObject\n */ /**\n    * Holds an object that defines the start position and the end position relative\n    * to the shape.\n    * @name Highcharts.GradientColorObject#linearGradient\n    * @type {Highcharts.LinearGradientColorObject|undefined}\n    */ /**\n       * Holds an object that defines the center position and the radius.\n       * @name Highcharts.GradientColorObject#radialGradient\n       * @type {Highcharts.RadialGradientColorObject|undefined}\n       */ /**\n          * The first item in each tuple is the position in the gradient, where 0 is the\n          * start of the gradient and 1 is the end of the gradient. Multiple stops can be\n          * applied. The second item is the color for each stop. This color can also be\n          * given in the rgba format.\n          * @name Highcharts.GradientColorObject#stops\n          * @type {Array<Highcharts.GradientColorStopObject>}\n          */\n/**\n * Color stop tuple.\n *\n * @see Highcharts.GradientColorObject\n *\n * @interface Highcharts.GradientColorStopObject\n */ /**\n    * @name Highcharts.GradientColorStopObject#0\n    * @type {number}\n    */ /**\n       * @name Highcharts.GradientColorStopObject#1\n       * @type {Highcharts.ColorString}\n       */ /**\n          * @name Highcharts.GradientColorStopObject#color\n          * @type {Highcharts.Color|undefined}\n          */\n/**\n * Defines the start position and the end position for a gradient relative\n * to the shape. Start position (x1, y1) and end position (x2, y2) are relative\n * to the shape, where 0 means top/left and 1 is bottom/right.\n *\n * @interface Highcharts.LinearGradientColorObject\n */ /**\n    * Start horizontal position of the gradient. Float ranges 0-1.\n    * @name Highcharts.LinearGradientColorObject#x1\n    * @type {number}\n    */ /**\n       * End horizontal position of the gradient. Float ranges 0-1.\n       * @name Highcharts.LinearGradientColorObject#x2\n       * @type {number}\n       */ /**\n          * Start vertical position of the gradient. Float ranges 0-1.\n          * @name Highcharts.LinearGradientColorObject#y1\n          * @type {number}\n          */ /**\n             * End vertical position of the gradient. Float ranges 0-1.\n             * @name Highcharts.LinearGradientColorObject#y2\n             * @type {number}\n             */\n/**\n * Defines the center position and the radius for a gradient.\n *\n * @interface Highcharts.RadialGradientColorObject\n */ /**\n    * Center horizontal position relative to the shape. Float ranges 0-1.\n    * @name Highcharts.RadialGradientColorObject#cx\n    * @type {number}\n    */ /**\n       * Center vertical position relative to the shape. Float ranges 0-1.\n       * @name Highcharts.RadialGradientColorObject#cy\n       * @type {number}\n       */ /**\n          * Radius relative to the shape. Float ranges 0-1.\n          * @name Highcharts.RadialGradientColorObject#r\n          * @type {number}\n          */\n/**\n * Creates a color instance out of a color string.\n *\n * @function Highcharts.color\n *\n * @param {Highcharts.ColorType} input\n *        The input color in either rbga or hex format\n *\n * @return {Highcharts.Color}\n *         Color instance\n */\n''; // detach doclets above","map":{"version":3,"names":["H","U","isNumber","merge","pInt","Color","parse","input","None","constructor","rgba","NaN","GlobalColor","init","result","i","parser","stops","map","stop","names","toLowerCase","charAt","len","length","col","parseInt","substr","parsers","regex","exec","get","format","ret","slice","call","forEach","join","brighten","alpha","setOpacity","tweenTo","to","pos","fromRgba","toRgba","hasAlpha","Math","round","white","black","parseFloat"],"sources":["D:/Vamtage/angular-widget-project/node_modules/highcharts/es-modules/Core/Color/Color.js"],"sourcesContent":["/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport H from '../Globals.js';\nimport U from '../Utilities.js';\nconst { isNumber, merge, pInt } = U;\n/* *\n *\n *  Class\n *\n * */\n/* eslint-disable valid-jsdoc */\n/**\n * Handle color operations. Some object methods are chainable.\n *\n * @class\n * @name Highcharts.Color\n *\n * @param {Highcharts.ColorType} input\n * The input color in either rbga or hex format\n */\nclass Color {\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    /**\n     * Creates a color instance out of a color string or object.\n     *\n     * @function Highcharts.Color.parse\n     *\n     * @param {Highcharts.ColorType} [input]\n     * The input color in either rbga or hex format.\n     *\n     * @return {Highcharts.Color}\n     * Color instance.\n     */\n    static parse(input) {\n        return input ? new Color(input) : Color.None;\n    }\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    constructor(input) {\n        this.rgba = [NaN, NaN, NaN, NaN];\n        this.input = input;\n        const GlobalColor = H.Color;\n        // Backwards compatibility, allow class overwrite\n        if (GlobalColor && GlobalColor !== Color) {\n            return new GlobalColor(input);\n        }\n        this.init(input);\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Parse the input color to rgba array\n     *\n     * @private\n     * @function Highcharts.Color#init\n     *\n     * @param {Highcharts.ColorType} input\n     * The input color in either rbga or hex format\n     */\n    init(input) {\n        let result, rgba, i, parser;\n        // Gradients\n        if (typeof input === 'object' &&\n            typeof input.stops !== 'undefined') {\n            this.stops = input.stops.map((stop) => new Color(stop[1]));\n            // Solid colors\n        }\n        else if (typeof input === 'string') {\n            this.input = input = (Color.names[input.toLowerCase()] || input);\n            // Bitmasking as input[0] is not working for legacy IE.\n            if (input.charAt(0) === '#') {\n                const len = input.length, col = parseInt(input.substr(1), 16);\n                // Handle long-form, e.g. #AABBCC\n                if (len === 7) {\n                    rgba = [\n                        (col & 0xFF0000) >> 16,\n                        (col & 0xFF00) >> 8,\n                        (col & 0xFF),\n                        1\n                    ];\n                    // Handle short-form, e.g. #ABC\n                    // In short form, the value is assumed to be the same\n                    // for both nibbles for each component. e.g. #ABC = #AABBCC\n                }\n                else if (len === 4) {\n                    rgba = [\n                        (((col & 0xF00) >> 4) |\n                            (col & 0xF00) >> 8),\n                        (((col & 0xF0) >> 4) |\n                            (col & 0xF0)),\n                        ((col & 0xF) << 4) | (col & 0xF),\n                        1\n                    ];\n                }\n            }\n            // Otherwise, check regex parsers\n            if (!rgba) {\n                i = Color.parsers.length;\n                while (i-- && !rgba) {\n                    parser = Color.parsers[i];\n                    result = parser.regex.exec(input);\n                    if (result) {\n                        rgba = parser.parse(result);\n                    }\n                }\n            }\n        }\n        if (rgba) {\n            this.rgba = rgba;\n        }\n    }\n    /**\n     * Return the color or gradient stops in the specified format\n     *\n     * @function Highcharts.Color#get\n     *\n     * @param {string} [format]\n     * Possible values are 'a', 'rgb', 'rgba' (default).\n     *\n     * @return {Highcharts.ColorType}\n     * This color as a string or gradient stops.\n     */\n    get(format) {\n        const input = this.input, rgba = this.rgba;\n        if (typeof input === 'object' &&\n            typeof this.stops !== 'undefined') {\n            const ret = merge(input);\n            ret.stops = [].slice.call(ret.stops);\n            this.stops.forEach((stop, i) => {\n                ret.stops[i] = [\n                    ret.stops[i][0],\n                    stop.get(format)\n                ];\n            });\n            return ret;\n        }\n        // it's NaN if gradient colors on a column chart\n        if (rgba && isNumber(rgba[0])) {\n            if (format === 'rgb' || (!format && rgba[3] === 1)) {\n                return 'rgb(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ')';\n            }\n            if (format === 'a') {\n                return `${rgba[3]}`;\n            }\n            return 'rgba(' + rgba.join(',') + ')';\n        }\n        return input;\n    }\n    /**\n     * Brighten the color instance.\n     *\n     * @function Highcharts.Color#brighten\n     *\n     * @param {number} alpha\n     * The alpha value.\n     *\n     * @return {Highcharts.Color}\n     * This color with modifications.\n     */\n    brighten(alpha) {\n        const rgba = this.rgba;\n        if (this.stops) {\n            this.stops.forEach(function (stop) {\n                stop.brighten(alpha);\n            });\n        }\n        else if (isNumber(alpha) && alpha !== 0) {\n            for (let i = 0; i < 3; i++) {\n                rgba[i] += pInt(alpha * 255);\n                if (rgba[i] < 0) {\n                    rgba[i] = 0;\n                }\n                if (rgba[i] > 255) {\n                    rgba[i] = 255;\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * Set the color's opacity to a given alpha value.\n     *\n     * @function Highcharts.Color#setOpacity\n     *\n     * @param {number} alpha\n     *        Opacity between 0 and 1.\n     *\n     * @return {Highcharts.Color}\n     *         Color with modifications.\n     */\n    setOpacity(alpha) {\n        this.rgba[3] = alpha;\n        return this;\n    }\n    /**\n     * Return an intermediate color between two colors.\n     *\n     * @function Highcharts.Color#tweenTo\n     *\n     * @param {Highcharts.Color} to\n     * The color object to tween to.\n     *\n     * @param {number} pos\n     * The intermediate position, where 0 is the from color (current color\n     * item), and 1 is the `to` color.\n     *\n     * @return {Highcharts.ColorType}\n     * The intermediate color in rgba notation, or unsupported type.\n     */\n    tweenTo(to, pos) {\n        const fromRgba = this.rgba, toRgba = to.rgba;\n        // Unsupported color, return to-color (#3920, #7034)\n        if (!isNumber(fromRgba[0]) || !isNumber(toRgba[0])) {\n            return to.input || 'none';\n        }\n        // Check for has alpha, because rgba colors perform worse due to\n        // lack of support in WebKit.\n        const hasAlpha = (toRgba[3] !== 1 || fromRgba[3] !== 1);\n        return (hasAlpha ? 'rgba(' : 'rgb(') +\n            Math.round(toRgba[0] + (fromRgba[0] - toRgba[0]) * (1 - pos)) +\n            ',' +\n            Math.round(toRgba[1] + (fromRgba[1] - toRgba[1]) * (1 - pos)) +\n            ',' +\n            Math.round(toRgba[2] + (fromRgba[2] - toRgba[2]) * (1 - pos)) +\n            (hasAlpha ?\n                (',' +\n                    (toRgba[3] + (fromRgba[3] - toRgba[3]) * (1 - pos))) :\n                '') +\n            ')';\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * Collection of named colors. Can be extended from the outside by adding\n * colors to Highcharts.Color.names.\n * @private\n */\nColor.names = {\n    white: '#ffffff',\n    black: '#000000'\n};\n/**\n * Collection of parsers. This can be extended from the outside by pushing\n * parsers to `Color.parsers`.\n */\nColor.parsers = [{\n        // RGBA color\n        // eslint-disable-next-line max-len\n        regex: /rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]?(?:\\.[0-9]+)?)\\s*\\)/,\n        parse: function (result) {\n            return [\n                pInt(result[1]),\n                pInt(result[2]),\n                pInt(result[3]),\n                parseFloat(result[4], 10)\n            ];\n        }\n    }, {\n        // RGB color\n        regex: /rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/,\n        parse: function (result) {\n            return [pInt(result[1]), pInt(result[2]), pInt(result[3]), 1];\n        }\n    }];\n// Must be last static member for init cycle\nColor.None = new Color('');\n/* *\n *\n *  Default Export\n *\n * */\nexport default Color;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * A valid color to be parsed and handled by Highcharts. Highcharts internally\n * supports hex colors like `#ffffff`, rgb colors like `rgb(255,255,255)` and\n * rgba colors like `rgba(255,255,255,1)`. Other colors may be supported by the\n * browsers and displayed correctly, but Highcharts is not able to process them\n * and apply concepts like opacity and brightening.\n *\n * @typedef {string} Highcharts.ColorString\n */\n/**\n * A valid color type than can be parsed and handled by Highcharts. It can be a\n * color string, a gradient object, or a pattern object.\n *\n * @typedef {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject} Highcharts.ColorType\n */\n/**\n * Gradient options instead of a solid color.\n *\n * @example\n * // Linear gradient used as a color option\n * color: {\n *     linearGradient: { x1: 0, x2: 0, y1: 0, y2: 1 },\n *     stops: [\n *         [0, '#003399'], // start\n *         [0.5, '#ffffff'], // middle\n *         [1, '#3366AA'] // end\n *     ]\n * }\n *\n * @interface Highcharts.GradientColorObject\n */ /**\n* Holds an object that defines the start position and the end position relative\n* to the shape.\n* @name Highcharts.GradientColorObject#linearGradient\n* @type {Highcharts.LinearGradientColorObject|undefined}\n*/ /**\n* Holds an object that defines the center position and the radius.\n* @name Highcharts.GradientColorObject#radialGradient\n* @type {Highcharts.RadialGradientColorObject|undefined}\n*/ /**\n* The first item in each tuple is the position in the gradient, where 0 is the\n* start of the gradient and 1 is the end of the gradient. Multiple stops can be\n* applied. The second item is the color for each stop. This color can also be\n* given in the rgba format.\n* @name Highcharts.GradientColorObject#stops\n* @type {Array<Highcharts.GradientColorStopObject>}\n*/\n/**\n * Color stop tuple.\n *\n * @see Highcharts.GradientColorObject\n *\n * @interface Highcharts.GradientColorStopObject\n */ /**\n* @name Highcharts.GradientColorStopObject#0\n* @type {number}\n*/ /**\n* @name Highcharts.GradientColorStopObject#1\n* @type {Highcharts.ColorString}\n*/ /**\n* @name Highcharts.GradientColorStopObject#color\n* @type {Highcharts.Color|undefined}\n*/\n/**\n * Defines the start position and the end position for a gradient relative\n * to the shape. Start position (x1, y1) and end position (x2, y2) are relative\n * to the shape, where 0 means top/left and 1 is bottom/right.\n *\n * @interface Highcharts.LinearGradientColorObject\n */ /**\n* Start horizontal position of the gradient. Float ranges 0-1.\n* @name Highcharts.LinearGradientColorObject#x1\n* @type {number}\n*/ /**\n* End horizontal position of the gradient. Float ranges 0-1.\n* @name Highcharts.LinearGradientColorObject#x2\n* @type {number}\n*/ /**\n* Start vertical position of the gradient. Float ranges 0-1.\n* @name Highcharts.LinearGradientColorObject#y1\n* @type {number}\n*/ /**\n* End vertical position of the gradient. Float ranges 0-1.\n* @name Highcharts.LinearGradientColorObject#y2\n* @type {number}\n*/\n/**\n * Defines the center position and the radius for a gradient.\n *\n * @interface Highcharts.RadialGradientColorObject\n */ /**\n* Center horizontal position relative to the shape. Float ranges 0-1.\n* @name Highcharts.RadialGradientColorObject#cx\n* @type {number}\n*/ /**\n* Center vertical position relative to the shape. Float ranges 0-1.\n* @name Highcharts.RadialGradientColorObject#cy\n* @type {number}\n*/ /**\n* Radius relative to the shape. Float ranges 0-1.\n* @name Highcharts.RadialGradientColorObject#r\n* @type {number}\n*/\n/**\n * Creates a color instance out of a color string.\n *\n * @function Highcharts.color\n *\n * @param {Highcharts.ColorType} input\n *        The input color in either rbga or hex format\n *\n * @return {Highcharts.Color}\n *         Color instance\n */\n(''); // detach doclets above\n"],"mappings":"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ACjE;AACJ,CAAC,CAAC;AACN;AACAT,KAAK,CAACG,IAAI,GAAG,IAAIH,KAAK,CAAC,EAAE,CAAC;AAC1B;AACA;AACA;AACA;AACA;AACA,eAAeA,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAfA,CAeI;AACJ;AACA;AACA;AACA;AACA,MALI,CAKD;AACH;AACA;AACA;AACA,SAJG,CAIA;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GANA,CAMI;AACJ;AACA;AACA,MAHI,CAGD;AACH;AACA;AACA,SAHG,CAGA;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GANA,CAMI;AACJ;AACA;AACA;AACA,MAJI,CAID;AACH;AACA;AACA;AACA,SAJG,CAIA;AACH;AACA;AACA;AACA,YAJG,CAIA;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAJA,CAII;AACJ;AACA;AACA;AACA,MAJI,CAID;AACH;AACA;AACA;AACA,SAJG,CAIA;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,EAAE,CAAE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}