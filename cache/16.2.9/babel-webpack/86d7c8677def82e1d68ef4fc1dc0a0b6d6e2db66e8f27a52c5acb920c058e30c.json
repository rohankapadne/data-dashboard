{"ast":null,"code":"/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n\nimport U from '../../Utilities.js';\nconst {\n  erase,\n  extend,\n  isNumber\n} = U;\n/* *\n *\n *  Composition\n *\n * */\nvar PlotLineOrBandAxis;\n(function (PlotLineOrBandAxis) {\n  /* *\n   *\n   *  Declarations\n   *\n   * */\n  /* *\n   *\n   *  Constants\n   *\n   * */\n  const composedMembers = [];\n  /* *\n   *\n   *  Variables\n   *\n   * */\n  let PlotLineOrBandClass;\n  /* *\n   *\n   *  Functions\n   *\n   * */\n  /**\n   * Add a plot band after render time.\n   *\n   * @sample highcharts/members/axis-addplotband/\n   *         Toggle the plot band from a button\n   *\n   * @function Highcharts.Axis#addPlotBand\n   *\n   * @param {Highcharts.AxisPlotBandsOptions} options\n   * A configuration object for the plot band, as defined in\n   * [xAxis.plotBands](https://api.highcharts.com/highcharts/xAxis.plotBands).\n   *\n   * @return {Highcharts.PlotLineOrBand|undefined}\n   * The added plot band.\n   */\n  function addPlotBand(options) {\n    return this.addPlotBandOrLine(options, 'plotBands');\n  }\n  /**\n   * Add a plot band or plot line after render time. Called from\n   * addPlotBand and addPlotLine internally.\n   *\n   * @private\n   * @function Highcharts.Axis#addPlotBandOrLine\n   * @param {Highcharts.AxisPlotBandsOptions|Highcharts.AxisPlotLinesOptions} options\n   * The plotBand or plotLine configuration object.\n   */\n  function addPlotBandOrLine(options, coll) {\n    const userOptions = this.userOptions;\n    let obj = new PlotLineOrBandClass(this, options);\n    if (this.visible) {\n      obj = obj.render();\n    }\n    if (obj) {\n      // #2189\n      if (!this._addedPlotLB) {\n        this._addedPlotLB = true;\n        (userOptions.plotLines || []).concat(userOptions.plotBands || []).forEach(plotLineOptions => {\n          this.addPlotBandOrLine(plotLineOptions);\n        });\n      }\n      // Add it to the user options for exporting and Axis.update\n      if (coll) {\n        // Workaround Microsoft/TypeScript issue #32693\n        const updatedOptions = userOptions[coll] || [];\n        updatedOptions.push(options);\n        userOptions[coll] = updatedOptions;\n      }\n      this.plotLinesAndBands.push(obj);\n    }\n    return obj;\n  }\n  /**\n   * Add a plot line after render time.\n   *\n   * @sample highcharts/members/axis-addplotline/\n   *         Toggle the plot line from a button\n   *\n   * @function Highcharts.Axis#addPlotLine\n   *\n   * @param {Highcharts.AxisPlotLinesOptions} options\n   * A configuration object for the plot line, as defined in\n   * [xAxis.plotLines](https://api.highcharts.com/highcharts/xAxis.plotLines).\n   *\n   * @return {Highcharts.PlotLineOrBand|undefined}\n   * The added plot line.\n   */\n  function addPlotLine(options) {\n    return this.addPlotBandOrLine(options, 'plotLines');\n  }\n  /**\n   * @private\n   */\n  function compose(PlotLineOrBandType, AxisClass) {\n    if (!PlotLineOrBandClass) {\n      PlotLineOrBandClass = PlotLineOrBandType;\n    }\n    if (U.pushUnique(composedMembers, AxisClass)) {\n      extend(AxisClass.prototype, {\n        addPlotBand,\n        addPlotLine,\n        addPlotBandOrLine,\n        getPlotBandPath,\n        removePlotBand,\n        removePlotLine,\n        removePlotBandOrLine\n      });\n    }\n    return AxisClass;\n  }\n  PlotLineOrBandAxis.compose = compose;\n  /**\n   * Internal function to create the SVG path definition for a plot band.\n   *\n   * @function Highcharts.Axis#getPlotBandPath\n   *\n   * @param {number} from\n   * The axis value to start from.\n   *\n   * @param {number} to\n   * The axis value to end on.\n   *\n   * @param {Highcharts.AxisPlotBandsOptions|Highcharts.AxisPlotLinesOptions} options\n   * The plotBand or plotLine configuration object.\n   *\n   * @return {Highcharts.SVGPathArray}\n   * The SVG path definition in array form.\n   */\n  function getPlotBandPath(from, to, options) {\n    options = options || this.options;\n    const toPath = this.getPlotLinePath({\n        value: to,\n        force: true,\n        acrossPanes: options.acrossPanes\n      }),\n      result = [],\n      horiz = this.horiz,\n      outside = !isNumber(this.min) || !isNumber(this.max) || from < this.min && to < this.min || from > this.max && to > this.max;\n    let path = this.getPlotLinePath({\n        value: from,\n        force: true,\n        acrossPanes: options.acrossPanes\n      }),\n      i,\n      // #4964 check if chart is inverted or plotband is on yAxis\n      plus = 1,\n      isFlat;\n    if (path && toPath) {\n      // Flat paths don't need labels (#3836)\n      if (outside) {\n        isFlat = path.toString() === toPath.toString();\n        plus = 0;\n      }\n      // Go over each subpath - for panes in Highcharts Stock\n      for (i = 0; i < path.length; i += 2) {\n        const pathStart = path[i],\n          pathEnd = path[i + 1],\n          toPathStart = toPath[i],\n          toPathEnd = toPath[i + 1];\n        // Type checking all affected path segments. Consider\n        // something smarter.\n        if ((pathStart[0] === 'M' || pathStart[0] === 'L') && (pathEnd[0] === 'M' || pathEnd[0] === 'L') && (toPathStart[0] === 'M' || toPathStart[0] === 'L') && (toPathEnd[0] === 'M' || toPathEnd[0] === 'L')) {\n          // Add 1 pixel when coordinates are the same\n          if (horiz && toPathStart[1] === pathStart[1]) {\n            toPathStart[1] += plus;\n            toPathEnd[1] += plus;\n          } else if (!horiz && toPathStart[2] === pathStart[2]) {\n            toPathStart[2] += plus;\n            toPathEnd[2] += plus;\n          }\n          result.push(['M', pathStart[1], pathStart[2]], ['L', pathEnd[1], pathEnd[2]], ['L', toPathEnd[1], toPathEnd[2]], ['L', toPathStart[1], toPathStart[2]], ['Z']);\n        }\n        result.isFlat = isFlat;\n      }\n    } else {\n      // outside the axis area\n      path = null;\n    }\n    return result;\n  }\n  /**\n   * Remove a plot band by its id.\n   *\n   * @sample highcharts/members/axis-removeplotband/\n   *         Remove plot band by id\n   * @sample highcharts/members/axis-addplotband/\n   *         Toggle the plot band from a button\n   *\n   * @function Highcharts.Axis#removePlotBand\n   *\n   * @param {string} id\n   *        The plot band's `id` as given in the original configuration\n   *        object or in the `addPlotBand` option.\n   */\n  function removePlotBand(id) {\n    this.removePlotBandOrLine(id);\n  }\n  /**\n   * Remove a plot band or plot line from the chart by id. Called\n   * internally from `removePlotBand` and `removePlotLine`.\n   * @private\n   * @function Highcharts.Axis#removePlotBandOrLine\n   */\n  function removePlotBandOrLine(id) {\n    const plotLinesAndBands = this.plotLinesAndBands,\n      options = this.options,\n      userOptions = this.userOptions;\n    if (plotLinesAndBands) {\n      // #15639\n      let i = plotLinesAndBands.length;\n      while (i--) {\n        if (plotLinesAndBands[i].id === id) {\n          plotLinesAndBands[i].destroy();\n        }\n      }\n      [options.plotLines || [], userOptions.plotLines || [], options.plotBands || [], userOptions.plotBands || []].forEach(function (arr) {\n        i = arr.length;\n        while (i--) {\n          if ((arr[i] || {}).id === id) {\n            erase(arr, arr[i]);\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Remove a plot line by its id.\n   *\n   * @sample highcharts/xaxis/plotlines-id/\n   *         Remove plot line by id\n   * @sample highcharts/members/axis-addplotline/\n   *         Toggle the plot line from a button\n   *\n   * @function Highcharts.Axis#removePlotLine\n   *\n   * @param {string} id\n   *        The plot line's `id` as given in the original configuration\n   *        object or in the `addPlotLine` option.\n   */\n  function removePlotLine(id) {\n    this.removePlotBandOrLine(id);\n  }\n})(PlotLineOrBandAxis || (PlotLineOrBandAxis = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default PlotLineOrBandAxis;","map":{"version":3,"names":["U","erase","extend","isNumber","PlotLineOrBandAxis","composedMembers","PlotLineOrBandClass","addPlotBand","options","addPlotBandOrLine","coll","userOptions","obj","visible","render","_addedPlotLB","plotLines","concat","plotBands","forEach","plotLineOptions","updatedOptions","push","plotLinesAndBands","addPlotLine","compose","PlotLineOrBandType","AxisClass","pushUnique","prototype","getPlotBandPath","removePlotBand","removePlotLine","removePlotBandOrLine","from","to","toPath","getPlotLinePath","value","force","acrossPanes","result","horiz","outside","min","max","path","i","plus","isFlat","toString","length","pathStart","pathEnd","toPathStart","toPathEnd","id","destroy","arr"],"sources":["D:/Vamtage/angular-widget-project/node_modules/highcharts/es-modules/Core/Axis/PlotLineOrBand/PlotLineOrBandAxis.js"],"sourcesContent":["/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport U from '../../Utilities.js';\nconst { erase, extend, isNumber } = U;\n/* *\n *\n *  Composition\n *\n * */\nvar PlotLineOrBandAxis;\n(function (PlotLineOrBandAxis) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    const composedMembers = [];\n    /* *\n     *\n     *  Variables\n     *\n     * */\n    let PlotLineOrBandClass;\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Add a plot band after render time.\n     *\n     * @sample highcharts/members/axis-addplotband/\n     *         Toggle the plot band from a button\n     *\n     * @function Highcharts.Axis#addPlotBand\n     *\n     * @param {Highcharts.AxisPlotBandsOptions} options\n     * A configuration object for the plot band, as defined in\n     * [xAxis.plotBands](https://api.highcharts.com/highcharts/xAxis.plotBands).\n     *\n     * @return {Highcharts.PlotLineOrBand|undefined}\n     * The added plot band.\n     */\n    function addPlotBand(options) {\n        return this.addPlotBandOrLine(options, 'plotBands');\n    }\n    /**\n     * Add a plot band or plot line after render time. Called from\n     * addPlotBand and addPlotLine internally.\n     *\n     * @private\n     * @function Highcharts.Axis#addPlotBandOrLine\n     * @param {Highcharts.AxisPlotBandsOptions|Highcharts.AxisPlotLinesOptions} options\n     * The plotBand or plotLine configuration object.\n     */\n    function addPlotBandOrLine(options, coll) {\n        const userOptions = this.userOptions;\n        let obj = new PlotLineOrBandClass(this, options);\n        if (this.visible) {\n            obj = obj.render();\n        }\n        if (obj) { // #2189\n            if (!this._addedPlotLB) {\n                this._addedPlotLB = true;\n                (userOptions.plotLines || [])\n                    .concat(userOptions.plotBands || [])\n                    .forEach((plotLineOptions) => {\n                    this.addPlotBandOrLine(plotLineOptions);\n                });\n            }\n            // Add it to the user options for exporting and Axis.update\n            if (coll) {\n                // Workaround Microsoft/TypeScript issue #32693\n                const updatedOptions = (userOptions[coll] || []);\n                updatedOptions.push(options);\n                userOptions[coll] = updatedOptions;\n            }\n            this.plotLinesAndBands.push(obj);\n        }\n        return obj;\n    }\n    /**\n     * Add a plot line after render time.\n     *\n     * @sample highcharts/members/axis-addplotline/\n     *         Toggle the plot line from a button\n     *\n     * @function Highcharts.Axis#addPlotLine\n     *\n     * @param {Highcharts.AxisPlotLinesOptions} options\n     * A configuration object for the plot line, as defined in\n     * [xAxis.plotLines](https://api.highcharts.com/highcharts/xAxis.plotLines).\n     *\n     * @return {Highcharts.PlotLineOrBand|undefined}\n     * The added plot line.\n     */\n    function addPlotLine(options) {\n        return this.addPlotBandOrLine(options, 'plotLines');\n    }\n    /**\n     * @private\n     */\n    function compose(PlotLineOrBandType, AxisClass) {\n        if (!PlotLineOrBandClass) {\n            PlotLineOrBandClass = PlotLineOrBandType;\n        }\n        if (U.pushUnique(composedMembers, AxisClass)) {\n            extend(AxisClass.prototype, {\n                addPlotBand,\n                addPlotLine,\n                addPlotBandOrLine,\n                getPlotBandPath,\n                removePlotBand,\n                removePlotLine,\n                removePlotBandOrLine\n            });\n        }\n        return AxisClass;\n    }\n    PlotLineOrBandAxis.compose = compose;\n    /**\n     * Internal function to create the SVG path definition for a plot band.\n     *\n     * @function Highcharts.Axis#getPlotBandPath\n     *\n     * @param {number} from\n     * The axis value to start from.\n     *\n     * @param {number} to\n     * The axis value to end on.\n     *\n     * @param {Highcharts.AxisPlotBandsOptions|Highcharts.AxisPlotLinesOptions} options\n     * The plotBand or plotLine configuration object.\n     *\n     * @return {Highcharts.SVGPathArray}\n     * The SVG path definition in array form.\n     */\n    function getPlotBandPath(from, to, options) {\n        options = options || this.options;\n        const toPath = this.getPlotLinePath({\n            value: to,\n            force: true,\n            acrossPanes: options.acrossPanes\n        }), result = [], horiz = this.horiz, outside = !isNumber(this.min) ||\n            !isNumber(this.max) ||\n            (from < this.min && to < this.min) ||\n            (from > this.max && to > this.max);\n        let path = this.getPlotLinePath({\n            value: from,\n            force: true,\n            acrossPanes: options.acrossPanes\n        }), i, \n        // #4964 check if chart is inverted or plotband is on yAxis\n        plus = 1, isFlat;\n        if (path && toPath) {\n            // Flat paths don't need labels (#3836)\n            if (outside) {\n                isFlat = path.toString() === toPath.toString();\n                plus = 0;\n            }\n            // Go over each subpath - for panes in Highcharts Stock\n            for (i = 0; i < path.length; i += 2) {\n                const pathStart = path[i], pathEnd = path[i + 1], toPathStart = toPath[i], toPathEnd = toPath[i + 1];\n                // Type checking all affected path segments. Consider\n                // something smarter.\n                if ((pathStart[0] === 'M' || pathStart[0] === 'L') &&\n                    (pathEnd[0] === 'M' || pathEnd[0] === 'L') &&\n                    (toPathStart[0] === 'M' || toPathStart[0] === 'L') &&\n                    (toPathEnd[0] === 'M' || toPathEnd[0] === 'L')) {\n                    // Add 1 pixel when coordinates are the same\n                    if (horiz && toPathStart[1] === pathStart[1]) {\n                        toPathStart[1] += plus;\n                        toPathEnd[1] += plus;\n                    }\n                    else if (!horiz && toPathStart[2] === pathStart[2]) {\n                        toPathStart[2] += plus;\n                        toPathEnd[2] += plus;\n                    }\n                    result.push(['M', pathStart[1], pathStart[2]], ['L', pathEnd[1], pathEnd[2]], ['L', toPathEnd[1], toPathEnd[2]], ['L', toPathStart[1], toPathStart[2]], ['Z']);\n                }\n                result.isFlat = isFlat;\n            }\n        }\n        else { // outside the axis area\n            path = null;\n        }\n        return result;\n    }\n    /**\n     * Remove a plot band by its id.\n     *\n     * @sample highcharts/members/axis-removeplotband/\n     *         Remove plot band by id\n     * @sample highcharts/members/axis-addplotband/\n     *         Toggle the plot band from a button\n     *\n     * @function Highcharts.Axis#removePlotBand\n     *\n     * @param {string} id\n     *        The plot band's `id` as given in the original configuration\n     *        object or in the `addPlotBand` option.\n     */\n    function removePlotBand(id) {\n        this.removePlotBandOrLine(id);\n    }\n    /**\n     * Remove a plot band or plot line from the chart by id. Called\n     * internally from `removePlotBand` and `removePlotLine`.\n     * @private\n     * @function Highcharts.Axis#removePlotBandOrLine\n     */\n    function removePlotBandOrLine(id) {\n        const plotLinesAndBands = this.plotLinesAndBands, options = this.options, userOptions = this.userOptions;\n        if (plotLinesAndBands) { // #15639\n            let i = plotLinesAndBands.length;\n            while (i--) {\n                if (plotLinesAndBands[i].id === id) {\n                    plotLinesAndBands[i].destroy();\n                }\n            }\n            ([\n                options.plotLines || [],\n                userOptions.plotLines || [],\n                options.plotBands || [],\n                userOptions.plotBands || []\n            ]).forEach(function (arr) {\n                i = arr.length;\n                while (i--) {\n                    if ((arr[i] || {}).id === id) {\n                        erase(arr, arr[i]);\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Remove a plot line by its id.\n     *\n     * @sample highcharts/xaxis/plotlines-id/\n     *         Remove plot line by id\n     * @sample highcharts/members/axis-addplotline/\n     *         Toggle the plot line from a button\n     *\n     * @function Highcharts.Axis#removePlotLine\n     *\n     * @param {string} id\n     *        The plot line's `id` as given in the original configuration\n     *        object or in the `addPlotLine` option.\n     */\n    function removePlotLine(id) {\n        this.removePlotBandOrLine(id);\n    }\n})(PlotLineOrBandAxis || (PlotLineOrBandAxis = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default PlotLineOrBandAxis;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}