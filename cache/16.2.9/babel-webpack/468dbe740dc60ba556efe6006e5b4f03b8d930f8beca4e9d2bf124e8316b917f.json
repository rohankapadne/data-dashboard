{"ast":null,"code":"/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n\nimport T from '../../Templating.js';\nconst {\n  format\n} = T;\nimport SeriesRegistry from '../../Series/SeriesRegistry.js';\nconst {\n  series: Series\n} = SeriesRegistry;\nimport U from '../../Utilities.js';\nconst {\n  destroyObjectProperties,\n  fireEvent,\n  isNumber,\n  pick\n} = U;\n/* *\n *\n *  Class\n *\n * */\n/**\n * The class for stacks. Each stack, on a specific X value and either negative\n * or positive, has its own stack item.\n * @private\n */\nclass StackItem {\n  /* *\n   *\n   *  Constructor\n   *\n   * */\n  constructor(axis, options, negativeValue, x, stackOption) {\n    const inverted = axis.chart.inverted,\n      reversed = axis.reversed;\n    this.axis = axis;\n    // The stack goes to the left either if the stack has negative value\n    // or when axis is reversed. XOR operator.\n    const isNegative = this.isNegative = !!negativeValue !== !!reversed;\n    // Save the options to be able to style the label\n    this.options = options = options || {};\n    // Save the x value to be able to position the label later\n    this.x = x;\n    // Initialize total value\n    this.total = null;\n    this.cumulative = null;\n    // This will keep each points' extremes stored by series.index and point\n    // index\n    this.points = {};\n    this.hasValidPoints = false;\n    // Save the stack option on the series configuration object,\n    // and whether to treat it as percent\n    this.stack = stackOption;\n    this.leftCliff = 0;\n    this.rightCliff = 0;\n    // The align options and text align varies on whether the stack is\n    // negative and if the chart is inverted or not.\n    // First test the user supplied value, then use the dynamic.\n    this.alignOptions = {\n      align: options.align || (inverted ? isNegative ? 'left' : 'right' : 'center'),\n      verticalAlign: options.verticalAlign || (inverted ? 'middle' : isNegative ? 'bottom' : 'top'),\n      y: options.y,\n      x: options.x\n    };\n    this.textAlign = options.textAlign || (inverted ? !isNegative ? 'left' : 'right' : 'center');\n  }\n  /* *\n   *\n   *  Functions\n   *\n   * */\n  /**\n   * @private\n   */\n  destroy() {\n    destroyObjectProperties(this, this.axis);\n  }\n  /**\n   * Renders the stack total label and adds it to the stack label group.\n   * @private\n   */\n  render(group) {\n    const chart = this.axis.chart,\n      options = this.options,\n      formatOption = options.format,\n      // Format the text in the label.\n      str = formatOption ? format(formatOption, this, chart) : options.formatter.call(this);\n    // Change the text to reflect the new total and set visibility to hidden\n    // in case the serie is hidden\n    if (this.label) {\n      this.label.attr({\n        text: str,\n        visibility: 'hidden'\n      });\n    } else {\n      // Create new label\n      this.label = chart.renderer.label(str, null, void 0, options.shape, void 0, void 0, options.useHTML, false, 'stack-labels');\n      const attr = {\n        r: options.borderRadius || 0,\n        text: str,\n        // set default padding to 5 as it is in datalabels #12308\n        padding: pick(options.padding, 5),\n        visibility: 'hidden' // hidden until setOffset is called\n      };\n\n      if (!chart.styledMode) {\n        attr.fill = options.backgroundColor;\n        attr.stroke = options.borderColor;\n        attr['stroke-width'] = options.borderWidth;\n        this.label.css(options.style || {});\n      }\n      this.label.attr(attr);\n      if (!this.label.added) {\n        this.label.add(group); // add to the labels-group\n      }\n    }\n    // Rank it higher than data labels (#8742)\n    this.label.labelrank = chart.plotSizeY;\n    fireEvent(this, 'afterRender');\n  }\n  /**\n   * Sets the offset that the stack has from the x value and repositions the\n   * label.\n   * @private\n   */\n  setOffset(xOffset, width, boxBottom, boxTop, defaultX, xAxis) {\n    const {\n        alignOptions,\n        axis,\n        label,\n        options,\n        textAlign\n      } = this,\n      chart = axis.chart,\n      stackBox = this.getStackBox({\n        xOffset,\n        width,\n        boxBottom,\n        boxTop,\n        defaultX,\n        xAxis\n      }),\n      {\n        verticalAlign\n      } = alignOptions;\n    if (label && stackBox) {\n      const labelBox = label.getBBox(),\n        padding = label.padding;\n      let isJustify = pick(options.overflow, 'justify') === 'justify',\n        visible;\n      // Reset alignOptions property after justify #12337\n      alignOptions.x = options.x || 0;\n      alignOptions.y = options.y || 0;\n      // Calculate the adjusted Stack position, to take into consideration\n      // The size if the labelBox and vertical alignment as\n      // well as the text alignment. It's need to be done to work with\n      // default SVGLabel.align/justify methods.\n      const {\n        x,\n        y\n      } = this.adjustStackPosition({\n        labelBox,\n        verticalAlign,\n        textAlign\n      });\n      stackBox.x -= x;\n      stackBox.y -= y;\n      // Align the label to the adjusted box.\n      label.align(alignOptions, false, stackBox);\n      // Check if label is inside the plotArea #12294\n      visible = chart.isInsidePlot(label.alignAttr.x + alignOptions.x + x, label.alignAttr.y + alignOptions.y + y);\n      if (!visible) {\n        isJustify = false;\n      }\n      if (isJustify) {\n        // Justify stackLabel into the alignBox\n        Series.prototype.justifyDataLabel.call(axis, label, alignOptions, label.alignAttr, labelBox, stackBox);\n      }\n      // Add attr to aviod the default animation of justifyDataLabel.\n      // Also add correct rotation with its rotation origin. #15129\n      label.attr({\n        x: label.alignAttr.x,\n        y: label.alignAttr.y,\n        rotation: options.rotation,\n        rotationOriginX: labelBox.width / 2,\n        rotationOriginY: labelBox.height / 2\n      });\n      // Check if the dataLabel should be visible.\n      if (pick(!isJustify && options.crop, true)) {\n        visible = isNumber(label.x) && isNumber(label.y) && chart.isInsidePlot(label.x - padding + (label.width || 0), label.y) && chart.isInsidePlot(label.x + padding, label.y);\n      }\n      label[visible ? 'show' : 'hide']();\n    }\n    fireEvent(this, 'afterSetOffset', {\n      xOffset,\n      width\n    });\n  }\n  /**\n   * Adjust the stack BBox position, to take into consideration the alignment\n   * of the dataLabel. This is necessary to make the stackDataLabel work with\n   * core methods like `SVGLabel.adjust` and `Series.justifyDataLabel`.\n   * @param AdjustStackPositionProps\n   * @return {{x: number, y: number}} Adjusted BBox position of the stack.\n   */\n  adjustStackPosition({\n    labelBox,\n    verticalAlign,\n    textAlign\n  }) {\n    const factorMap = {\n        bottom: 0,\n        middle: 1,\n        top: 2,\n        right: 1,\n        center: 0,\n        left: -1\n      },\n      verticalAlignFactor = factorMap[verticalAlign],\n      textAlignFactor = factorMap[textAlign];\n    return {\n      x: labelBox.width / 2 + labelBox.width / 2 * textAlignFactor,\n      y: labelBox.height / 2 * verticalAlignFactor\n    };\n  }\n  /**\n   * Get the bbox of the stack.\n   * @private\n   * @function Highcharts.StackItem#getStackBox\n   * @return {BBoxObject} The x, y, height, width of the stack.\n   */\n  getStackBox(stackBoxProps) {\n    const stackItem = this,\n      axis = this.axis,\n      chart = axis.chart,\n      {\n        boxTop,\n        defaultX,\n        xOffset,\n        width,\n        boxBottom\n      } = stackBoxProps,\n      totalStackValue = axis.stacking.usePercentage ? 100 : pick(boxTop, this.total, 0),\n      y = axis.toPixels(totalStackValue),\n      xAxis = stackBoxProps.xAxis || chart.xAxis[0],\n      x = pick(defaultX, xAxis.translate(this.x)) + xOffset,\n      yZero = axis.toPixels(boxBottom || isNumber(axis.min) && axis.logarithmic && axis.logarithmic.lin2log(axis.min) || 0),\n      height = Math.abs(y - yZero),\n      inverted = chart.inverted,\n      neg = stackItem.isNegative;\n    return inverted ? {\n      x: (neg ? y : y - height) - chart.plotLeft,\n      y: xAxis.height - x - width,\n      width: height,\n      height: width\n    } : {\n      x: x + xAxis.transB - chart.plotLeft,\n      y: (neg ? y - height : y) - chart.plotTop,\n      width: width,\n      height: height\n    };\n  }\n}\n/* *\n *\n *  Default Export\n *\n * */\nexport default StackItem;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Stack of data points\n *\n * @product highcharts\n *\n * @interface Highcharts.StackItemObject\n */ /**\n    * Alignment settings\n    * @name Highcharts.StackItemObject#alignOptions\n    * @type {Highcharts.AlignObject}\n    */ /**\n       * Related axis\n       * @name Highcharts.StackItemObject#axis\n       * @type {Highcharts.Axis}\n       */ /**\n          * Cumulative value of the stacked data points\n          * @name Highcharts.StackItemObject#cumulative\n          * @type {number}\n          */ /**\n             * True if on the negative side\n             * @name Highcharts.StackItemObject#isNegative\n             * @type {boolean}\n             */ /**\n                * Related SVG element\n                * @name Highcharts.StackItemObject#label\n                * @type {Highcharts.SVGElement}\n                */ /**\n                   * Related stack options\n                   * @name Highcharts.StackItemObject#options\n                   * @type {Highcharts.YAxisStackLabelsOptions}\n                   */ /**\n                      * Total value of the stacked data points\n                      * @name Highcharts.StackItemObject#total\n                      * @type {number}\n                      */ /**\n                         * Shared x value of the stack\n                         * @name Highcharts.StackItemObject#x\n                         * @type {number}\n                         */\n''; // keeps doclets above in JS file","map":{"version":3,"names":["T","format","SeriesRegistry","series","Series","U","destroyObjectProperties","fireEvent","isNumber","pick","StackItem","constructor","axis","options","negativeValue","x","stackOption","inverted","chart","reversed","isNegative","total","cumulative","points","hasValidPoints","stack","leftCliff","rightCliff","alignOptions","align","verticalAlign","y","textAlign","destroy","render","group","formatOption","str","formatter","call","label","attr","text","visibility","renderer","shape","useHTML","r","borderRadius","padding","styledMode","fill","backgroundColor","stroke","borderColor","borderWidth","css","style","added","add","labelrank","plotSizeY","setOffset","xOffset","width","boxBottom","boxTop","defaultX","xAxis","stackBox","getStackBox","labelBox","getBBox","isJustify","overflow","visible","adjustStackPosition","isInsidePlot","alignAttr","prototype","justifyDataLabel","rotation","rotationOriginX","rotationOriginY","height","crop","factorMap","bottom","middle","top","right","center","left","verticalAlignFactor","textAlignFactor","stackBoxProps","stackItem","totalStackValue","stacking","usePercentage","toPixels","translate","yZero","min","logarithmic","lin2log","Math","abs","neg","plotLeft","transB","plotTop"],"sources":["D:/Vamtage/angular-widget-project/node_modules/highcharts/es-modules/Core/Axis/Stacking/StackItem.js"],"sourcesContent":["/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport T from '../../Templating.js';\nconst { format } = T;\nimport SeriesRegistry from '../../Series/SeriesRegistry.js';\nconst { series: Series } = SeriesRegistry;\nimport U from '../../Utilities.js';\nconst { destroyObjectProperties, fireEvent, isNumber, pick } = U;\n/* *\n *\n *  Class\n *\n * */\n/**\n * The class for stacks. Each stack, on a specific X value and either negative\n * or positive, has its own stack item.\n * @private\n */\nclass StackItem {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    constructor(axis, options, negativeValue, x, stackOption) {\n        const inverted = axis.chart.inverted, reversed = axis.reversed;\n        this.axis = axis;\n        // The stack goes to the left either if the stack has negative value\n        // or when axis is reversed. XOR operator.\n        const isNegative = (this.isNegative = !!negativeValue !== !!reversed);\n        // Save the options to be able to style the label\n        this.options = options = options || {};\n        // Save the x value to be able to position the label later\n        this.x = x;\n        // Initialize total value\n        this.total = null;\n        this.cumulative = null;\n        // This will keep each points' extremes stored by series.index and point\n        // index\n        this.points = {};\n        this.hasValidPoints = false;\n        // Save the stack option on the series configuration object,\n        // and whether to treat it as percent\n        this.stack = stackOption;\n        this.leftCliff = 0;\n        this.rightCliff = 0;\n        // The align options and text align varies on whether the stack is\n        // negative and if the chart is inverted or not.\n        // First test the user supplied value, then use the dynamic.\n        this.alignOptions = {\n            align: options.align ||\n                (inverted ? (isNegative ? 'left' : 'right') : 'center'),\n            verticalAlign: options.verticalAlign ||\n                (inverted ? 'middle' : isNegative ? 'bottom' : 'top'),\n            y: options.y,\n            x: options.x\n        };\n        this.textAlign =\n            options.textAlign ||\n                (inverted ? (!isNegative ? 'left' : 'right') : 'center');\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * @private\n     */\n    destroy() {\n        destroyObjectProperties(this, this.axis);\n    }\n    /**\n     * Renders the stack total label and adds it to the stack label group.\n     * @private\n     */\n    render(group) {\n        const chart = this.axis.chart, options = this.options, formatOption = options.format, \n        // Format the text in the label.\n        str = formatOption ?\n            format(formatOption, this, chart) :\n            options.formatter.call(this);\n        // Change the text to reflect the new total and set visibility to hidden\n        // in case the serie is hidden\n        if (this.label) {\n            this.label.attr({ text: str, visibility: 'hidden' });\n        }\n        else {\n            // Create new label\n            this.label = chart.renderer.label(str, null, void 0, options.shape, void 0, void 0, options.useHTML, false, 'stack-labels');\n            const attr = {\n                r: options.borderRadius || 0,\n                text: str,\n                // set default padding to 5 as it is in datalabels #12308\n                padding: pick(options.padding, 5),\n                visibility: 'hidden' // hidden until setOffset is called\n            };\n            if (!chart.styledMode) {\n                attr.fill = options.backgroundColor;\n                attr.stroke = options.borderColor;\n                attr['stroke-width'] = options.borderWidth;\n                this.label.css(options.style || {});\n            }\n            this.label.attr(attr);\n            if (!this.label.added) {\n                this.label.add(group); // add to the labels-group\n            }\n        }\n        // Rank it higher than data labels (#8742)\n        this.label.labelrank = chart.plotSizeY;\n        fireEvent(this, 'afterRender');\n    }\n    /**\n     * Sets the offset that the stack has from the x value and repositions the\n     * label.\n     * @private\n     */\n    setOffset(xOffset, width, boxBottom, boxTop, defaultX, xAxis) {\n        const { alignOptions, axis, label, options, textAlign } = this, chart = axis.chart, stackBox = this.getStackBox({\n            xOffset,\n            width,\n            boxBottom,\n            boxTop,\n            defaultX,\n            xAxis\n        }), { verticalAlign } = alignOptions;\n        if (label && stackBox) {\n            const labelBox = label.getBBox(), padding = label.padding;\n            let isJustify = pick(options.overflow, 'justify') === 'justify', visible;\n            // Reset alignOptions property after justify #12337\n            alignOptions.x = options.x || 0;\n            alignOptions.y = options.y || 0;\n            // Calculate the adjusted Stack position, to take into consideration\n            // The size if the labelBox and vertical alignment as\n            // well as the text alignment. It's need to be done to work with\n            // default SVGLabel.align/justify methods.\n            const { x, y } = this.adjustStackPosition({\n                labelBox,\n                verticalAlign,\n                textAlign\n            });\n            stackBox.x -= x;\n            stackBox.y -= y;\n            // Align the label to the adjusted box.\n            label.align(alignOptions, false, stackBox);\n            // Check if label is inside the plotArea #12294\n            visible = chart.isInsidePlot(label.alignAttr.x + alignOptions.x + x, label.alignAttr.y + alignOptions.y + y);\n            if (!visible) {\n                isJustify = false;\n            }\n            if (isJustify) {\n                // Justify stackLabel into the alignBox\n                Series.prototype.justifyDataLabel.call(axis, label, alignOptions, label.alignAttr, labelBox, stackBox);\n            }\n            // Add attr to aviod the default animation of justifyDataLabel.\n            // Also add correct rotation with its rotation origin. #15129\n            label.attr({\n                x: label.alignAttr.x,\n                y: label.alignAttr.y,\n                rotation: options.rotation,\n                rotationOriginX: labelBox.width / 2,\n                rotationOriginY: labelBox.height / 2\n            });\n            // Check if the dataLabel should be visible.\n            if (pick(!isJustify && options.crop, true)) {\n                visible =\n                    isNumber(label.x) &&\n                        isNumber(label.y) &&\n                        chart.isInsidePlot(label.x - padding + (label.width || 0), label.y) &&\n                        chart.isInsidePlot(label.x + padding, label.y);\n            }\n            label[visible ? 'show' : 'hide']();\n        }\n        fireEvent(this, 'afterSetOffset', { xOffset, width });\n    }\n    /**\n     * Adjust the stack BBox position, to take into consideration the alignment\n     * of the dataLabel. This is necessary to make the stackDataLabel work with\n     * core methods like `SVGLabel.adjust` and `Series.justifyDataLabel`.\n     * @param AdjustStackPositionProps\n     * @return {{x: number, y: number}} Adjusted BBox position of the stack.\n     */\n    adjustStackPosition({ labelBox, verticalAlign, textAlign }) {\n        const factorMap = {\n            bottom: 0,\n            middle: 1,\n            top: 2,\n            right: 1,\n            center: 0,\n            left: -1\n        }, verticalAlignFactor = factorMap[verticalAlign], textAlignFactor = factorMap[textAlign];\n        return {\n            x: labelBox.width / 2 + (labelBox.width / 2) * textAlignFactor,\n            y: (labelBox.height / 2) * verticalAlignFactor\n        };\n    }\n    /**\n     * Get the bbox of the stack.\n     * @private\n     * @function Highcharts.StackItem#getStackBox\n     * @return {BBoxObject} The x, y, height, width of the stack.\n     */\n    getStackBox(stackBoxProps) {\n        const stackItem = this, axis = this.axis, chart = axis.chart, { boxTop, defaultX, xOffset, width, boxBottom } = stackBoxProps, totalStackValue = axis.stacking.usePercentage ?\n            100 :\n            pick(boxTop, this.total, 0), y = axis.toPixels(totalStackValue), xAxis = stackBoxProps.xAxis || chart.xAxis[0], x = pick(defaultX, xAxis.translate(this.x)) + xOffset, yZero = axis.toPixels(boxBottom ||\n            (isNumber(axis.min) &&\n                axis.logarithmic &&\n                axis.logarithmic.lin2log(axis.min)) ||\n            0), height = Math.abs(y - yZero), inverted = chart.inverted, neg = stackItem.isNegative;\n        return inverted ?\n            {\n                x: (neg ? y : y - height) - chart.plotLeft,\n                y: xAxis.height - x - width,\n                width: height,\n                height: width\n            } : {\n            x: x + xAxis.transB - chart.plotLeft,\n            y: (neg ? y - height : y) - chart.plotTop,\n            width: width,\n            height: height\n        };\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\nexport default StackItem;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Stack of data points\n *\n * @product highcharts\n *\n * @interface Highcharts.StackItemObject\n */ /**\n* Alignment settings\n* @name Highcharts.StackItemObject#alignOptions\n* @type {Highcharts.AlignObject}\n*/ /**\n* Related axis\n* @name Highcharts.StackItemObject#axis\n* @type {Highcharts.Axis}\n*/ /**\n* Cumulative value of the stacked data points\n* @name Highcharts.StackItemObject#cumulative\n* @type {number}\n*/ /**\n* True if on the negative side\n* @name Highcharts.StackItemObject#isNegative\n* @type {boolean}\n*/ /**\n* Related SVG element\n* @name Highcharts.StackItemObject#label\n* @type {Highcharts.SVGElement}\n*/ /**\n* Related stack options\n* @name Highcharts.StackItemObject#options\n* @type {Highcharts.YAxisStackLabelsOptions}\n*/ /**\n* Total value of the stacked data points\n* @name Highcharts.StackItemObject#total\n* @type {number}\n*/ /**\n* Shared x value of the stack\n* @name Highcharts.StackItemObject#x\n* @type {number}\n*/\n''; // keeps doclets above in JS file\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}