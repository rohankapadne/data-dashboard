{"ast":null,"code":"/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n\nimport A from '../Animation/AnimationUtilities.js';\nconst {\n  animate,\n  animObject,\n  setAnimation\n} = A;\nimport Axis from '../Axis/Axis.js';\nimport D from '../Defaults.js';\nconst {\n  defaultOptions,\n  defaultTime\n} = D;\nimport Templating from '../Templating.js';\nconst {\n  numberFormat\n} = Templating;\nimport Foundation from '../Foundation.js';\nconst {\n  registerEventOptions\n} = Foundation;\nimport H from '../Globals.js';\nconst {\n  charts,\n  doc,\n  marginNames,\n  svg,\n  win\n} = H;\nimport RendererRegistry from '../Renderer/RendererRegistry.js';\nimport Series from '../Series/Series.js';\nimport SeriesRegistry from '../Series/SeriesRegistry.js';\nconst {\n  seriesTypes\n} = SeriesRegistry;\nimport SVGRenderer from '../Renderer/SVG/SVGRenderer.js';\nimport Time from '../Time.js';\nimport U from '../Utilities.js';\nimport AST from '../Renderer/HTML/AST.js';\nconst {\n  addEvent,\n  attr,\n  createElement,\n  css,\n  defined,\n  diffObjects,\n  discardElement,\n  erase,\n  error,\n  extend,\n  find,\n  fireEvent,\n  getStyle,\n  isArray,\n  isNumber,\n  isObject,\n  isString,\n  merge,\n  objectEach,\n  pick,\n  pInt,\n  relativeLength,\n  removeEvent,\n  splat,\n  syncTimeout,\n  uniqueKey\n} = U;\n/* *\n *\n *  Class\n *\n * */\n/* eslint-disable no-invalid-this, valid-jsdoc */\n/**\n * The Chart class. The recommended constructor is {@link Highcharts#chart}.\n *\n * @example\n * let chart = Highcharts.chart('container', {\n *        title: {\n *               text: 'My chart'\n *        },\n *        series: [{\n *            data: [1, 3, 2, 4]\n *        }]\n * })\n *\n * @class\n * @name Highcharts.Chart\n *\n * @param {string|Highcharts.HTMLDOMElement} [renderTo]\n *        The DOM element to render to, or its id.\n *\n * @param {Highcharts.Options} options\n *        The chart options structure.\n *\n * @param {Highcharts.ChartCallbackFunction} [callback]\n *        Function to run when the chart has loaded and and all external images\n *        are loaded. Defining a\n *        [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n *        handler is equivalent.\n */\nclass Chart {\n  /**\n   * Factory function for basic charts.\n   *\n   * @example\n   * // Render a chart in to div#container\n   * let chart = Highcharts.chart('container', {\n   *     title: {\n   *         text: 'My chart'\n   *     },\n   *     series: [{\n   *         data: [1, 3, 2, 4]\n   *     }]\n   * });\n   *\n   * @function Highcharts.chart\n   *\n   * @param {string|Highcharts.HTMLDOMElement} [renderTo]\n   * The DOM element to render to, or its id.\n   *\n   * @param {Highcharts.Options} options\n   * The chart options structure.\n   *\n   * @param {Highcharts.ChartCallbackFunction} [callback]\n   * Function to run when the chart has loaded and and all external images are\n   * loaded. Defining a\n   * [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n   * handler is equivalent.\n   *\n   * @return {Highcharts.Chart}\n   * Returns the Chart object.\n   */\n  static chart(a, b, c) {\n    return new Chart(a, b, c);\n  }\n  constructor(a, b, c) {\n    this.axes = void 0;\n    this.axisOffset = void 0;\n    this.bounds = void 0;\n    this.chartHeight = void 0;\n    this.chartWidth = void 0;\n    this.clipBox = void 0;\n    this.colorCounter = void 0;\n    this.container = void 0;\n    this.eventOptions = void 0;\n    this.index = void 0;\n    this.isResizing = void 0;\n    this.labelCollectors = void 0;\n    this.margin = void 0;\n    this.numberFormatter = void 0;\n    this.options = void 0;\n    this.plotBox = void 0;\n    this.plotHeight = void 0;\n    this.plotLeft = void 0;\n    this.plotTop = void 0;\n    this.plotWidth = void 0;\n    this.pointCount = void 0;\n    this.pointer = void 0;\n    this.renderer = void 0;\n    this.renderTo = void 0;\n    this.series = void 0;\n    this.sharedClips = {};\n    this.spacing = void 0;\n    this.spacingBox = void 0;\n    this.symbolCounter = void 0;\n    this.time = void 0;\n    this.titleOffset = void 0;\n    this.userOptions = void 0;\n    this.xAxis = void 0;\n    this.yAxis = void 0;\n    this.zooming = void 0;\n    this.getArgs(a, b, c);\n  }\n  /* *\n   *\n   *  Functions\n   *\n   * */\n  /**\n   * Handle the arguments passed to the constructor.\n   *\n   * @private\n   * @function Highcharts.Chart#getArgs\n   *\n   * @param {...Array<*>} arguments\n   * All arguments for the constructor.\n   *\n   * @emits Highcharts.Chart#event:init\n   * @emits Highcharts.Chart#event:afterInit\n   */\n  getArgs(a, b, c) {\n    // Remove the optional first argument, renderTo, and\n    // set it on this.\n    if (isString(a) || a.nodeName) {\n      this.renderTo = a;\n      this.init(b, c);\n    } else {\n      this.init(a, b);\n    }\n  }\n  /**\n   * Function setting zoom options after chart init and after chart update.\n   * Offers support for deprecated options.\n   *\n   * @private\n   * @function Highcharts.Chart#setZoomOptions\n   */\n  setZoomOptions() {\n    const chart = this,\n      options = chart.options.chart,\n      zooming = options.zooming;\n    chart.zooming = {\n      ...zooming,\n      type: pick(options.zoomType, zooming.type),\n      key: pick(options.zoomKey, zooming.key),\n      pinchType: pick(options.pinchType, zooming.pinchType),\n      singleTouch: pick(options.zoomBySingleTouch, zooming.singleTouch, false),\n      resetButton: merge(zooming.resetButton, options.resetZoomButton)\n    };\n  }\n  /**\n   * Overridable function that initializes the chart. The constructor's\n   * arguments are passed on directly.\n   *\n   * @function Highcharts.Chart#init\n   *\n   * @param {Highcharts.Options} userOptions\n   *        Custom options.\n   *\n   * @param {Function} [callback]\n   *        Function to run when the chart has loaded and and all external\n   *        images are loaded.\n   *\n   *\n   * @emits Highcharts.Chart#event:init\n   * @emits Highcharts.Chart#event:afterInit\n   */\n  init(userOptions, callback) {\n    // Fire the event with a default function\n    fireEvent(this, 'init', {\n      args: arguments\n    }, function () {\n      const options = merge(defaultOptions, userOptions),\n        // do the merge\n        optionsChart = options.chart;\n      /**\n       * The original options given to the constructor or a chart factory\n       * like {@link Highcharts.chart} and {@link Highcharts.stockChart}.\n       * The original options are shallow copied to avoid mutation. The\n       * copy, `chart.userOptions`, may later be mutated to reflect\n       * updated options throughout the lifetime of the chart.\n       *\n       * For collections, like `series`, `xAxis` and `yAxis`, the chart\n       * user options should always be reflected by the item user option,\n       * so for example the following should always be true:\n       *\n       * `chart.xAxis[0].userOptions === chart.userOptions.xAxis[0]`\n       *\n       * @name Highcharts.Chart#userOptions\n       * @type {Highcharts.Options}\n       */\n      this.userOptions = extend({}, userOptions);\n      this.margin = [];\n      this.spacing = [];\n      // Pixel data bounds for touch zoom\n      this.bounds = {\n        h: {},\n        v: {}\n      };\n      // An array of functions that returns labels that should be\n      // considered for anti-collision\n      this.labelCollectors = [];\n      this.callback = callback;\n      this.isResizing = 0;\n      /**\n       * The options structure for the chart after merging\n       * {@link #defaultOptions} and {@link #userOptions}. It contains\n       * members for the sub elements like series, legend, tooltip etc.\n       *\n       * @name Highcharts.Chart#options\n       * @type {Highcharts.Options}\n       */\n      this.options = options;\n      /**\n       * All the axes in the chart.\n       *\n       * @see  Highcharts.Chart.xAxis\n       * @see  Highcharts.Chart.yAxis\n       *\n       * @name Highcharts.Chart#axes\n       * @type {Array<Highcharts.Axis>}\n       */\n      this.axes = [];\n      /**\n       * All the current series in the chart.\n       *\n       * @name Highcharts.Chart#series\n       * @type {Array<Highcharts.Series>}\n       */\n      this.series = [];\n      /**\n       * The `Time` object associated with the chart. Since v6.0.5,\n       * time settings can be applied individually for each chart. If\n       * no individual settings apply, the `Time` object is shared by\n       * all instances.\n       *\n       * @name Highcharts.Chart#time\n       * @type {Highcharts.Time}\n       */\n      this.time = userOptions.time && Object.keys(userOptions.time).length ? new Time(userOptions.time) : H.time;\n      /**\n       * Callback function to override the default function that formats\n       * all the numbers in the chart. Returns a string with the formatted\n       * number.\n       *\n       * @name Highcharts.Chart#numberFormatter\n       * @type {Highcharts.NumberFormatterCallbackFunction}\n       */\n      this.numberFormatter = optionsChart.numberFormatter || numberFormat;\n      /**\n       * Whether the chart is in styled mode, meaning all presentational\n       * attributes are avoided.\n       *\n       * @name Highcharts.Chart#styledMode\n       * @type {boolean}\n       */\n      this.styledMode = optionsChart.styledMode;\n      this.hasCartesianSeries = optionsChart.showAxes;\n      const chart = this;\n      /**\n       * Index position of the chart in the {@link Highcharts#charts}\n       * property.\n       *\n       * @name Highcharts.Chart#index\n       * @type {number}\n       * @readonly\n       */\n      chart.index = charts.length; // Add the chart to the global lookup\n      charts.push(chart);\n      H.chartCount++;\n      // Chart event handlers\n      registerEventOptions(this, optionsChart);\n      /**\n       * A collection of the X axes in the chart.\n       *\n       * @name Highcharts.Chart#xAxis\n       * @type {Array<Highcharts.Axis>}\n       */\n      chart.xAxis = [];\n      /**\n       * A collection of the Y axes in the chart.\n       *\n       * @name Highcharts.Chart#yAxis\n       * @type {Array<Highcharts.Axis>}\n       *\n       * @todo\n       * Make events official: Fire the event `afterInit`.\n       */\n      chart.yAxis = [];\n      chart.pointCount = chart.colorCounter = chart.symbolCounter = 0;\n      this.setZoomOptions();\n      // Fire after init but before first render, before axes and series\n      // have been initialized.\n      fireEvent(chart, 'afterInit');\n      chart.firstRender();\n    });\n  }\n  /**\n   * Internal function to unitialize an individual series.\n   *\n   * @private\n   * @function Highcharts.Chart#initSeries\n   */\n  initSeries(options) {\n    const chart = this,\n      optionsChart = chart.options.chart,\n      type = options.type || optionsChart.type,\n      SeriesClass = seriesTypes[type];\n    // No such series type\n    if (!SeriesClass) {\n      error(17, true, chart, {\n        missingModuleFor: type\n      });\n    }\n    const series = new SeriesClass();\n    if (typeof series.init === 'function') {\n      series.init(chart, options);\n    }\n    return series;\n  }\n  /**\n   * Internal function to set data for all series with enabled sorting.\n   *\n   * @private\n   * @function Highcharts.Chart#setSeriesData\n   */\n  setSeriesData() {\n    this.getSeriesOrderByLinks().forEach(function (series) {\n      // We need to set data for series with sorting after series init\n      if (!series.points && !series.data && series.enabledDataSorting) {\n        series.setData(series.options.data, false);\n      }\n    });\n  }\n  /**\n   * Sort and return chart series in order depending on the number of linked\n   * series.\n   *\n   * @private\n   * @function Highcharts.Series#getSeriesOrderByLinks\n   */\n  getSeriesOrderByLinks() {\n    return this.series.concat().sort(function (a, b) {\n      if (a.linkedSeries.length || b.linkedSeries.length) {\n        return b.linkedSeries.length - a.linkedSeries.length;\n      }\n      return 0;\n    });\n  }\n  /**\n   * Order all series or axes above a given index. When series or axes are\n   * added and ordered by configuration, only the last series is handled\n   * (#248, #1123, #2456, #6112). This function is called on series and axis\n   * initialization and destroy.\n   *\n   * @private\n   * @function Highcharts.Chart#orderItems\n   * @param {string} coll The collection name\n   * @param {number} [fromIndex=0]\n   * If this is given, only the series above this index are handled.\n   */\n  orderItems(coll, fromIndex = 0) {\n    const collection = this[coll],\n      // Item options should be reflected in chart.options.series,\n      // chart.options.yAxis etc\n      optionsArray = this.options[coll] = splat(this.options[coll]).slice(),\n      userOptionsArray = this.userOptions[coll] = this.userOptions[coll] ? splat(this.userOptions[coll]).slice() : [];\n    if (this.hasRendered) {\n      // Remove all above index\n      optionsArray.splice(fromIndex);\n      userOptionsArray.splice(fromIndex);\n    }\n    if (collection) {\n      for (let i = fromIndex, iEnd = collection.length; i < iEnd; ++i) {\n        const item = collection[i];\n        if (item) {\n          /**\n           * Contains the series' index in the `Chart.series` array.\n           *\n           * @name Highcharts.Series#index\n           * @type {number}\n           * @readonly\n           */\n          item.index = i;\n          if (item instanceof Series) {\n            item.name = item.getName();\n          }\n          if (!item.options.isInternal) {\n            optionsArray[i] = item.options;\n            userOptionsArray[i] = item.userOptions;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Check whether a given point is within the plot area.\n   *\n   * @function Highcharts.Chart#isInsidePlot\n   *\n   * @param {number} plotX\n   * Pixel x relative to the plot area.\n   *\n   * @param {number} plotY\n   * Pixel y relative to the plot area.\n   *\n   * @param {Highcharts.ChartIsInsideOptionsObject} [options]\n   * Options object.\n   *\n   * @return {boolean}\n   * Returns true if the given point is inside the plot area.\n   */\n  isInsidePlot(plotX, plotY, options = {}) {\n    const {\n      inverted,\n      plotBox,\n      plotLeft,\n      plotTop,\n      scrollablePlotBox\n    } = this;\n    let scrollLeft = 0,\n      scrollTop = 0;\n    if (options.visiblePlotOnly && this.scrollingContainer) {\n      ({\n        scrollLeft,\n        scrollTop\n      } = this.scrollingContainer);\n    }\n    const series = options.series,\n      box = options.visiblePlotOnly && scrollablePlotBox || plotBox,\n      x = options.inverted ? plotY : plotX,\n      y = options.inverted ? plotX : plotY,\n      e = {\n        x,\n        y,\n        isInsidePlot: true,\n        options\n      };\n    if (!options.ignoreX) {\n      const xAxis = series && (inverted && !this.polar ? series.yAxis : series.xAxis) || {\n        pos: plotLeft,\n        len: Infinity\n      };\n      const chartX = options.paneCoordinates ? xAxis.pos + x : plotLeft + x;\n      if (!(chartX >= Math.max(scrollLeft + plotLeft, xAxis.pos) && chartX <= Math.min(scrollLeft + plotLeft + box.width, xAxis.pos + xAxis.len))) {\n        e.isInsidePlot = false;\n      }\n    }\n    if (!options.ignoreY && e.isInsidePlot) {\n      const yAxis = !inverted && options.axis && !options.axis.isXAxis && options.axis || series && (inverted ? series.xAxis : series.yAxis) || {\n        pos: plotTop,\n        len: Infinity\n      };\n      const chartY = options.paneCoordinates ? yAxis.pos + y : plotTop + y;\n      if (!(chartY >= Math.max(scrollTop + plotTop, yAxis.pos) && chartY <= Math.min(scrollTop + plotTop + box.height, yAxis.pos + yAxis.len))) {\n        e.isInsidePlot = false;\n      }\n    }\n    fireEvent(this, 'afterIsInsidePlot', e);\n    return e.isInsidePlot;\n  }\n  /**\n   * Redraw the chart after changes have been done to the data, axis extremes\n   * chart size or chart elements. All methods for updating axes, series or\n   * points have a parameter for redrawing the chart. This is `true` by\n   * default. But in many cases you want to do more than one operation on the\n   * chart before redrawing, for example add a number of points. In those\n   * cases it is a waste of resources to redraw the chart for each new point\n   * added. So you add the points and call `chart.redraw()` after.\n   *\n   * @function Highcharts.Chart#redraw\n   *\n   * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n   * If or how to apply animation to the redraw. When `undefined`, it applies\n   * the animation that is set in the `chart.animation` option.\n   *\n   * @emits Highcharts.Chart#event:afterSetExtremes\n   * @emits Highcharts.Chart#event:beforeRedraw\n   * @emits Highcharts.Chart#event:predraw\n   * @emits Highcharts.Chart#event:redraw\n   * @emits Highcharts.Chart#event:render\n   * @emits Highcharts.Chart#event:updatedData\n   */\n  redraw(animation) {\n    fireEvent(this, 'beforeRedraw');\n    const chart = this,\n      axes = chart.hasCartesianSeries ? chart.axes : chart.colorAxis || [],\n      series = chart.series,\n      pointer = chart.pointer,\n      legend = chart.legend,\n      legendUserOptions = chart.userOptions.legend,\n      renderer = chart.renderer,\n      isHiddenChart = renderer.isHidden(),\n      afterRedraw = [];\n    let hasDirtyStacks,\n      hasStackedSeries,\n      i,\n      isDirtyBox = chart.isDirtyBox,\n      redrawLegend = chart.isDirtyLegend,\n      serie;\n    renderer.rootFontSize = renderer.boxWrapper.getStyle('font-size');\n    // Handle responsive rules, not only on resize (#6130)\n    if (chart.setResponsive) {\n      chart.setResponsive(false);\n    }\n    // Set the global animation. When chart.hasRendered is not true, the\n    // redraw call comes from a responsive rule and animation should not\n    // occur.\n    setAnimation(chart.hasRendered ? animation : false, chart);\n    if (isHiddenChart) {\n      chart.temporaryDisplay();\n    }\n    // Adjust title layout (reflow multiline text)\n    chart.layOutTitles(false);\n    // link stacked series\n    i = series.length;\n    while (i--) {\n      serie = series[i];\n      if (serie.options.stacking || serie.options.centerInCategory) {\n        hasStackedSeries = true;\n        if (serie.isDirty) {\n          hasDirtyStacks = true;\n          break;\n        }\n      }\n    }\n    if (hasDirtyStacks) {\n      // mark others as dirty\n      i = series.length;\n      while (i--) {\n        serie = series[i];\n        if (serie.options.stacking) {\n          serie.isDirty = true;\n        }\n      }\n    }\n    // Handle updated data in the series\n    series.forEach(function (serie) {\n      if (serie.isDirty) {\n        if (serie.options.legendType === 'point') {\n          if (typeof serie.updateTotals === 'function') {\n            serie.updateTotals();\n          }\n          redrawLegend = true;\n        } else if (legendUserOptions && (!!legendUserOptions.labelFormatter || legendUserOptions.labelFormat)) {\n          redrawLegend = true; // #2165\n        }\n      }\n\n      if (serie.isDirtyData) {\n        fireEvent(serie, 'updatedData');\n      }\n    });\n    // handle added or removed series\n    if (redrawLegend && legend && legend.options.enabled) {\n      // draw legend graphics\n      legend.render();\n      chart.isDirtyLegend = false;\n    }\n    // reset stacks\n    if (hasStackedSeries) {\n      chart.getStacks();\n    }\n    // set axes scales\n    axes.forEach(function (axis) {\n      axis.updateNames();\n      axis.setScale();\n    });\n    chart.getMargins(); // #3098\n    // If one axis is dirty, all axes must be redrawn (#792, #2169)\n    axes.forEach(function (axis) {\n      if (axis.isDirty) {\n        isDirtyBox = true;\n      }\n    });\n    // redraw axes\n    axes.forEach(function (axis) {\n      // Fire 'afterSetExtremes' only if extremes are set\n      const key = axis.min + ',' + axis.max;\n      if (axis.extKey !== key) {\n        // #821, #4452\n        axis.extKey = key;\n        // prevent a recursive call to chart.redraw() (#1119)\n        afterRedraw.push(function () {\n          fireEvent(axis, 'afterSetExtremes', extend(axis.eventArgs, axis.getExtremes())); // #747, #751\n          delete axis.eventArgs;\n        });\n      }\n      if (isDirtyBox || hasStackedSeries) {\n        axis.redraw();\n      }\n    });\n    // the plot areas size has changed\n    if (isDirtyBox) {\n      chart.drawChartBox();\n    }\n    // Fire an event before redrawing series, used by the boost module to\n    // clear previous series renderings.\n    fireEvent(chart, 'predraw');\n    // redraw affected series\n    series.forEach(function (serie) {\n      if ((isDirtyBox || serie.isDirty) && serie.visible) {\n        serie.redraw();\n      }\n      // Set it here, otherwise we will have unlimited 'updatedData' calls\n      // for a hidden series after setData(). Fixes #6012\n      serie.isDirtyData = false;\n    });\n    // move tooltip or reset\n    if (pointer) {\n      pointer.reset(true);\n    }\n    // redraw if canvas\n    renderer.draw();\n    // Fire the events\n    fireEvent(chart, 'redraw');\n    fireEvent(chart, 'render');\n    if (isHiddenChart) {\n      chart.temporaryDisplay(true);\n    }\n    // Fire callbacks that are put on hold until after the redraw\n    afterRedraw.forEach(function (callback) {\n      callback.call();\n    });\n  }\n  /**\n   * Get an axis, series or point object by `id` as given in the configuration\n   * options. Returns `undefined` if no item is found.\n   *\n   * @sample highcharts/plotoptions/series-id/\n   *         Get series by id\n   *\n   * @function Highcharts.Chart#get\n   *\n   * @param {string} id\n   * The id as given in the configuration options.\n   *\n   * @return {Highcharts.Axis|Highcharts.Series|Highcharts.Point|undefined}\n   * The retrieved item.\n   */\n  get(id) {\n    const series = this.series;\n    /**\n     * @private\n     */\n    function itemById(item) {\n      return item.id === id || item.options && item.options.id === id;\n    }\n    let ret =\n    // Search axes\n    find(this.axes, itemById) ||\n    // Search series\n    find(this.series, itemById);\n    // Search points\n    for (let i = 0; !ret && i < series.length; i++) {\n      ret = find(series[i].points || [], itemById);\n    }\n    return ret;\n  }\n  /**\n   * Create the Axis instances based on the config options.\n   *\n   * @private\n   * @function Highcharts.Chart#getAxes\n   * @emits Highcharts.Chart#event:afterGetAxes\n   * @emits Highcharts.Chart#event:getAxes\n   */\n  getAxes() {\n    const options = this.options;\n    fireEvent(this, 'getAxes');\n    for (const coll of ['xAxis', 'yAxis']) {\n      const arr = options[coll] = splat(options[coll] || {});\n      for (const axisOptions of arr) {\n        // eslint-disable-next-line no-new\n        new Axis(this, axisOptions, coll);\n      }\n    }\n    fireEvent(this, 'afterGetAxes');\n  }\n  /**\n   * Returns an array of all currently selected points in the chart. Points\n   * can be selected by clicking or programmatically by the\n   * {@link Highcharts.Point#select}\n   * function.\n   *\n   * @sample highcharts/plotoptions/series-allowpointselect-line/\n   *         Get selected points\n   *\n   * @function Highcharts.Chart#getSelectedPoints\n   *\n   * @return {Array<Highcharts.Point>}\n   *         The currently selected points.\n   */\n  getSelectedPoints() {\n    return this.series.reduce((acc, series) => {\n      // For one-to-one points inspect series.data in order to retrieve\n      // points outside the visible range (#6445). For grouped data,\n      // inspect the generated series.points.\n      series.getPointsCollection().forEach(point => {\n        if (pick(point.selectedStaging, point.selected)) {\n          acc.push(point);\n        }\n      });\n      return acc;\n    }, []);\n  }\n  /**\n   * Returns an array of all currently selected series in the chart. Series\n   * can be selected either programmatically by the\n   * {@link Highcharts.Series#select}\n   * function or by checking the checkbox next to the legend item if\n   * [series.showCheckBox](https://api.highcharts.com/highcharts/plotOptions.series.showCheckbox)\n   * is true.\n   *\n   * @sample highcharts/members/chart-getselectedseries/\n   *         Get selected series\n   *\n   * @function Highcharts.Chart#getSelectedSeries\n   *\n   * @return {Array<Highcharts.Series>}\n   *         The currently selected series.\n   */\n  getSelectedSeries() {\n    return this.series.filter(function (serie) {\n      return serie.selected;\n    });\n  }\n  /**\n   * Set a new title or subtitle for the chart.\n   *\n   * @sample highcharts/members/chart-settitle/\n   *         Set title text and styles\n   *\n   * @function Highcharts.Chart#setTitle\n   *\n   * @param {Highcharts.TitleOptions} [titleOptions]\n   *        New title options. The title text itself is set by the\n   *        `titleOptions.text` property.\n   *\n   * @param {Highcharts.SubtitleOptions} [subtitleOptions]\n   *        New subtitle options. The subtitle text itself is set by the\n   *        `subtitleOptions.text` property.\n   *\n   * @param {boolean} [redraw]\n   *        Whether to redraw the chart or wait for a later call to\n   *        `chart.redraw()`.\n   */\n  setTitle(titleOptions, subtitleOptions, redraw) {\n    this.applyDescription('title', titleOptions);\n    this.applyDescription('subtitle', subtitleOptions);\n    // The initial call also adds the caption. On update, chart.update will\n    // relay to Chart.setCaption.\n    this.applyDescription('caption', void 0);\n    this.layOutTitles(redraw);\n  }\n  /**\n   * Apply a title, subtitle or caption for the chart\n   *\n   * @private\n   * @function Highcharts.Chart#applyDescription\n   * @param name {string}\n   * Either title, subtitle or caption\n   * @param {Highcharts.TitleOptions|Highcharts.SubtitleOptions|Highcharts.CaptionOptions|undefined} explicitOptions\n   * The options to set, will be merged with default options.\n   */\n  applyDescription(name, explicitOptions) {\n    const chart = this;\n    // Merge default options with explicit options\n    const options = this.options[name] = merge(this.options[name], explicitOptions);\n    let elem = this[name];\n    if (elem && explicitOptions) {\n      this[name] = elem = elem.destroy(); // remove old\n    }\n\n    if (options && !elem) {\n      elem = this.renderer.text(options.text, 0, 0, options.useHTML).attr({\n        align: options.align,\n        'class': 'highcharts-' + name,\n        zIndex: options.zIndex || 4\n      }).add();\n      // Update methods, relay to `applyDescription`\n      elem.update = function (updateOptions, redraw) {\n        chart.applyDescription(name, updateOptions);\n        chart.layOutTitles(redraw);\n      };\n      // Presentational\n      if (!this.styledMode) {\n        elem.css(extend(name === 'title' ? {\n          // #2944\n          fontSize: this.options.isStock ? '1em' : '1.2em'\n        } : {}, options.style));\n      }\n      /**\n       * The chart title. The title has an `update` method that allows\n       * modifying the options directly or indirectly via\n       * `chart.update`.\n       *\n       * @sample highcharts/members/title-update/\n       *         Updating titles\n       *\n       * @name Highcharts.Chart#title\n       * @type {Highcharts.TitleObject}\n       */\n      /**\n       * The chart subtitle. The subtitle has an `update` method that\n       * allows modifying the options directly or indirectly via\n       * `chart.update`.\n       *\n       * @name Highcharts.Chart#subtitle\n       * @type {Highcharts.SubtitleObject}\n       */\n      this[name] = elem;\n    }\n  }\n  /**\n   * Internal function to lay out the chart title, subtitle and caption, and\n   * cache the full offset height for use in `getMargins`. The result is\n   * stored in `this.titleOffset`.\n   *\n   * @private\n   * @function Highcharts.Chart#layOutTitles\n   *\n   * @param {boolean} [redraw=true]\n   * @emits Highcharts.Chart#event:afterLayOutTitles\n   */\n  layOutTitles(redraw = true) {\n    const titleOffset = [0, 0, 0],\n      renderer = this.renderer,\n      spacingBox = this.spacingBox;\n    // Lay out the title and the subtitle respectively\n    ['title', 'subtitle', 'caption'].forEach(function (key) {\n      const title = this[key],\n        titleOptions = this.options[key],\n        verticalAlign = titleOptions.verticalAlign || 'top',\n        offset = key === 'title' ? verticalAlign === 'top' ? -3 : 0 :\n        // Floating subtitle (#6574)\n        verticalAlign === 'top' ? titleOffset[0] + 2 : 0;\n      if (title) {\n        title.css({\n          width: (titleOptions.width || spacingBox.width + (titleOptions.widthAdjust || 0)) + 'px'\n        });\n        const baseline = renderer.fontMetrics(title).b,\n          // Skip the cache for HTML (#3481, #11666)\n          height = Math.round(title.getBBox(titleOptions.useHTML).height);\n        title.align(extend({\n          y: verticalAlign === 'bottom' ? baseline : offset + baseline,\n          height\n        }, titleOptions), false, 'spacingBox');\n        if (!titleOptions.floating) {\n          if (verticalAlign === 'top') {\n            titleOffset[0] = Math.ceil(titleOffset[0] + height);\n          } else if (verticalAlign === 'bottom') {\n            titleOffset[2] = Math.ceil(titleOffset[2] + height);\n          }\n        }\n      }\n    }, this);\n    // Handle title.margin and caption.margin\n    if (titleOffset[0] && (this.options.title.verticalAlign || 'top') === 'top') {\n      titleOffset[0] += this.options.title.margin;\n    }\n    if (titleOffset[2] && this.options.caption.verticalAlign === 'bottom') {\n      titleOffset[2] += this.options.caption.margin;\n    }\n    const requiresDirtyBox = !this.titleOffset || this.titleOffset.join(',') !== titleOffset.join(',');\n    // Used in getMargins\n    this.titleOffset = titleOffset;\n    fireEvent(this, 'afterLayOutTitles');\n    if (!this.isDirtyBox && requiresDirtyBox) {\n      this.isDirtyBox = this.isDirtyLegend = requiresDirtyBox;\n      // Redraw if necessary (#2719, #2744)\n      if (this.hasRendered && redraw && this.isDirtyBox) {\n        this.redraw();\n      }\n    }\n  }\n  /**\n   * Internal function to get the available size of the container element\n   *\n   * @private\n   * @function Highcharts.Chart#getContainerBox\n   */\n  getContainerBox() {\n    return {\n      width: getStyle(this.renderTo, 'width', true) || 0,\n      height: getStyle(this.renderTo, 'height', true) || 0\n    };\n  }\n  /**\n   * Internal function to get the chart width and height according to options\n   * and container size. Sets {@link Chart.chartWidth} and\n   * {@link Chart.chartHeight}.\n   *\n   * @private\n   * @function Highcharts.Chart#getChartSize\n   */\n  getChartSize() {\n    const chart = this,\n      optionsChart = chart.options.chart,\n      widthOption = optionsChart.width,\n      heightOption = optionsChart.height,\n      containerBox = chart.getContainerBox();\n    /**\n     * The current pixel width of the chart.\n     *\n     * @name Highcharts.Chart#chartWidth\n     * @type {number}\n     */\n    chart.chartWidth = Math.max(\n    // #1393\n    0, widthOption || containerBox.width || 600 // #1460\n    );\n    /**\n     * The current pixel height of the chart.\n     *\n     * @name Highcharts.Chart#chartHeight\n     * @type {number}\n     */\n    chart.chartHeight = Math.max(0, relativeLength(heightOption, chart.chartWidth) || (containerBox.height > 1 ? containerBox.height : 400));\n    chart.containerBox = containerBox;\n  }\n  /**\n   * If the renderTo element has no offsetWidth, most likely one or more of\n   * its parents are hidden. Loop up the DOM tree to temporarily display the\n   * parents, then save the original display properties, and when the true\n   * size is retrieved, reset them. Used on first render and on redraws.\n   *\n   * @private\n   * @function Highcharts.Chart#temporaryDisplay\n   *\n   * @param {boolean} [revert]\n   * Revert to the saved original styles.\n   */\n  temporaryDisplay(revert) {\n    let node = this.renderTo,\n      tempStyle;\n    if (!revert) {\n      while (node && node.style) {\n        // When rendering to a detached node, it needs to be temporarily\n        // attached in order to read styling and bounding boxes (#5783,\n        // #7024).\n        if (!doc.body.contains(node) && !node.parentNode) {\n          node.hcOrigDetached = true;\n          doc.body.appendChild(node);\n        }\n        if (getStyle(node, 'display', false) === 'none' || node.hcOricDetached) {\n          node.hcOrigStyle = {\n            display: node.style.display,\n            height: node.style.height,\n            overflow: node.style.overflow\n          };\n          tempStyle = {\n            display: 'block',\n            overflow: 'hidden'\n          };\n          if (node !== this.renderTo) {\n            tempStyle.height = 0;\n          }\n          css(node, tempStyle);\n          // If it still doesn't have an offset width after setting\n          // display to block, it probably has an !important priority\n          // #2631, 6803\n          if (!node.offsetWidth) {\n            node.style.setProperty('display', 'block', 'important');\n          }\n        }\n        node = node.parentNode;\n        if (node === doc.body) {\n          break;\n        }\n      }\n    } else {\n      while (node && node.style) {\n        if (node.hcOrigStyle) {\n          css(node, node.hcOrigStyle);\n          delete node.hcOrigStyle;\n        }\n        if (node.hcOrigDetached) {\n          doc.body.removeChild(node);\n          node.hcOrigDetached = false;\n        }\n        node = node.parentNode;\n      }\n    }\n  }\n  /**\n   * Set the {@link Chart.container|chart container's} class name, in\n   * addition to `highcharts-container`.\n   *\n   * @function Highcharts.Chart#setClassName\n   *\n   * @param {string} [className]\n   * The additional class name.\n   */\n  setClassName(className) {\n    this.container.className = 'highcharts-container ' + (className || '');\n  }\n  /**\n   * Get the containing element, determine the size and create the inner\n   * container div to hold the chart.\n   *\n   * @private\n   * @function Highcharts.Chart#afterGetContainer\n   * @emits Highcharts.Chart#event:afterGetContainer\n   */\n  getContainer() {\n    const chart = this,\n      options = chart.options,\n      optionsChart = options.chart,\n      indexAttrName = 'data-highcharts-chart',\n      containerId = uniqueKey();\n    let containerStyle,\n      renderTo = chart.renderTo;\n    if (!renderTo) {\n      chart.renderTo = renderTo = optionsChart.renderTo;\n    }\n    if (isString(renderTo)) {\n      chart.renderTo = renderTo = doc.getElementById(renderTo);\n    }\n    // Display an error if the renderTo is wrong\n    if (!renderTo) {\n      error(13, true, chart);\n    }\n    // If the container already holds a chart, destroy it. The check for\n    // hasRendered is there because web pages that are saved to disk from\n    // the browser, will preserve the data-highcharts-chart attribute and\n    // the SVG contents, but not an interactive chart. So in this case,\n    // charts[oldChartIndex] will point to the wrong chart if any (#2609).\n    const oldChartIndex = pInt(attr(renderTo, indexAttrName));\n    if (isNumber(oldChartIndex) && charts[oldChartIndex] && charts[oldChartIndex].hasRendered) {\n      charts[oldChartIndex].destroy();\n    }\n    // Make a reference to the chart from the div\n    attr(renderTo, indexAttrName, chart.index);\n    // remove previous chart\n    renderTo.innerHTML = AST.emptyHTML;\n    // If the container doesn't have an offsetWidth, it has or is a child of\n    // a node that has display:none. We need to temporarily move it out to a\n    // visible state to determine the size, else the legend and tooltips\n    // won't render properly. The skipClone option is used in sparklines as\n    // a micro optimization, saving about 1-2 ms each chart.\n    if (!optionsChart.skipClone && !renderTo.offsetWidth) {\n      chart.temporaryDisplay();\n    }\n    // get the width and height\n    chart.getChartSize();\n    const chartWidth = chart.chartWidth;\n    const chartHeight = chart.chartHeight;\n    // Allow table cells and flex-boxes to shrink without the chart blocking\n    // them out (#6427)\n    css(renderTo, {\n      overflow: 'hidden'\n    });\n    // Create the inner container\n    if (!chart.styledMode) {\n      containerStyle = extend({\n        position: 'relative',\n        // needed for context menu (avoidscrollbars) and content\n        // overflow in IE\n        overflow: 'hidden',\n        width: chartWidth + 'px',\n        height: chartHeight + 'px',\n        textAlign: 'left',\n        lineHeight: 'normal',\n        zIndex: 0,\n        '-webkit-tap-highlight-color': 'rgba(0,0,0,0)',\n        userSelect: 'none',\n        'touch-action': 'manipulation',\n        outline: 'none'\n      }, optionsChart.style || {});\n    }\n    /**\n     * The containing HTML element of the chart. The container is\n     * dynamically inserted into the element given as the `renderTo`\n     * parameter in the {@link Highcharts#chart} constructor.\n     *\n     * @name Highcharts.Chart#container\n     * @type {Highcharts.HTMLDOMElement}\n     */\n    const container = createElement('div', {\n      id: containerId\n    }, containerStyle, renderTo);\n    chart.container = container;\n    // cache the cursor (#1650)\n    chart._cursor = container.style.cursor;\n    // Initialize the renderer\n    const Renderer = optionsChart.renderer || !svg ? RendererRegistry.getRendererType(optionsChart.renderer) : SVGRenderer;\n    /**\n     * The renderer instance of the chart. Each chart instance has only one\n     * associated renderer.\n     *\n     * @name Highcharts.Chart#renderer\n     * @type {Highcharts.SVGRenderer}\n     */\n    chart.renderer = new Renderer(container, chartWidth, chartHeight, void 0, optionsChart.forExport, options.exporting && options.exporting.allowHTML, chart.styledMode);\n    chart.containerBox = chart.getContainerBox();\n    // Set the initial animation from the options\n    setAnimation(void 0, chart);\n    chart.setClassName(optionsChart.className);\n    if (!chart.styledMode) {\n      chart.renderer.setStyle(optionsChart.style);\n    } else {\n      // Initialize definitions\n      for (const key in options.defs) {\n        // eslint-disable-line guard-for-in\n        this.renderer.definition(options.defs[key]);\n      }\n    }\n    // Add a reference to the charts index\n    chart.renderer.chartIndex = chart.index;\n    fireEvent(this, 'afterGetContainer');\n  }\n  /**\n   * Calculate margins by rendering axis labels in a preliminary position.\n   * Title, subtitle and legend have already been rendered at this stage, but\n   * will be moved into their final positions.\n   *\n   * @private\n   * @function Highcharts.Chart#getMargins\n   * @emits Highcharts.Chart#event:getMargins\n   */\n  getMargins(skipAxes) {\n    const {\n      spacing,\n      margin,\n      titleOffset\n    } = this;\n    this.resetMargins();\n    // Adjust for title and subtitle\n    if (titleOffset[0] && !defined(margin[0])) {\n      this.plotTop = Math.max(this.plotTop, titleOffset[0] + spacing[0]);\n    }\n    if (titleOffset[2] && !defined(margin[2])) {\n      this.marginBottom = Math.max(this.marginBottom, titleOffset[2] + spacing[2]);\n    }\n    // Adjust for legend\n    if (this.legend && this.legend.display) {\n      this.legend.adjustMargins(margin, spacing);\n    }\n    fireEvent(this, 'getMargins');\n    if (!skipAxes) {\n      this.getAxisMargins();\n    }\n  }\n  /**\n   * @private\n   * @function Highcharts.Chart#getAxisMargins\n   */\n  getAxisMargins() {\n    const chart = this,\n      // [top, right, bottom, left]\n      axisOffset = chart.axisOffset = [0, 0, 0, 0],\n      colorAxis = chart.colorAxis,\n      margin = chart.margin,\n      getOffset = function (axes) {\n        axes.forEach(function (axis) {\n          if (axis.visible) {\n            axis.getOffset();\n          }\n        });\n      };\n    // pre-render axes to get labels offset width\n    if (chart.hasCartesianSeries) {\n      getOffset(chart.axes);\n    } else if (colorAxis && colorAxis.length) {\n      getOffset(colorAxis);\n    }\n    // Add the axis offsets\n    marginNames.forEach(function (m, side) {\n      if (!defined(margin[side])) {\n        chart[m] += axisOffset[side];\n      }\n    });\n    chart.setChartSize();\n  }\n  /**\n   * Return the current options of the chart, but only those that differ from\n   * default options. Items that can be either an object or an array of\n   * objects, like `series`, `xAxis` and `yAxis`, are always returned as\n   * array.\n   *\n   * @sample highcharts/members/chart-getoptions\n   *\n   * @function Highcharts.Chart#getOptions\n   *\n   * @since 11.1.0\n   */\n  getOptions() {\n    return diffObjects(this.userOptions, defaultOptions);\n  }\n  /**\n   * Reflows the chart to its container. By default, the Resize Observer is\n   * attached to the chart's div which allows to reflows the chart\n   * automatically to its container, as per the\n   * [chart.reflow](https://api.highcharts.com/highcharts/chart.reflow)\n   * option.\n   *\n   * @sample highcharts/chart/events-container/\n   *         Pop up and reflow\n   *\n   * @function Highcharts.Chart#reflow\n   *\n   * @param {global.Event} [e]\n   *        Event arguments. Used primarily when the function is called\n   *        internally as a response to window resize.\n   */\n  reflow(e) {\n    const chart = this,\n      oldBox = chart.containerBox,\n      containerBox = chart.getContainerBox();\n    delete chart.pointer.chartPosition;\n    // Width and height checks for display:none. Target is doc in Opera\n    // and win in Firefox, Chrome and IE9.\n    if (!chart.isPrinting && !chart.isResizing && oldBox &&\n    // When fired by resize observer inside hidden container\n    containerBox.width) {\n      if (containerBox.width !== oldBox.width || containerBox.height !== oldBox.height) {\n        U.clearTimeout(chart.reflowTimeout);\n        // When called from window.resize, e is set, else it's called\n        // directly (#2224)\n        chart.reflowTimeout = syncTimeout(function () {\n          // Set size, it may have been destroyed in the meantime\n          // (#1257)\n          if (chart.container) {\n            chart.setSize(void 0, void 0, false);\n          }\n        }, e ? 100 : 0);\n      }\n      chart.containerBox = containerBox;\n    }\n  }\n  /**\n   * Toggle the event handlers necessary for auto resizing, depending on the\n   * `chart.reflow` option.\n   *\n   * @private\n   * @function Highcharts.Chart#setReflow\n   */\n  setReflow() {\n    const chart = this;\n    const runReflow = e => {\n      if (chart.options?.chart.reflow && chart.hasLoaded) {\n        chart.reflow(e);\n      }\n    };\n    if (typeof ResizeObserver === 'function') {\n      new ResizeObserver(runReflow).observe(chart.renderTo);\n      // Fallback for more legacy browser versions.\n    } else {\n      const unbind = addEvent(win, 'resize', runReflow);\n      addEvent(this, 'destroy', unbind);\n    }\n  }\n  /**\n   * Resize the chart to a given width and height. In order to set the width\n   * only, the height argument may be skipped. To set the height only, pass\n   * `undefined` for the width.\n   *\n   * @sample highcharts/members/chart-setsize-button/\n   *         Test resizing from buttons\n   * @sample highcharts/members/chart-setsize-jquery-resizable/\n   *         Add a jQuery UI resizable\n   * @sample stock/members/chart-setsize/\n   *         Highcharts Stock with UI resizable\n   *\n   * @function Highcharts.Chart#setSize\n   *\n   * @param {number|null} [width]\n   *        The new pixel width of the chart. Since v4.2.6, the argument can\n   *        be `undefined` in order to preserve the current value (when\n   *        setting height only), or `null` to adapt to the width of the\n   *        containing element.\n   *\n   * @param {number|null} [height]\n   *        The new pixel height of the chart. Since v4.2.6, the argument can\n   *        be `undefined` in order to preserve the current value, or `null`\n   *        in order to adapt to the height of the containing element.\n   *\n   * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n   *        Whether and how to apply animation. When `undefined`, it applies\n   *        the animation that is set in the `chart.animation` option.\n   *\n   *\n   * @emits Highcharts.Chart#event:endResize\n   * @emits Highcharts.Chart#event:resize\n   */\n  setSize(width, height, animation) {\n    const chart = this,\n      renderer = chart.renderer;\n    // Handle the isResizing counter\n    chart.isResizing += 1;\n    // set the animation for the current process\n    setAnimation(animation, chart);\n    const globalAnimation = renderer.globalAnimation;\n    chart.oldChartHeight = chart.chartHeight;\n    chart.oldChartWidth = chart.chartWidth;\n    if (typeof width !== 'undefined') {\n      chart.options.chart.width = width;\n    }\n    if (typeof height !== 'undefined') {\n      chart.options.chart.height = height;\n    }\n    chart.getChartSize();\n    // Resize the container with the global animation applied if enabled\n    // (#2503)\n    if (!chart.styledMode) {\n      (globalAnimation ? animate : css)(chart.container, {\n        width: chart.chartWidth + 'px',\n        height: chart.chartHeight + 'px'\n      }, globalAnimation);\n    }\n    chart.setChartSize(true);\n    renderer.setSize(chart.chartWidth, chart.chartHeight, globalAnimation);\n    // handle axes\n    chart.axes.forEach(function (axis) {\n      axis.isDirty = true;\n      axis.setScale();\n    });\n    chart.isDirtyLegend = true; // force legend redraw\n    chart.isDirtyBox = true; // force redraw of plot and chart border\n    chart.layOutTitles(); // #2857\n    chart.getMargins();\n    chart.redraw(globalAnimation);\n    chart.oldChartHeight = null;\n    fireEvent(chart, 'resize');\n    // Fire endResize and set isResizing back. If animation is disabled,\n    // fire without delay, but in a new thread to avoid triggering the\n    // resize observer (#19027).\n    setTimeout(() => {\n      if (chart) {\n        fireEvent(chart, 'endResize', void 0, () => {\n          chart.isResizing -= 1;\n        });\n      }\n    }, animObject(globalAnimation).duration);\n  }\n  /**\n   * Set the public chart properties. This is done before and after the\n   * pre-render to determine margin sizes.\n   *\n   * @private\n   * @function Highcharts.Chart#setChartSize\n   * @emits Highcharts.Chart#event:afterSetChartSize\n   */\n  setChartSize(skipAxes) {\n    const chart = this,\n      inverted = chart.inverted,\n      renderer = chart.renderer,\n      chartWidth = chart.chartWidth,\n      chartHeight = chart.chartHeight,\n      optionsChart = chart.options.chart,\n      spacing = chart.spacing,\n      clipOffset = chart.clipOffset;\n    let plotLeft, plotTop, plotWidth, plotHeight;\n    /**\n     * The current left position of the plot area in pixels.\n     *\n     * @name Highcharts.Chart#plotLeft\n     * @type {number}\n     */\n    chart.plotLeft = plotLeft = Math.round(chart.plotLeft);\n    /**\n     * The current top position of the plot area in pixels.\n     *\n     * @name Highcharts.Chart#plotTop\n     * @type {number}\n     */\n    chart.plotTop = plotTop = Math.round(chart.plotTop);\n    /**\n     * The current width of the plot area in pixels.\n     *\n     * @name Highcharts.Chart#plotWidth\n     * @type {number}\n     */\n    chart.plotWidth = plotWidth = Math.max(0, Math.round(chartWidth - plotLeft - chart.marginRight));\n    /**\n     * The current height of the plot area in pixels.\n     *\n     * @name Highcharts.Chart#plotHeight\n     * @type {number}\n     */\n    chart.plotHeight = plotHeight = Math.max(0, Math.round(chartHeight - plotTop - chart.marginBottom));\n    chart.plotSizeX = inverted ? plotHeight : plotWidth;\n    chart.plotSizeY = inverted ? plotWidth : plotHeight;\n    chart.plotBorderWidth = optionsChart.plotBorderWidth || 0;\n    // Set boxes used for alignment\n    chart.spacingBox = renderer.spacingBox = {\n      x: spacing[3],\n      y: spacing[0],\n      width: chartWidth - spacing[3] - spacing[1],\n      height: chartHeight - spacing[0] - spacing[2]\n    };\n    chart.plotBox = renderer.plotBox = {\n      x: plotLeft,\n      y: plotTop,\n      width: plotWidth,\n      height: plotHeight\n    };\n    const plotBorderWidth = 2 * Math.floor(chart.plotBorderWidth / 2),\n      clipX = Math.ceil(Math.max(plotBorderWidth, clipOffset[3]) / 2),\n      clipY = Math.ceil(Math.max(plotBorderWidth, clipOffset[0]) / 2);\n    chart.clipBox = {\n      x: clipX,\n      y: clipY,\n      width: Math.floor(chart.plotSizeX - Math.max(plotBorderWidth, clipOffset[1]) / 2 - clipX),\n      height: Math.max(0, Math.floor(chart.plotSizeY - Math.max(plotBorderWidth, clipOffset[2]) / 2 - clipY))\n    };\n    if (!skipAxes) {\n      chart.axes.forEach(function (axis) {\n        axis.setAxisSize();\n        axis.setAxisTranslation();\n      });\n      renderer.alignElements();\n    }\n    fireEvent(chart, 'afterSetChartSize', {\n      skipAxes: skipAxes\n    });\n  }\n  /**\n   * Initial margins before auto size margins are applied.\n   *\n   * @private\n   * @function Highcharts.Chart#resetMargins\n   */\n  resetMargins() {\n    fireEvent(this, 'resetMargins');\n    const chart = this,\n      chartOptions = chart.options.chart;\n    // Create margin and spacing array\n    ['margin', 'spacing'].forEach(function splashArrays(target) {\n      const value = chartOptions[target],\n        values = isObject(value) ? value : [value, value, value, value];\n      ['Top', 'Right', 'Bottom', 'Left'].forEach(function (sideName, side) {\n        chart[target][side] = pick(chartOptions[target + sideName], values[side]);\n      });\n    });\n    // Set margin names like chart.plotTop, chart.plotLeft,\n    // chart.marginRight, chart.marginBottom.\n    marginNames.forEach(function (m, side) {\n      chart[m] = pick(chart.margin[side], chart.spacing[side]);\n    });\n    chart.axisOffset = [0, 0, 0, 0]; // top, right, bottom, left\n    chart.clipOffset = [0, 0, 0, 0];\n  }\n  /**\n   * Internal function to draw or redraw the borders and backgrounds for chart\n   * and plot area.\n   *\n   * @private\n   * @function Highcharts.Chart#drawChartBox\n   * @emits Highcharts.Chart#event:afterDrawChartBox\n   */\n  drawChartBox() {\n    const chart = this,\n      optionsChart = chart.options.chart,\n      renderer = chart.renderer,\n      chartWidth = chart.chartWidth,\n      chartHeight = chart.chartHeight,\n      styledMode = chart.styledMode,\n      plotBGImage = chart.plotBGImage,\n      chartBackgroundColor = optionsChart.backgroundColor,\n      plotBackgroundColor = optionsChart.plotBackgroundColor,\n      plotBackgroundImage = optionsChart.plotBackgroundImage,\n      plotLeft = chart.plotLeft,\n      plotTop = chart.plotTop,\n      plotWidth = chart.plotWidth,\n      plotHeight = chart.plotHeight,\n      plotBox = chart.plotBox,\n      clipRect = chart.clipRect,\n      clipBox = chart.clipBox;\n    let chartBackground = chart.chartBackground,\n      plotBackground = chart.plotBackground,\n      plotBorder = chart.plotBorder,\n      chartBorderWidth,\n      mgn,\n      bgAttr,\n      verb = 'animate';\n    // Chart area\n    if (!chartBackground) {\n      chart.chartBackground = chartBackground = renderer.rect().addClass('highcharts-background').add();\n      verb = 'attr';\n    }\n    if (!styledMode) {\n      // Presentational\n      chartBorderWidth = optionsChart.borderWidth || 0;\n      mgn = chartBorderWidth + (optionsChart.shadow ? 8 : 0);\n      bgAttr = {\n        fill: chartBackgroundColor || 'none'\n      };\n      if (chartBorderWidth || chartBackground['stroke-width']) {\n        // #980\n        bgAttr.stroke = optionsChart.borderColor;\n        bgAttr['stroke-width'] = chartBorderWidth;\n      }\n      chartBackground.attr(bgAttr).shadow(optionsChart.shadow);\n    } else {\n      chartBorderWidth = mgn = chartBackground.strokeWidth();\n    }\n    chartBackground[verb]({\n      x: mgn / 2,\n      y: mgn / 2,\n      width: chartWidth - mgn - chartBorderWidth % 2,\n      height: chartHeight - mgn - chartBorderWidth % 2,\n      r: optionsChart.borderRadius\n    });\n    // Plot background\n    verb = 'animate';\n    if (!plotBackground) {\n      verb = 'attr';\n      chart.plotBackground = plotBackground = renderer.rect().addClass('highcharts-plot-background').add();\n    }\n    plotBackground[verb](plotBox);\n    if (!styledMode) {\n      // Presentational attributes for the background\n      plotBackground.attr({\n        fill: plotBackgroundColor || 'none'\n      }).shadow(optionsChart.plotShadow);\n      // Create the background image\n      if (plotBackgroundImage) {\n        if (!plotBGImage) {\n          chart.plotBGImage = renderer.image(plotBackgroundImage, plotLeft, plotTop, plotWidth, plotHeight).add();\n        } else {\n          if (plotBackgroundImage !== plotBGImage.attr('href')) {\n            plotBGImage.attr('href', plotBackgroundImage);\n          }\n          plotBGImage.animate(plotBox);\n        }\n      }\n    }\n    // Plot clip\n    if (!clipRect) {\n      chart.clipRect = renderer.clipRect(clipBox);\n    } else {\n      clipRect.animate({\n        width: clipBox.width,\n        height: clipBox.height\n      });\n    }\n    // Plot area border\n    verb = 'animate';\n    if (!plotBorder) {\n      verb = 'attr';\n      chart.plotBorder = plotBorder = renderer.rect().addClass('highcharts-plot-border').attr({\n        zIndex: 1 // Above the grid\n      }).add();\n    }\n    if (!styledMode) {\n      // Presentational\n      plotBorder.attr({\n        stroke: optionsChart.plotBorderColor,\n        'stroke-width': optionsChart.plotBorderWidth || 0,\n        fill: 'none'\n      });\n    }\n    plotBorder[verb](plotBorder.crisp({\n      x: plotLeft,\n      y: plotTop,\n      width: plotWidth,\n      height: plotHeight\n    }, -plotBorder.strokeWidth())); // #3282 plotBorder should be negative;\n    // reset\n    chart.isDirtyBox = false;\n    fireEvent(this, 'afterDrawChartBox');\n  }\n  /**\n   * Detect whether a certain chart property is needed based on inspecting its\n   * options and series. This mainly applies to the chart.inverted property,\n   * and in extensions to the chart.angular and chart.polar properties.\n   *\n   * @private\n   * @function Highcharts.Chart#propFromSeries\n   */\n  propFromSeries() {\n    const chart = this,\n      optionsChart = chart.options.chart,\n      seriesOptions = chart.options.series;\n    let i, klass, value;\n    /**\n     * The flag is set to `true` if a series of the chart is inverted.\n     *\n     * @name Highcharts.Chart#inverted\n     * @type {boolean|undefined}\n     */\n    ['inverted', 'angular', 'polar'].forEach(function (key) {\n      // The default series type's class\n      klass = seriesTypes[optionsChart.type];\n      // Get the value from available chart-wide properties\n      value =\n      // It is set in the options:\n      optionsChart[key] ||\n      // The default series class:\n      klass && klass.prototype[key];\n      // requires it\n      // 4. Check if any the chart's series require it\n      i = seriesOptions && seriesOptions.length;\n      while (!value && i--) {\n        klass = seriesTypes[seriesOptions[i].type];\n        if (klass && klass.prototype[key]) {\n          value = true;\n        }\n      }\n      // Set the chart property\n      chart[key] = value;\n    });\n  }\n  /**\n   * Internal function to link two or more series together, based on the\n   * `linkedTo` option. This is done from `Chart.render`, and after\n   * `Chart.addSeries` and `Series.remove`.\n   *\n   * @private\n   * @function Highcharts.Chart#linkSeries\n   * @emits Highcharts.Chart#event:afterLinkSeries\n   */\n  linkSeries(isUpdating) {\n    const chart = this,\n      chartSeries = chart.series;\n    // Reset links\n    chartSeries.forEach(function (series) {\n      series.linkedSeries.length = 0;\n    });\n    // Apply new links\n    chartSeries.forEach(function (series) {\n      let linkedTo = series.options.linkedTo;\n      if (isString(linkedTo)) {\n        if (linkedTo === ':previous') {\n          linkedTo = chart.series[series.index - 1];\n        } else {\n          linkedTo = chart.get(linkedTo);\n        }\n        // #3341 avoid mutual linking\n        if (linkedTo && linkedTo.linkedParent !== series) {\n          linkedTo.linkedSeries.push(series);\n          series.linkedParent = linkedTo;\n          if (linkedTo.enabledDataSorting) {\n            series.setDataSortingOptions();\n          }\n          series.visible = pick(series.options.visible, linkedTo.options.visible, series.visible); // #3879\n        }\n      }\n    });\n\n    fireEvent(this, 'afterLinkSeries', {\n      isUpdating\n    });\n  }\n  /**\n   * Render series for the chart.\n   *\n   * @private\n   * @function Highcharts.Chart#renderSeries\n   */\n  renderSeries() {\n    this.series.forEach(function (serie) {\n      serie.translate();\n      serie.render();\n    });\n  }\n  /**\n   * Render all graphics for the chart. Runs internally on initialization.\n   *\n   * @private\n   * @function Highcharts.Chart#render\n   */\n  render() {\n    const chart = this,\n      axes = chart.axes,\n      colorAxis = chart.colorAxis,\n      renderer = chart.renderer,\n      renderAxes = function (axes) {\n        axes.forEach(function (axis) {\n          if (axis.visible) {\n            axis.render();\n          }\n        });\n      };\n    let correction = 0; // correction for X axis labels\n    // Title\n    chart.setTitle();\n    // Fire an event before the margins are computed. This is where the\n    // legend is assigned.\n    fireEvent(chart, 'beforeMargins');\n    // Get stacks\n    if (chart.getStacks) {\n      chart.getStacks();\n    }\n    // Get chart margins\n    chart.getMargins(true);\n    chart.setChartSize();\n    // Record preliminary dimensions for later comparison\n    const tempWidth = chart.plotWidth;\n    axes.some(function (axis) {\n      if (axis.horiz && axis.visible && axis.options.labels.enabled && axis.series.length) {\n        // 21 is the most common correction for X axis labels\n        correction = 21;\n        return true;\n      }\n    });\n    // use Math.max to prevent negative plotHeight\n    chart.plotHeight = Math.max(chart.plotHeight - correction, 0);\n    const tempHeight = chart.plotHeight;\n    // Get margins by pre-rendering axes\n    axes.forEach(function (axis) {\n      axis.setScale();\n    });\n    chart.getAxisMargins();\n    // If the plot area size has changed significantly, calculate tick\n    // positions again\n    const redoHorizontal = tempWidth / chart.plotWidth > 1.1;\n    // Height is more sensitive, use lower threshold\n    const redoVertical = tempHeight / chart.plotHeight > 1.05;\n    if (redoHorizontal || redoVertical) {\n      axes.forEach(function (axis) {\n        if (axis.horiz && redoHorizontal || !axis.horiz && redoVertical) {\n          // update to reflect the new margins\n          axis.setTickInterval(true);\n        }\n      });\n      chart.getMargins(); // second pass to check for new labels\n    }\n    // Draw the borders and backgrounds\n    chart.drawChartBox();\n    // Axes\n    if (chart.hasCartesianSeries) {\n      renderAxes(axes);\n    } else if (colorAxis && colorAxis.length) {\n      renderAxes(colorAxis);\n    }\n    // The series\n    if (!chart.seriesGroup) {\n      chart.seriesGroup = renderer.g('series-group').attr({\n        zIndex: 3\n      }).shadow(chart.options.chart.seriesGroupShadow).add();\n    }\n    chart.renderSeries();\n    // Credits\n    chart.addCredits();\n    // Handle responsiveness\n    if (chart.setResponsive) {\n      chart.setResponsive();\n    }\n    // Set flag\n    chart.hasRendered = true;\n  }\n  /**\n   * Set a new credits label for the chart.\n   *\n   * @sample highcharts/credits/credits-update/\n   *         Add and update credits\n   *\n   * @function Highcharts.Chart#addCredits\n   *\n   * @param {Highcharts.CreditsOptions} [credits]\n   * A configuration object for the new credits.\n   */\n  addCredits(credits) {\n    const chart = this,\n      creds = merge(true, this.options.credits, credits);\n    if (creds.enabled && !this.credits) {\n      /**\n       * The chart's credits label. The label has an `update` method that\n       * allows setting new options as per the\n       * [credits options set](https://api.highcharts.com/highcharts/credits).\n       *\n       * @name Highcharts.Chart#credits\n       * @type {Highcharts.SVGElement}\n       */\n      this.credits = this.renderer.text(creds.text + (this.mapCredits || ''), 0, 0).addClass('highcharts-credits').on('click', function () {\n        if (creds.href) {\n          win.location.href = creds.href;\n        }\n      }).attr({\n        align: creds.position.align,\n        zIndex: 8\n      });\n      if (!chart.styledMode) {\n        this.credits.css(creds.style);\n      }\n      this.credits.add().align(creds.position);\n      // Dynamically update\n      this.credits.update = function (options) {\n        chart.credits = chart.credits.destroy();\n        chart.addCredits(options);\n      };\n    }\n  }\n  /**\n   * Remove the chart and purge memory. This method is called internally\n   * before adding a second chart into the same container, as well as on\n   * window unload to prevent leaks.\n   *\n   * @sample highcharts/members/chart-destroy/\n   *         Destroy the chart from a button\n   * @sample stock/members/chart-destroy/\n   *         Destroy with Highcharts Stock\n   *\n   * @function Highcharts.Chart#destroy\n   *\n   * @emits Highcharts.Chart#event:destroy\n   */\n  destroy() {\n    const chart = this,\n      axes = chart.axes,\n      series = chart.series,\n      container = chart.container,\n      parentNode = container && container.parentNode;\n    let i;\n    // fire the chart.destoy event\n    fireEvent(chart, 'destroy');\n    // Delete the chart from charts lookup array\n    if (chart.renderer.forExport) {\n      erase(charts, chart); // #6569\n    } else {\n      charts[chart.index] = void 0;\n    }\n    H.chartCount--;\n    chart.renderTo.removeAttribute('data-highcharts-chart');\n    // remove events\n    removeEvent(chart);\n    // ==== Destroy collections:\n    // Destroy axes\n    i = axes.length;\n    while (i--) {\n      axes[i] = axes[i].destroy();\n    }\n    // Destroy scroller & scroller series before destroying base series\n    if (this.scroller && this.scroller.destroy) {\n      this.scroller.destroy();\n    }\n    // Destroy each series\n    i = series.length;\n    while (i--) {\n      series[i] = series[i].destroy();\n    }\n    // ==== Destroy chart properties:\n    ['title', 'subtitle', 'chartBackground', 'plotBackground', 'plotBGImage', 'plotBorder', 'seriesGroup', 'clipRect', 'credits', 'pointer', 'rangeSelector', 'legend', 'resetZoomButton', 'tooltip', 'renderer'].forEach(function (name) {\n      const prop = chart[name];\n      if (prop && prop.destroy) {\n        chart[name] = prop.destroy();\n      }\n    });\n    // Remove container and all SVG, check container as it can break in IE\n    // when destroyed before finished loading\n    if (container) {\n      container.innerHTML = AST.emptyHTML;\n      removeEvent(container);\n      if (parentNode) {\n        discardElement(container);\n      }\n    }\n    // clean it all up\n    objectEach(chart, function (val, key) {\n      delete chart[key];\n    });\n  }\n  /**\n   * Prepare for first rendering after all data are loaded.\n   *\n   * @private\n   * @function Highcharts.Chart#firstRender\n   * @emits Highcharts.Chart#event:beforeRender\n   */\n  firstRender() {\n    const chart = this,\n      options = chart.options;\n    // Create the container\n    chart.getContainer();\n    chart.resetMargins();\n    chart.setChartSize();\n    // Set the common chart properties (mainly invert) from the given series\n    chart.propFromSeries();\n    // get axes\n    chart.getAxes();\n    // Initialize the series\n    const series = isArray(options.series) ? options.series : [];\n    options.series = []; // Avoid mutation\n    series.forEach(\n    // #9680\n    function (serieOptions) {\n      chart.initSeries(serieOptions);\n    });\n    chart.linkSeries();\n    chart.setSeriesData();\n    // Run an event after axes and series are initialized, but before\n    // render. At this stage, the series data is indexed and cached in the\n    // xData and yData arrays, so we can access those before rendering. Used\n    // in Highcharts Stock.\n    fireEvent(chart, 'beforeRender');\n    chart.render();\n    chart.pointer.getChartPosition(); // #14973\n    // Fire the load event if there are no external images\n    if (!chart.renderer.imgCount && !chart.hasLoaded) {\n      chart.onload();\n    }\n    // If the chart was rendered outside the top container, put it back in\n    // (#3679)\n    chart.temporaryDisplay(true);\n  }\n  /**\n   * Internal function that runs on chart load, async if any images are loaded\n   * in the chart. Runs the callbacks and triggers the `load` and `render`\n   * events.\n   *\n   * @private\n   * @function Highcharts.Chart#onload\n   * @emits Highcharts.Chart#event:load\n   * @emits Highcharts.Chart#event:render\n   */\n  onload() {\n    // Run callbacks, first the ones registered by modules, then user's one\n    this.callbacks.concat([this.callback]).forEach(function (fn) {\n      // Chart destroyed in its own callback (#3600)\n      if (fn && typeof this.index !== 'undefined') {\n        fn.apply(this, [this]);\n      }\n    }, this);\n    fireEvent(this, 'load');\n    fireEvent(this, 'render');\n    // Set up auto resize, check for not destroyed (#6068)\n    if (defined(this.index)) {\n      this.setReflow();\n    }\n    this.warnIfA11yModuleNotLoaded();\n    // Don't run again\n    this.hasLoaded = true;\n  }\n  /**\n   * Emit console warning if the a11y module is not loaded.\n   */\n  warnIfA11yModuleNotLoaded() {\n    const {\n      options,\n      title\n    } = this;\n    if (options && !this.accessibility) {\n      // Make chart behave as an image with the title as alt text\n      this.renderer.boxWrapper.attr({\n        role: 'img',\n        'aria-label': (title && title.element.textContent || ''\n        // #17753, < is not allowed in SVG attributes\n        ).replace(/</g, '&lt;')\n      });\n      if (!(options.accessibility && options.accessibility.enabled === false)) {\n        error('Highcharts warning: Consider including the ' + '\"accessibility.js\" module to make your chart more ' + 'usable for people with disabilities. Set the ' + '\"accessibility.enabled\" option to false to remove this ' + 'warning. See https://www.highcharts.com/docs/accessibility/accessibility-module.', false, this);\n      }\n    }\n  }\n  /**\n   * Add a series to the chart after render time. Note that this method should\n   * never be used when adding data synchronously at chart render time, as it\n   * adds expense to the calculations and rendering. When adding data at the\n   * same time as the chart is initialized, add the series as a configuration\n   * option instead. With multiple axes, the `offset` is dynamically adjusted.\n   *\n   * @sample highcharts/members/chart-addseries/\n   *         Add a series from a button\n   * @sample stock/members/chart-addseries/\n   *         Add a series in Highcharts Stock\n   *\n   * @function Highcharts.Chart#addSeries\n   *\n   * @param {Highcharts.SeriesOptionsType} options\n   *        The config options for the series.\n   *\n   * @param {boolean} [redraw=true]\n   *        Whether to redraw the chart after adding.\n   *\n   * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n   *        Whether to apply animation, and optionally animation\n   *        configuration. When `undefined`, it applies the animation that is\n   *        set in the `chart.animation` option.\n   *\n   * @return {Highcharts.Series}\n   *         The newly created series object.\n   *\n   * @emits Highcharts.Chart#event:addSeries\n   * @emits Highcharts.Chart#event:afterAddSeries\n   */\n  addSeries(options, redraw, animation) {\n    const chart = this;\n    let series;\n    if (options) {\n      // <- not necessary\n      redraw = pick(redraw, true); // defaults to true\n      fireEvent(chart, 'addSeries', {\n        options: options\n      }, function () {\n        series = chart.initSeries(options);\n        chart.isDirtyLegend = true;\n        chart.linkSeries();\n        if (series.enabledDataSorting) {\n          // We need to call `setData` after `linkSeries`\n          series.setData(options.data, false);\n        }\n        fireEvent(chart, 'afterAddSeries', {\n          series: series\n        });\n        if (redraw) {\n          chart.redraw(animation);\n        }\n      });\n    }\n    return series;\n  }\n  /**\n   * Add an axis to the chart after render time. Note that this method should\n   * never be used when adding data synchronously at chart render time, as it\n   * adds expense to the calculations and rendering. When adding data at the\n   * same time as the chart is initialized, add the axis as a configuration\n   * option instead.\n   *\n   * @sample highcharts/members/chart-addaxis/\n   *         Add and remove axes\n   *\n   * @function Highcharts.Chart#addAxis\n   *\n   * @param {Highcharts.AxisOptions} options\n   *        The axis options.\n   *\n   * @param {boolean} [isX=false]\n   *        Whether it is an X axis or a value axis.\n   *\n   * @param {boolean} [redraw=true]\n   *        Whether to redraw the chart after adding.\n   *\n   * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n   *        Whether and how to apply animation in the redraw. When\n   *        `undefined`, it applies the animation that is set in the\n   *        `chart.animation` option.\n   *\n   * @return {Highcharts.Axis}\n   *         The newly generated Axis object.\n   */\n  addAxis(options, isX, redraw, animation) {\n    return this.createAxis(isX ? 'xAxis' : 'yAxis', {\n      axis: options,\n      redraw: redraw,\n      animation: animation\n    });\n  }\n  /**\n   * Add a color axis to the chart after render time. Note that this method\n   * should never be used when adding data synchronously at chart render time,\n   * as it adds expense to the calculations and rendering. When adding data at\n   * the same time as the chart is initialized, add the axis as a\n   * configuration option instead.\n   *\n   * @sample highcharts/members/chart-addaxis/\n   *         Add and remove axes\n   *\n   * @function Highcharts.Chart#addColorAxis\n   *\n   * @param {Highcharts.ColorAxisOptions} options\n   *        The axis options.\n   *\n   * @param {boolean} [redraw=true]\n   *        Whether to redraw the chart after adding.\n   *\n   * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n   *        Whether and how to apply animation in the redraw. When\n   *        `undefined`, it applies the animation that is set in the\n   *        `chart.animation` option.\n   *\n   * @return {Highcharts.Axis}\n   *         The newly generated Axis object.\n   */\n  addColorAxis(options, redraw, animation) {\n    return this.createAxis('colorAxis', {\n      axis: options,\n      redraw: redraw,\n      animation: animation\n    });\n  }\n  /**\n   * Factory for creating different axis types.\n   *\n   * @private\n   * @function Highcharts.Chart#createAxis\n   *\n   * @param {string} coll\n   *        An axis type.\n   *\n   * @param {...Array<*>} arguments\n   *        All arguments for the constructor.\n   *\n   * @return {Highcharts.Axis}\n   *         The newly generated Axis object.\n   */\n  createAxis(coll, options) {\n    const axis = new Axis(this, options.axis, coll);\n    if (pick(options.redraw, true)) {\n      this.redraw(options.animation);\n    }\n    return axis;\n  }\n  /**\n   * Dim the chart and show a loading text or symbol. Options for the loading\n   * screen are defined in {@link\n   * https://api.highcharts.com/highcharts/loading|the loading options}.\n   *\n   * @sample highcharts/members/chart-hideloading/\n   *         Show and hide loading from a button\n   * @sample highcharts/members/chart-showloading/\n   *         Apply different text labels\n   * @sample stock/members/chart-show-hide-loading/\n   *         Toggle loading in Highcharts Stock\n   *\n   * @function Highcharts.Chart#showLoading\n   *\n   * @param {string} [str]\n   *        An optional text to show in the loading label instead of the\n   *        default one. The default text is set in\n   *        [lang.loading](https://api.highcharts.com/highcharts/lang.loading).\n   */\n  showLoading(str) {\n    const chart = this,\n      options = chart.options,\n      loadingOptions = options.loading,\n      setLoadingSize = function () {\n        if (loadingDiv) {\n          css(loadingDiv, {\n            left: chart.plotLeft + 'px',\n            top: chart.plotTop + 'px',\n            width: chart.plotWidth + 'px',\n            height: chart.plotHeight + 'px'\n          });\n        }\n      };\n    let loadingDiv = chart.loadingDiv,\n      loadingSpan = chart.loadingSpan;\n    // create the layer at the first call\n    if (!loadingDiv) {\n      chart.loadingDiv = loadingDiv = createElement('div', {\n        className: 'highcharts-loading highcharts-loading-hidden'\n      }, null, chart.container);\n    }\n    if (!loadingSpan) {\n      chart.loadingSpan = loadingSpan = createElement('span', {\n        className: 'highcharts-loading-inner'\n      }, null, loadingDiv);\n      addEvent(chart, 'redraw', setLoadingSize); // #1080\n    }\n\n    loadingDiv.className = 'highcharts-loading';\n    // Update text\n    AST.setElementHTML(loadingSpan, pick(str, options.lang.loading, ''));\n    if (!chart.styledMode) {\n      // Update visuals\n      css(loadingDiv, extend(loadingOptions.style, {\n        zIndex: 10\n      }));\n      css(loadingSpan, loadingOptions.labelStyle);\n      // Show it\n      if (!chart.loadingShown) {\n        css(loadingDiv, {\n          opacity: 0,\n          display: ''\n        });\n        animate(loadingDiv, {\n          opacity: loadingOptions.style.opacity || 0.5\n        }, {\n          duration: loadingOptions.showDuration || 0\n        });\n      }\n    }\n    chart.loadingShown = true;\n    setLoadingSize();\n  }\n  /**\n   * Hide the loading layer.\n   *\n   * @see Highcharts.Chart#showLoading\n   *\n   * @sample highcharts/members/chart-hideloading/\n   *         Show and hide loading from a button\n   * @sample stock/members/chart-show-hide-loading/\n   *         Toggle loading in Highcharts Stock\n   *\n   * @function Highcharts.Chart#hideLoading\n   */\n  hideLoading() {\n    const options = this.options,\n      loadingDiv = this.loadingDiv;\n    if (loadingDiv) {\n      loadingDiv.className = 'highcharts-loading highcharts-loading-hidden';\n      if (!this.styledMode) {\n        animate(loadingDiv, {\n          opacity: 0\n        }, {\n          duration: options.loading.hideDuration || 100,\n          complete: function () {\n            css(loadingDiv, {\n              display: 'none'\n            });\n          }\n        });\n      }\n    }\n    this.loadingShown = false;\n  }\n  /**\n   * A generic function to update any element of the chart. Elements can be\n   * enabled and disabled, moved, re-styled, re-formatted etc.\n   *\n   * A special case is configuration objects that take arrays, for example\n   * [xAxis](https://api.highcharts.com/highcharts/xAxis),\n   * [yAxis](https://api.highcharts.com/highcharts/yAxis) or\n   * [series](https://api.highcharts.com/highcharts/series). For these\n   * collections, an `id` option is used to map the new option set to an\n   * existing object. If an existing object of the same id is not found, the\n   * corresponding item is updated. So for example, running `chart.update`\n   * with a series item without an id, will cause the existing chart's series\n   * with the same index in the series array to be updated. When the\n   * `oneToOne` parameter is true, `chart.update` will also take care of\n   * adding and removing items from the collection. Read more under the\n   * parameter description below.\n   *\n   * Note that when changing series data, `chart.update` may mutate the passed\n   * data options.\n   *\n   * See also the\n   * [responsive option set](https://api.highcharts.com/highcharts/responsive).\n   * Switching between `responsive.rules` basically runs `chart.update` under\n   * the hood.\n   *\n   * @sample highcharts/members/chart-update/\n   *         Update chart geometry\n   *\n   * @function Highcharts.Chart#update\n   *\n   * @param {Highcharts.Options} options\n   *        A configuration object for the new chart options.\n   *\n   * @param {boolean} [redraw=true]\n   *        Whether to redraw the chart.\n   *\n   * @param {boolean} [oneToOne=false]\n   *        When `true`, the `series`, `xAxis`, `yAxis` and `annotations`\n   *        collections will be updated one to one, and items will be either\n   *        added or removed to match the new updated options. For example,\n   *        if the chart has two series and we call `chart.update` with a\n   *        configuration containing three series, one will be added. If we\n   *        call `chart.update` with one series, one will be removed. Setting\n   *        an empty `series` array will remove all series, but leaving out\n   *        the`series` property will leave all series untouched. If the\n   *        series have id's, the new series options will be matched by id,\n   *        and the remaining ones removed.\n   *\n   * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n   *        Whether to apply animation, and optionally animation\n   *        configuration. When `undefined`, it applies the animation that is\n   *        set in the `chart.animation` option.\n   *\n   * @emits Highcharts.Chart#event:update\n   * @emits Highcharts.Chart#event:afterUpdate\n   */\n  update(options, redraw, oneToOne, animation) {\n    const chart = this,\n      adders = {\n        credits: 'addCredits',\n        title: 'setTitle',\n        subtitle: 'setSubtitle',\n        caption: 'setCaption'\n      },\n      isResponsiveOptions = options.isResponsiveOptions,\n      itemsForRemoval = [];\n    let updateAllAxes, updateAllSeries, runSetSize;\n    fireEvent(chart, 'update', {\n      options: options\n    });\n    // If there are responsive rules in action, undo the responsive rules\n    // before we apply the updated options and replay the responsive rules\n    // on top from the chart.redraw function (#9617).\n    if (!isResponsiveOptions) {\n      chart.setResponsive(false, true);\n    }\n    options = diffObjects(options, chart.options);\n    chart.userOptions = merge(chart.userOptions, options);\n    // If the top-level chart option is present, some special updates are\n    // required\n    const optionsChart = options.chart;\n    if (optionsChart) {\n      merge(true, chart.options.chart, optionsChart);\n      // Add support for deprecated zooming options like zoomType, #17861\n      this.setZoomOptions();\n      // Setter function\n      if ('className' in optionsChart) {\n        chart.setClassName(optionsChart.className);\n      }\n      if ('inverted' in optionsChart || 'polar' in optionsChart || 'type' in optionsChart) {\n        // Parse options.chart.inverted and options.chart.polar together\n        // with the available series.\n        chart.propFromSeries();\n        updateAllAxes = true;\n      }\n      if ('alignTicks' in optionsChart) {\n        // #6452\n        updateAllAxes = true;\n      }\n      if ('events' in optionsChart) {\n        // Chart event handlers\n        registerEventOptions(this, optionsChart);\n      }\n      objectEach(optionsChart, function (val, key) {\n        if (chart.propsRequireUpdateSeries.indexOf('chart.' + key) !== -1) {\n          updateAllSeries = true;\n        }\n        // Only dirty box\n        if (chart.propsRequireDirtyBox.indexOf(key) !== -1) {\n          chart.isDirtyBox = true;\n        }\n        // Chart setSize\n        if (chart.propsRequireReflow.indexOf(key) !== -1) {\n          if (isResponsiveOptions) {\n            chart.isDirtyBox = true;\n          } else {\n            runSetSize = true;\n          }\n        }\n      });\n      if (!chart.styledMode && optionsChart.style) {\n        chart.renderer.setStyle(chart.options.chart.style || {});\n      }\n    }\n    // Moved up, because tooltip needs updated plotOptions (#6218)\n    if (!chart.styledMode && options.colors) {\n      this.options.colors = options.colors;\n    }\n    if (options.time) {\n      // Maintaining legacy global time. If the chart is instanciated\n      // first with global time, then updated with time options, we need\n      // to create a new Time instance to avoid mutating the global time\n      // (#10536).\n      if (this.time === defaultTime) {\n        this.time = new Time(options.time);\n      }\n      // If we're updating, the time class is different from other chart\n      // classes (chart.legend, chart.tooltip etc) in that it doesn't know\n      // about the chart. The other chart[something].update functions also\n      // set the chart.options[something]. For the time class however we\n      // need to update the chart options separately. #14230.\n      merge(true, chart.options.time, options.time);\n    }\n    // Some option stuctures correspond one-to-one to chart objects that\n    // have update methods, for example\n    // options.credits => chart.credits\n    // options.legend => chart.legend\n    // options.title => chart.title\n    // options.tooltip => chart.tooltip\n    // options.subtitle => chart.subtitle\n    // options.mapNavigation => chart.mapNavigation\n    // options.navigator => chart.navigator\n    // options.scrollbar => chart.scrollbar\n    objectEach(options, function (val, key) {\n      if (chart[key] && typeof chart[key].update === 'function') {\n        chart[key].update(val, false);\n        // If a one-to-one object does not exist, look for an adder function\n      } else if (typeof chart[adders[key]] === 'function') {\n        chart[adders[key]](val);\n        // Else, just merge the options. For nodes like loading, noData,\n        // plotOptions\n      } else if (key !== 'colors' && chart.collectionsWithUpdate.indexOf(key) === -1) {\n        merge(true, chart.options[key], options[key]);\n      }\n      if (key !== 'chart' && chart.propsRequireUpdateSeries.indexOf(key) !== -1) {\n        updateAllSeries = true;\n      }\n    });\n    // Setters for collections. For axes and series, each item is referred\n    // by an id. If the id is not found, it defaults to the corresponding\n    // item in the collection, so setting one series without an id, will\n    // update the first series in the chart. Setting two series without\n    // an id will update the first and the second respectively (#6019)\n    // chart.update and responsive.\n    this.collectionsWithUpdate.forEach(function (coll) {\n      if (options[coll]) {\n        splat(options[coll]).forEach(function (newOptions, i) {\n          const hasId = defined(newOptions.id);\n          let item;\n          // Match by id\n          if (hasId) {\n            item = chart.get(newOptions.id);\n          }\n          // No match by id found, match by index instead\n          if (!item && chart[coll]) {\n            item = chart[coll][pick(newOptions.index, i)];\n            // Check if we grabbed an item with an exising but\n            // different id (#13541). Check that the item in this\n            // position is not internal (navigator).\n            if (item && (hasId && defined(item.options.id) || item.options.isInternal)) {\n              item = void 0;\n            }\n          }\n          if (item && item.coll === coll) {\n            item.update(newOptions, false);\n            if (oneToOne) {\n              item.touched = true;\n            }\n          }\n          // If oneToOne and no matching item is found, add one\n          if (!item && oneToOne && chart.collectionsWithInit[coll]) {\n            chart.collectionsWithInit[coll][0].apply(chart,\n            // [newOptions, ...extraArguments, redraw=false]\n            [newOptions].concat(\n            // Not all initializers require extra args\n            chart.collectionsWithInit[coll][1] || []).concat([false])).touched = true;\n          }\n        });\n        // Add items for removal\n        if (oneToOne) {\n          chart[coll].forEach(function (item) {\n            if (!item.touched && !item.options.isInternal) {\n              itemsForRemoval.push(item);\n            } else {\n              delete item.touched;\n            }\n          });\n        }\n      }\n    });\n    itemsForRemoval.forEach(function (item) {\n      if (item.chart && item.remove) {\n        // #9097, avoid removing twice\n        item.remove(false);\n      }\n    });\n    if (updateAllAxes) {\n      chart.axes.forEach(function (axis) {\n        axis.update({}, false);\n      });\n    }\n    // Certain options require the whole series structure to be thrown away\n    // and rebuilt\n    if (updateAllSeries) {\n      chart.getSeriesOrderByLinks().forEach(function (series) {\n        // Avoid removed navigator series\n        if (series.chart) {\n          series.update({}, false);\n        }\n      }, this);\n    }\n    // Update size. Redraw is forced.\n    const newWidth = optionsChart && optionsChart.width;\n    const newHeight = optionsChart && (isString(optionsChart.height) ? relativeLength(optionsChart.height, newWidth || chart.chartWidth) : optionsChart.height);\n    if (\n    // In this case, run chart.setSize with newWidth and newHeight which\n    // are undefined, only for reflowing chart elements because margin\n    // or spacing has been set (#8190)\n    runSetSize ||\n    // In this case, the size is actually set\n    isNumber(newWidth) && newWidth !== chart.chartWidth || isNumber(newHeight) && newHeight !== chart.chartHeight) {\n      chart.setSize(newWidth, newHeight, animation);\n    } else if (pick(redraw, true)) {\n      chart.redraw(animation);\n    }\n    fireEvent(chart, 'afterUpdate', {\n      options: options,\n      redraw: redraw,\n      animation: animation\n    });\n  }\n  /**\n   * Shortcut to set the subtitle options. This can also be done from {@link\n   * Chart#update} or {@link Chart#setTitle}.\n   *\n   * @function Highcharts.Chart#setSubtitle\n   *\n   * @param {Highcharts.SubtitleOptions} options\n   *        New subtitle options. The subtitle text itself is set by the\n   *        `options.text` property.\n   */\n  setSubtitle(options, redraw) {\n    this.applyDescription('subtitle', options);\n    this.layOutTitles(redraw);\n  }\n  /**\n   * Set the caption options. This can also be done from {@link\n   * Chart#update}.\n   *\n   * @function Highcharts.Chart#setCaption\n   *\n   * @param {Highcharts.CaptionOptions} options\n   *        New caption options. The caption text itself is set by the\n   *        `options.text` property.\n   */\n  setCaption(options, redraw) {\n    this.applyDescription('caption', options);\n    this.layOutTitles(redraw);\n  }\n  /**\n   * Display the zoom button, so users can reset zoom to the default view\n   * settings.\n   *\n   * @function Highcharts.Chart#showResetZoom\n   *\n   * @emits Highcharts.Chart#event:afterShowResetZoom\n   * @emits Highcharts.Chart#event:beforeShowResetZoom\n   */\n  showResetZoom() {\n    const chart = this,\n      lang = defaultOptions.lang,\n      btnOptions = chart.zooming.resetButton,\n      theme = btnOptions.theme,\n      alignTo = btnOptions.relativeTo === 'chart' || btnOptions.relativeTo === 'spacingBox' ? null : 'scrollablePlotBox';\n    /**\n     * @private\n     */\n    function zoomOut() {\n      chart.zoomOut();\n    }\n    fireEvent(this, 'beforeShowResetZoom', null, function () {\n      chart.resetZoomButton = chart.renderer.button(lang.resetZoom, null, null, zoomOut, theme).attr({\n        align: btnOptions.position.align,\n        title: lang.resetZoomTitle\n      }).addClass('highcharts-reset-zoom').add().align(btnOptions.position, false, alignTo);\n    });\n    fireEvent(this, 'afterShowResetZoom');\n  }\n  /**\n   * Zoom the chart out after a user has zoomed in. See also\n   * [Axis.setExtremes](/class-reference/Highcharts.Axis#setExtremes).\n   *\n   * @function Highcharts.Chart#zoomOut\n   *\n   * @emits Highcharts.Chart#event:selection\n   */\n  zoomOut() {\n    fireEvent(this, 'selection', {\n      resetSelection: true\n    }, this.zoom);\n  }\n  /**\n   * Zoom into a given portion of the chart given by axis coordinates.\n   *\n   * @private\n   * @function Highcharts.Chart#zoom\n   * @param {Highcharts.SelectEventObject} event\n   */\n  zoom(event) {\n    const chart = this,\n      pointer = chart.pointer;\n    let displayButton = false,\n      hasZoomed;\n    // If zoom is called with no arguments, reset the axes\n    if (!event || event.resetSelection) {\n      chart.axes.forEach(function (axis) {\n        hasZoomed = axis.zoom();\n      });\n      pointer.initiated = false; // #6804\n    } else {\n      // Else, zoom in on all axes\n      event.xAxis.concat(event.yAxis).forEach(function (axisData) {\n        const axis = axisData.axis,\n          isXAxis = axis.isXAxis,\n          {\n            hasPinched,\n            mouseDownX,\n            mouseDownY\n          } = pointer;\n        // Don't zoom more than minRange\n        if (pointer[isXAxis ? 'zoomX' : 'zoomY'] && defined(mouseDownX) && defined(mouseDownY) && chart.isInsidePlot(mouseDownX - chart.plotLeft, mouseDownY - chart.plotTop, {\n          axis,\n          // Ignore touch positions if pinched on mobile\n          // #18062\n          ignoreX: hasPinched,\n          ignoreY: hasPinched\n        }) || !defined(chart.inverted ? mouseDownX : mouseDownY)) {\n          hasZoomed = axis.zoom(axisData.min, axisData.max);\n          if (axis.displayBtn) {\n            displayButton = true;\n          }\n        }\n      });\n    }\n    // Show or hide the Reset zoom button\n    const resetZoomButton = chart.resetZoomButton;\n    if (displayButton && !resetZoomButton) {\n      chart.showResetZoom();\n    } else if (!displayButton && isObject(resetZoomButton)) {\n      chart.resetZoomButton = resetZoomButton.destroy();\n    }\n    // Redraw\n    if (hasZoomed) {\n      chart.redraw(pick(chart.options.chart.animation, event && event.animation, chart.pointCount < 100));\n    }\n  }\n  /**\n   * Pan the chart by dragging the mouse across the pane. This function is\n   * called on mouse move, and the distance to pan is computed from chartX\n   * compared to the first chartX position in the dragging operation.\n   *\n   * @private\n   * @function Highcharts.Chart#pan\n   * @param {Highcharts.PointerEventObject} e\n   * @param {string} panning\n   */\n  pan(e, panning) {\n    const chart = this,\n      hoverPoints = chart.hoverPoints,\n      panningOptions = typeof panning === 'object' ? panning : {\n        enabled: panning,\n        type: 'x'\n      },\n      chartOptions = chart.options.chart;\n    if (chartOptions && chartOptions.panning) {\n      chartOptions.panning = panningOptions;\n    }\n    const type = panningOptions.type;\n    let doRedraw;\n    fireEvent(this, 'pan', {\n      originalEvent: e\n    }, function () {\n      // remove active points for shared tooltip\n      if (hoverPoints) {\n        hoverPoints.forEach(function (point) {\n          point.setState();\n        });\n      }\n      let axes = chart.xAxis;\n      if (type === 'xy') {\n        axes = axes.concat(chart.yAxis);\n      } else if (type === 'y') {\n        axes = chart.yAxis;\n      }\n      const nextMousePos = {};\n      axes.forEach(function (axis) {\n        if (!axis.options.panningEnabled || axis.options.isInternal) {\n          return;\n        }\n        const horiz = axis.horiz,\n          mousePos = e[horiz ? 'chartX' : 'chartY'],\n          mouseDown = horiz ? 'mouseDownX' : 'mouseDownY',\n          startPos = chart[mouseDown],\n          halfPointRange = axis.minPointOffset || 0,\n          pointRangeDirection = axis.reversed && !chart.inverted || !axis.reversed && chart.inverted ? -1 : 1,\n          extremes = axis.getExtremes(),\n          panMin = axis.toValue(startPos - mousePos, true) + halfPointRange * pointRangeDirection,\n          panMax = axis.toValue(startPos + axis.len - mousePos, true) - (halfPointRange * pointRangeDirection || axis.isXAxis && axis.pointRangePadding || 0),\n          flipped = panMax < panMin,\n          hasVerticalPanning = axis.hasVerticalPanning();\n        let newMin = flipped ? panMax : panMin,\n          newMax = flipped ? panMin : panMax,\n          panningState = axis.panningState,\n          spill;\n        // General calculations of panning state.\n        // This is related to using vertical panning. (#11315).\n        if (hasVerticalPanning && !axis.isXAxis && (!panningState || panningState.isDirty)) {\n          axis.series.forEach(function (series) {\n            const processedData = series.getProcessedData(true),\n              dataExtremes = series.getExtremes(processedData.yData, true);\n            if (!panningState) {\n              panningState = {\n                startMin: Number.MAX_VALUE,\n                startMax: -Number.MAX_VALUE\n              };\n            }\n            if (isNumber(dataExtremes.dataMin) && isNumber(dataExtremes.dataMax)) {\n              panningState.startMin = Math.min(pick(series.options.threshold, Infinity), dataExtremes.dataMin, panningState.startMin);\n              panningState.startMax = Math.max(pick(series.options.threshold, -Infinity), dataExtremes.dataMax, panningState.startMax);\n            }\n          });\n        }\n        const paddedMin = Math.min(pick(panningState && panningState.startMin, extremes.dataMin), halfPointRange ? extremes.min : axis.toValue(axis.toPixels(extremes.min) - axis.minPixelPadding));\n        const paddedMax = Math.max(pick(panningState && panningState.startMax, extremes.dataMax), halfPointRange ? extremes.max : axis.toValue(axis.toPixels(extremes.max) + axis.minPixelPadding));\n        axis.panningState = panningState;\n        // It is not necessary to calculate extremes on ordinal axis,\n        // because they are already calculated, so we don't want to\n        // override them.\n        if (!axis.isOrdinal) {\n          // If the new range spills over, either to the min or max,\n          // adjust the new range.\n          spill = paddedMin - newMin;\n          if (spill > 0) {\n            newMax += spill;\n            newMin = paddedMin;\n          }\n          spill = newMax - paddedMax;\n          if (spill > 0) {\n            newMax = paddedMax;\n            newMin -= spill;\n          }\n          // Set new extremes if they are actually new\n          if (axis.series.length && newMin !== extremes.min && newMax !== extremes.max && newMin >= paddedMin && newMax <= paddedMax) {\n            axis.setExtremes(newMin, newMax, false, false, {\n              trigger: 'pan'\n            });\n            if (!chart.resetZoomButton &&\n            // Show reset zoom button only when both newMin and\n            // newMax values are between padded axis range.\n            newMin !== paddedMin && newMax !== paddedMax && type.match('y')) {\n              chart.showResetZoom();\n              axis.displayBtn = false;\n            }\n            doRedraw = true;\n          }\n          // set new reference for next run:\n          nextMousePos[mouseDown] = mousePos;\n        }\n      });\n      objectEach(nextMousePos, (pos, down) => {\n        chart[down] = pos;\n      });\n      if (doRedraw) {\n        chart.redraw(false);\n      }\n      css(chart.container, {\n        cursor: 'move'\n      });\n    });\n  }\n}\nextend(Chart.prototype, {\n  // Hook for adding callbacks in modules\n  callbacks: [],\n  /**\n   * These collections (arrays) implement `Chart.addSomethig` method used in\n   * chart.update() to create new object in the collection. Equivalent for\n   * deleting is resolved by simple `Somethig.remove()`.\n   *\n   * Note: We need to define these references after initializers are bound to\n   * chart's prototype.\n   *\n   * @private\n   */\n  collectionsWithInit: {\n    // collectionName: [ initializingMethod, [extraArguments] ]\n    xAxis: [Chart.prototype.addAxis, [true]],\n    yAxis: [Chart.prototype.addAxis, [false]],\n    series: [Chart.prototype.addSeries]\n  },\n  /**\n   * These collections (arrays) implement update() methods with support for\n   * one-to-one option.\n   * @private\n   */\n  collectionsWithUpdate: ['xAxis', 'yAxis', 'series'],\n  /**\n   * These properties cause isDirtyBox to be set to true when updating. Can be\n   * extended from plugins.\n   * @private\n   */\n  propsRequireDirtyBox: ['backgroundColor', 'borderColor', 'borderWidth', 'borderRadius', 'plotBackgroundColor', 'plotBackgroundImage', 'plotBorderColor', 'plotBorderWidth', 'plotShadow', 'shadow'],\n  /**\n   * These properties require a full reflow of chart elements, best\n   * implemented through running `Chart.setSize` internally (#8190).\n   * @private\n   */\n  propsRequireReflow: ['margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'spacing', 'spacingTop', 'spacingRight', 'spacingBottom', 'spacingLeft'],\n  /**\n   * These properties cause all series to be updated when updating. Can be\n   * extended from plugins.\n   * @private\n   */\n  propsRequireUpdateSeries: ['chart.inverted', 'chart.polar', 'chart.ignoreHiddenSeries', 'chart.type', 'colors', 'plotOptions', 'time', 'tooltip']\n});\n/* *\n *\n *  Default Export\n *\n * */\nexport default Chart;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Callback for chart constructors.\n *\n * @callback Highcharts.ChartCallbackFunction\n *\n * @param {Highcharts.Chart} chart\n *        Created chart.\n */\n/**\n * Format a number and return a string based on input settings.\n *\n * @callback Highcharts.NumberFormatterCallbackFunction\n *\n * @param {number} number\n *        The input number to format.\n *\n * @param {number} decimals\n *        The amount of decimals. A value of -1 preserves the amount in the\n *        input number.\n *\n * @param {string} [decimalPoint]\n *        The decimal point, defaults to the one given in the lang options, or\n *        a dot.\n *\n * @param {string} [thousandsSep]\n *        The thousands separator, defaults to the one given in the lang\n *        options, or a space character.\n *\n * @return {string} The formatted number.\n */\n/**\n * The chart title. The title has an `update` method that allows modifying the\n * options directly or indirectly via `chart.update`.\n *\n * @interface Highcharts.TitleObject\n * @extends Highcharts.SVGElement\n */ /**\n    * Modify options for the title.\n    *\n    * @function Highcharts.TitleObject#update\n    *\n    * @param {Highcharts.TitleOptions} titleOptions\n    *        Options to modify.\n    *\n    * @param {boolean} [redraw=true]\n    *        Whether to redraw the chart after the title is altered. If doing more\n    *        operations on the chart, it is a good idea to set redraw to false and\n    *        call {@link Chart#redraw} after.\n    */\n/**\n * The chart subtitle. The subtitle has an `update` method that\n * allows modifying the options directly or indirectly via\n * `chart.update`.\n *\n * @interface Highcharts.SubtitleObject\n * @extends Highcharts.SVGElement\n */ /**\n    * Modify options for the subtitle.\n    *\n    * @function Highcharts.SubtitleObject#update\n    *\n    * @param {Highcharts.SubtitleOptions} subtitleOptions\n    *        Options to modify.\n    *\n    * @param {boolean} [redraw=true]\n    *        Whether to redraw the chart after the subtitle is altered. If doing\n    *        more operations on the chart, it is a good idea to set redraw to false\n    *        and call {@link Chart#redraw} after.\n    */\n/**\n * The chart caption. The caption has an `update` method that\n * allows modifying the options directly or indirectly via\n * `chart.update`.\n *\n * @interface Highcharts.CaptionObject\n * @extends Highcharts.SVGElement\n */ /**\n    * Modify options for the caption.\n    *\n    * @function Highcharts.CaptionObject#update\n    *\n    * @param {Highcharts.CaptionOptions} captionOptions\n    *        Options to modify.\n    *\n    * @param {boolean} [redraw=true]\n    *        Whether to redraw the chart after the caption is altered. If doing\n    *        more operations on the chart, it is a good idea to set redraw to false\n    *        and call {@link Chart#redraw} after.\n    */\n/**\n * @interface Highcharts.ChartIsInsideOptionsObject\n */ /**\n    * @name Highcharts.ChartIsInsideOptionsObject#axis\n    * @type {Highcharts.Axis|undefined}\n    */ /**\n       * @name Highcharts.ChartIsInsideOptionsObject#ignoreX\n       * @type {boolean|undefined}\n       */ /**\n          * @name Highcharts.ChartIsInsideOptionsObject#ignoreY\n          * @type {boolean|undefined}\n          */ /**\n             * @name Highcharts.ChartIsInsideOptionsObject#inverted\n             * @type {boolean|undefined}\n             */ /**\n                * @name Highcharts.ChartIsInsideOptionsObject#paneCoordinates\n                * @type {boolean|undefined}\n                */ /**\n                   * @name Highcharts.ChartIsInsideOptionsObject#series\n                   * @type {Highcharts.Series|undefined}\n                   */ /**\n                      * @name Highcharts.ChartIsInsideOptionsObject#visiblePlotOnly\n                      * @type {boolean|undefined}\n                      */\n''; // keeps doclets above in JS file","map":{"version":3,"names":["A","animate","animObject","setAnimation","Axis","D","defaultOptions","defaultTime","Templating","numberFormat","Foundation","registerEventOptions","H","charts","doc","marginNames","svg","win","RendererRegistry","Series","SeriesRegistry","seriesTypes","SVGRenderer","Time","U","AST","addEvent","attr","createElement","css","defined","diffObjects","discardElement","erase","error","extend","find","fireEvent","getStyle","isArray","isNumber","isObject","isString","merge","objectEach","pick","pInt","relativeLength","removeEvent","splat","syncTimeout","uniqueKey","Chart","chart","a","b","c","constructor","axes","axisOffset","bounds","chartHeight","chartWidth","clipBox","colorCounter","container","eventOptions","index","isResizing","labelCollectors","margin","numberFormatter","options","plotBox","plotHeight","plotLeft","plotTop","plotWidth","pointCount","pointer","renderer","renderTo","series","sharedClips","spacing","spacingBox","symbolCounter","time","titleOffset","userOptions","xAxis","yAxis","zooming","getArgs","nodeName","init","setZoomOptions","type","zoomType","key","zoomKey","pinchType","singleTouch","zoomBySingleTouch","resetButton","resetZoomButton","callback","args","arguments","optionsChart","h","v","Object","keys","length","styledMode","hasCartesianSeries","showAxes","push","chartCount","firstRender","initSeries","SeriesClass","missingModuleFor","setSeriesData","getSeriesOrderByLinks","forEach","points","data","enabledDataSorting","setData","concat","sort","linkedSeries","orderItems","coll","fromIndex","collection","optionsArray","slice","userOptionsArray","hasRendered","splice","i","iEnd","item","name","getName","isInternal","isInsidePlot","plotX","plotY","inverted","scrollablePlotBox","scrollLeft","scrollTop","visiblePlotOnly","scrollingContainer","box","x","y","e","ignoreX","polar","pos","len","Infinity","chartX","paneCoordinates","Math","max","min","width","ignoreY","axis","isXAxis","chartY","height","redraw","animation","colorAxis","legend","legendUserOptions","isHiddenChart","isHidden","afterRedraw","hasDirtyStacks","hasStackedSeries","isDirtyBox","redrawLegend","isDirtyLegend","serie","rootFontSize","boxWrapper","setResponsive","temporaryDisplay","layOutTitles","stacking","centerInCategory","isDirty","legendType","updateTotals","labelFormatter","labelFormat","isDirtyData","enabled","render","getStacks","updateNames","setScale","getMargins","extKey","eventArgs","getExtremes","drawChartBox","visible","reset","draw","call","get","id","itemById","ret","getAxes","arr","axisOptions","getSelectedPoints","reduce","acc","getPointsCollection","point","selectedStaging","selected","getSelectedSeries","filter","setTitle","titleOptions","subtitleOptions","applyDescription","explicitOptions","elem","destroy","text","useHTML","align","zIndex","add","update","updateOptions","fontSize","isStock","style","title","verticalAlign","offset","widthAdjust","baseline","fontMetrics","round","getBBox","floating","ceil","caption","requiresDirtyBox","join","getContainerBox","getChartSize","widthOption","heightOption","containerBox","revert","node","tempStyle","body","contains","parentNode","hcOrigDetached","appendChild","hcOricDetached","hcOrigStyle","display","overflow","offsetWidth","setProperty","removeChild","setClassName","className","getContainer","indexAttrName","containerId","containerStyle","getElementById","oldChartIndex","innerHTML","emptyHTML","skipClone","position","textAlign","lineHeight","userSelect","outline","_cursor","cursor","Renderer","getRendererType","forExport","exporting","allowHTML","setStyle","defs","definition","chartIndex","skipAxes","resetMargins","marginBottom","adjustMargins","getAxisMargins","getOffset","m","side","setChartSize","getOptions","reflow","oldBox","chartPosition","isPrinting","clearTimeout","reflowTimeout","setSize","setReflow","runReflow","hasLoaded","ResizeObserver","observe","unbind","globalAnimation","oldChartHeight","oldChartWidth","setTimeout","duration","clipOffset","marginRight","plotSizeX","plotSizeY","plotBorderWidth","floor","clipX","clipY","setAxisSize","setAxisTranslation","alignElements","chartOptions","splashArrays","target","value","values","sideName","plotBGImage","chartBackgroundColor","backgroundColor","plotBackgroundColor","plotBackgroundImage","clipRect","chartBackground","plotBackground","plotBorder","chartBorderWidth","mgn","bgAttr","verb","rect","addClass","borderWidth","shadow","fill","stroke","borderColor","strokeWidth","r","borderRadius","plotShadow","image","plotBorderColor","crisp","propFromSeries","seriesOptions","klass","prototype","linkSeries","isUpdating","chartSeries","linkedTo","linkedParent","setDataSortingOptions","renderSeries","translate","renderAxes","correction","tempWidth","some","horiz","labels","tempHeight","redoHorizontal","redoVertical","setTickInterval","seriesGroup","g","seriesGroupShadow","addCredits","credits","creds","mapCredits","on","href","location","removeAttribute","scroller","prop","val","serieOptions","getChartPosition","imgCount","onload","callbacks","fn","apply","warnIfA11yModuleNotLoaded","accessibility","role","element","textContent","replace","addSeries","addAxis","isX","createAxis","addColorAxis","showLoading","str","loadingOptions","loading","setLoadingSize","loadingDiv","left","top","loadingSpan","setElementHTML","lang","labelStyle","loadingShown","opacity","showDuration","hideLoading","hideDuration","complete","oneToOne","adders","subtitle","isResponsiveOptions","itemsForRemoval","updateAllAxes","updateAllSeries","runSetSize","propsRequireUpdateSeries","indexOf","propsRequireDirtyBox","propsRequireReflow","colors","collectionsWithUpdate","newOptions","hasId","touched","collectionsWithInit","remove","newWidth","newHeight","setSubtitle","setCaption","showResetZoom","btnOptions","theme","alignTo","relativeTo","zoomOut","button","resetZoom","resetZoomTitle","resetSelection","zoom","event","displayButton","hasZoomed","initiated","axisData","hasPinched","mouseDownX","mouseDownY","displayBtn","pan","panning","hoverPoints","panningOptions","doRedraw","originalEvent","setState","nextMousePos","panningEnabled","mousePos","mouseDown","startPos","halfPointRange","minPointOffset","pointRangeDirection","reversed","extremes","panMin","toValue","panMax","pointRangePadding","flipped","hasVerticalPanning","newMin","newMax","panningState","spill","processedData","getProcessedData","dataExtremes","yData","startMin","Number","MAX_VALUE","startMax","dataMin","dataMax","threshold","paddedMin","toPixels","minPixelPadding","paddedMax","isOrdinal","setExtremes","trigger","match","down"],"sources":["D:/Vamtage/angular-widget-project/node_modules/highcharts/es-modules/Core/Chart/Chart.js"],"sourcesContent":["/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport A from '../Animation/AnimationUtilities.js';\nconst { animate, animObject, setAnimation } = A;\nimport Axis from '../Axis/Axis.js';\nimport D from '../Defaults.js';\nconst { defaultOptions, defaultTime } = D;\nimport Templating from '../Templating.js';\nconst { numberFormat } = Templating;\nimport Foundation from '../Foundation.js';\nconst { registerEventOptions } = Foundation;\nimport H from '../Globals.js';\nconst { charts, doc, marginNames, svg, win } = H;\nimport RendererRegistry from '../Renderer/RendererRegistry.js';\nimport Series from '../Series/Series.js';\nimport SeriesRegistry from '../Series/SeriesRegistry.js';\nconst { seriesTypes } = SeriesRegistry;\nimport SVGRenderer from '../Renderer/SVG/SVGRenderer.js';\nimport Time from '../Time.js';\nimport U from '../Utilities.js';\nimport AST from '../Renderer/HTML/AST.js';\nconst { addEvent, attr, createElement, css, defined, diffObjects, discardElement, erase, error, extend, find, fireEvent, getStyle, isArray, isNumber, isObject, isString, merge, objectEach, pick, pInt, relativeLength, removeEvent, splat, syncTimeout, uniqueKey } = U;\n/* *\n *\n *  Class\n *\n * */\n/* eslint-disable no-invalid-this, valid-jsdoc */\n/**\n * The Chart class. The recommended constructor is {@link Highcharts#chart}.\n *\n * @example\n * let chart = Highcharts.chart('container', {\n *        title: {\n *               text: 'My chart'\n *        },\n *        series: [{\n *            data: [1, 3, 2, 4]\n *        }]\n * })\n *\n * @class\n * @name Highcharts.Chart\n *\n * @param {string|Highcharts.HTMLDOMElement} [renderTo]\n *        The DOM element to render to, or its id.\n *\n * @param {Highcharts.Options} options\n *        The chart options structure.\n *\n * @param {Highcharts.ChartCallbackFunction} [callback]\n *        Function to run when the chart has loaded and and all external images\n *        are loaded. Defining a\n *        [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n *        handler is equivalent.\n */\nclass Chart {\n    /**\n     * Factory function for basic charts.\n     *\n     * @example\n     * // Render a chart in to div#container\n     * let chart = Highcharts.chart('container', {\n     *     title: {\n     *         text: 'My chart'\n     *     },\n     *     series: [{\n     *         data: [1, 3, 2, 4]\n     *     }]\n     * });\n     *\n     * @function Highcharts.chart\n     *\n     * @param {string|Highcharts.HTMLDOMElement} [renderTo]\n     * The DOM element to render to, or its id.\n     *\n     * @param {Highcharts.Options} options\n     * The chart options structure.\n     *\n     * @param {Highcharts.ChartCallbackFunction} [callback]\n     * Function to run when the chart has loaded and and all external images are\n     * loaded. Defining a\n     * [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n     * handler is equivalent.\n     *\n     * @return {Highcharts.Chart}\n     * Returns the Chart object.\n     */\n    static chart(a, b, c) {\n        return new Chart(a, b, c);\n    }\n    constructor(a, b, c) {\n        this.axes = void 0;\n        this.axisOffset = void 0;\n        this.bounds = void 0;\n        this.chartHeight = void 0;\n        this.chartWidth = void 0;\n        this.clipBox = void 0;\n        this.colorCounter = void 0;\n        this.container = void 0;\n        this.eventOptions = void 0;\n        this.index = void 0;\n        this.isResizing = void 0;\n        this.labelCollectors = void 0;\n        this.margin = void 0;\n        this.numberFormatter = void 0;\n        this.options = void 0;\n        this.plotBox = void 0;\n        this.plotHeight = void 0;\n        this.plotLeft = void 0;\n        this.plotTop = void 0;\n        this.plotWidth = void 0;\n        this.pointCount = void 0;\n        this.pointer = void 0;\n        this.renderer = void 0;\n        this.renderTo = void 0;\n        this.series = void 0;\n        this.sharedClips = {};\n        this.spacing = void 0;\n        this.spacingBox = void 0;\n        this.symbolCounter = void 0;\n        this.time = void 0;\n        this.titleOffset = void 0;\n        this.userOptions = void 0;\n        this.xAxis = void 0;\n        this.yAxis = void 0;\n        this.zooming = void 0;\n        this.getArgs(a, b, c);\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Handle the arguments passed to the constructor.\n     *\n     * @private\n     * @function Highcharts.Chart#getArgs\n     *\n     * @param {...Array<*>} arguments\n     * All arguments for the constructor.\n     *\n     * @emits Highcharts.Chart#event:init\n     * @emits Highcharts.Chart#event:afterInit\n     */\n    getArgs(a, b, c) {\n        // Remove the optional first argument, renderTo, and\n        // set it on this.\n        if (isString(a) || a.nodeName) {\n            this.renderTo = a;\n            this.init(b, c);\n        }\n        else {\n            this.init(a, b);\n        }\n    }\n    /**\n     * Function setting zoom options after chart init and after chart update.\n     * Offers support for deprecated options.\n     *\n     * @private\n     * @function Highcharts.Chart#setZoomOptions\n     */\n    setZoomOptions() {\n        const chart = this, options = chart.options.chart, zooming = options.zooming;\n        chart.zooming = {\n            ...zooming,\n            type: pick(options.zoomType, zooming.type),\n            key: pick(options.zoomKey, zooming.key),\n            pinchType: pick(options.pinchType, zooming.pinchType),\n            singleTouch: pick(options.zoomBySingleTouch, zooming.singleTouch, false),\n            resetButton: merge(zooming.resetButton, options.resetZoomButton)\n        };\n    }\n    /**\n     * Overridable function that initializes the chart. The constructor's\n     * arguments are passed on directly.\n     *\n     * @function Highcharts.Chart#init\n     *\n     * @param {Highcharts.Options} userOptions\n     *        Custom options.\n     *\n     * @param {Function} [callback]\n     *        Function to run when the chart has loaded and and all external\n     *        images are loaded.\n     *\n     *\n     * @emits Highcharts.Chart#event:init\n     * @emits Highcharts.Chart#event:afterInit\n     */\n    init(userOptions, callback) {\n        // Fire the event with a default function\n        fireEvent(this, 'init', { args: arguments }, function () {\n            const options = merge(defaultOptions, userOptions), // do the merge\n            optionsChart = options.chart;\n            /**\n             * The original options given to the constructor or a chart factory\n             * like {@link Highcharts.chart} and {@link Highcharts.stockChart}.\n             * The original options are shallow copied to avoid mutation. The\n             * copy, `chart.userOptions`, may later be mutated to reflect\n             * updated options throughout the lifetime of the chart.\n             *\n             * For collections, like `series`, `xAxis` and `yAxis`, the chart\n             * user options should always be reflected by the item user option,\n             * so for example the following should always be true:\n             *\n             * `chart.xAxis[0].userOptions === chart.userOptions.xAxis[0]`\n             *\n             * @name Highcharts.Chart#userOptions\n             * @type {Highcharts.Options}\n             */\n            this.userOptions = extend({}, userOptions);\n            this.margin = [];\n            this.spacing = [];\n            // Pixel data bounds for touch zoom\n            this.bounds = { h: {}, v: {} };\n            // An array of functions that returns labels that should be\n            // considered for anti-collision\n            this.labelCollectors = [];\n            this.callback = callback;\n            this.isResizing = 0;\n            /**\n             * The options structure for the chart after merging\n             * {@link #defaultOptions} and {@link #userOptions}. It contains\n             * members for the sub elements like series, legend, tooltip etc.\n             *\n             * @name Highcharts.Chart#options\n             * @type {Highcharts.Options}\n             */\n            this.options = options;\n            /**\n             * All the axes in the chart.\n             *\n             * @see  Highcharts.Chart.xAxis\n             * @see  Highcharts.Chart.yAxis\n             *\n             * @name Highcharts.Chart#axes\n             * @type {Array<Highcharts.Axis>}\n             */\n            this.axes = [];\n            /**\n             * All the current series in the chart.\n             *\n             * @name Highcharts.Chart#series\n             * @type {Array<Highcharts.Series>}\n             */\n            this.series = [];\n            /**\n             * The `Time` object associated with the chart. Since v6.0.5,\n             * time settings can be applied individually for each chart. If\n             * no individual settings apply, the `Time` object is shared by\n             * all instances.\n             *\n             * @name Highcharts.Chart#time\n             * @type {Highcharts.Time}\n             */\n            this.time =\n                userOptions.time && Object.keys(userOptions.time).length ?\n                    new Time(userOptions.time) :\n                    H.time;\n            /**\n             * Callback function to override the default function that formats\n             * all the numbers in the chart. Returns a string with the formatted\n             * number.\n             *\n             * @name Highcharts.Chart#numberFormatter\n             * @type {Highcharts.NumberFormatterCallbackFunction}\n             */\n            this.numberFormatter = optionsChart.numberFormatter || numberFormat;\n            /**\n             * Whether the chart is in styled mode, meaning all presentational\n             * attributes are avoided.\n             *\n             * @name Highcharts.Chart#styledMode\n             * @type {boolean}\n             */\n            this.styledMode = optionsChart.styledMode;\n            this.hasCartesianSeries = optionsChart.showAxes;\n            const chart = this;\n            /**\n             * Index position of the chart in the {@link Highcharts#charts}\n             * property.\n             *\n             * @name Highcharts.Chart#index\n             * @type {number}\n             * @readonly\n             */\n            chart.index = charts.length; // Add the chart to the global lookup\n            charts.push(chart);\n            H.chartCount++;\n            // Chart event handlers\n            registerEventOptions(this, optionsChart);\n            /**\n             * A collection of the X axes in the chart.\n             *\n             * @name Highcharts.Chart#xAxis\n             * @type {Array<Highcharts.Axis>}\n             */\n            chart.xAxis = [];\n            /**\n             * A collection of the Y axes in the chart.\n             *\n             * @name Highcharts.Chart#yAxis\n             * @type {Array<Highcharts.Axis>}\n             *\n             * @todo\n             * Make events official: Fire the event `afterInit`.\n             */\n            chart.yAxis = [];\n            chart.pointCount = chart.colorCounter = chart.symbolCounter = 0;\n            this.setZoomOptions();\n            // Fire after init but before first render, before axes and series\n            // have been initialized.\n            fireEvent(chart, 'afterInit');\n            chart.firstRender();\n        });\n    }\n    /**\n     * Internal function to unitialize an individual series.\n     *\n     * @private\n     * @function Highcharts.Chart#initSeries\n     */\n    initSeries(options) {\n        const chart = this, optionsChart = chart.options.chart, type = (options.type ||\n            optionsChart.type), SeriesClass = seriesTypes[type];\n        // No such series type\n        if (!SeriesClass) {\n            error(17, true, chart, { missingModuleFor: type });\n        }\n        const series = new SeriesClass();\n        if (typeof series.init === 'function') {\n            series.init(chart, options);\n        }\n        return series;\n    }\n    /**\n     * Internal function to set data for all series with enabled sorting.\n     *\n     * @private\n     * @function Highcharts.Chart#setSeriesData\n     */\n    setSeriesData() {\n        this.getSeriesOrderByLinks().forEach(function (series) {\n            // We need to set data for series with sorting after series init\n            if (!series.points && !series.data && series.enabledDataSorting) {\n                series.setData(series.options.data, false);\n            }\n        });\n    }\n    /**\n     * Sort and return chart series in order depending on the number of linked\n     * series.\n     *\n     * @private\n     * @function Highcharts.Series#getSeriesOrderByLinks\n     */\n    getSeriesOrderByLinks() {\n        return this.series.concat().sort(function (a, b) {\n            if (a.linkedSeries.length || b.linkedSeries.length) {\n                return b.linkedSeries.length - a.linkedSeries.length;\n            }\n            return 0;\n        });\n    }\n    /**\n     * Order all series or axes above a given index. When series or axes are\n     * added and ordered by configuration, only the last series is handled\n     * (#248, #1123, #2456, #6112). This function is called on series and axis\n     * initialization and destroy.\n     *\n     * @private\n     * @function Highcharts.Chart#orderItems\n     * @param {string} coll The collection name\n     * @param {number} [fromIndex=0]\n     * If this is given, only the series above this index are handled.\n     */\n    orderItems(coll, fromIndex = 0) {\n        const collection = this[coll], \n        // Item options should be reflected in chart.options.series,\n        // chart.options.yAxis etc\n        optionsArray = this.options[coll] = splat(this.options[coll])\n            .slice(), userOptionsArray = this.userOptions[coll] = this.userOptions[coll] ?\n            splat(this.userOptions[coll]).slice() :\n            [];\n        if (this.hasRendered) {\n            // Remove all above index\n            optionsArray.splice(fromIndex);\n            userOptionsArray.splice(fromIndex);\n        }\n        if (collection) {\n            for (let i = fromIndex, iEnd = collection.length; i < iEnd; ++i) {\n                const item = collection[i];\n                if (item) {\n                    /**\n                     * Contains the series' index in the `Chart.series` array.\n                     *\n                     * @name Highcharts.Series#index\n                     * @type {number}\n                     * @readonly\n                     */\n                    item.index = i;\n                    if (item instanceof Series) {\n                        item.name = item.getName();\n                    }\n                    if (!item.options.isInternal) {\n                        optionsArray[i] = item.options;\n                        userOptionsArray[i] = item.userOptions;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Check whether a given point is within the plot area.\n     *\n     * @function Highcharts.Chart#isInsidePlot\n     *\n     * @param {number} plotX\n     * Pixel x relative to the plot area.\n     *\n     * @param {number} plotY\n     * Pixel y relative to the plot area.\n     *\n     * @param {Highcharts.ChartIsInsideOptionsObject} [options]\n     * Options object.\n     *\n     * @return {boolean}\n     * Returns true if the given point is inside the plot area.\n     */\n    isInsidePlot(plotX, plotY, options = {}) {\n        const { inverted, plotBox, plotLeft, plotTop, scrollablePlotBox } = this;\n        let scrollLeft = 0, scrollTop = 0;\n        if (options.visiblePlotOnly && this.scrollingContainer) {\n            ({ scrollLeft, scrollTop } = this.scrollingContainer);\n        }\n        const series = options.series, box = (options.visiblePlotOnly && scrollablePlotBox) || plotBox, x = options.inverted ? plotY : plotX, y = options.inverted ? plotX : plotY, e = {\n            x,\n            y,\n            isInsidePlot: true,\n            options\n        };\n        if (!options.ignoreX) {\n            const xAxis = (series &&\n                (inverted && !this.polar ? series.yAxis : series.xAxis)) || {\n                pos: plotLeft,\n                len: Infinity\n            };\n            const chartX = options.paneCoordinates ?\n                xAxis.pos + x : plotLeft + x;\n            if (!(chartX >= Math.max(scrollLeft + plotLeft, xAxis.pos) &&\n                chartX <= Math.min(scrollLeft + plotLeft + box.width, xAxis.pos + xAxis.len))) {\n                e.isInsidePlot = false;\n            }\n        }\n        if (!options.ignoreY && e.isInsidePlot) {\n            const yAxis = (!inverted && options.axis &&\n                !options.axis.isXAxis && options.axis) || (series && (inverted ? series.xAxis : series.yAxis)) || {\n                pos: plotTop,\n                len: Infinity\n            };\n            const chartY = options.paneCoordinates ?\n                yAxis.pos + y : plotTop + y;\n            if (!(chartY >= Math.max(scrollTop + plotTop, yAxis.pos) &&\n                chartY <= Math.min(scrollTop + plotTop + box.height, yAxis.pos + yAxis.len))) {\n                e.isInsidePlot = false;\n            }\n        }\n        fireEvent(this, 'afterIsInsidePlot', e);\n        return e.isInsidePlot;\n    }\n    /**\n     * Redraw the chart after changes have been done to the data, axis extremes\n     * chart size or chart elements. All methods for updating axes, series or\n     * points have a parameter for redrawing the chart. This is `true` by\n     * default. But in many cases you want to do more than one operation on the\n     * chart before redrawing, for example add a number of points. In those\n     * cases it is a waste of resources to redraw the chart for each new point\n     * added. So you add the points and call `chart.redraw()` after.\n     *\n     * @function Highcharts.Chart#redraw\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     * If or how to apply animation to the redraw. When `undefined`, it applies\n     * the animation that is set in the `chart.animation` option.\n     *\n     * @emits Highcharts.Chart#event:afterSetExtremes\n     * @emits Highcharts.Chart#event:beforeRedraw\n     * @emits Highcharts.Chart#event:predraw\n     * @emits Highcharts.Chart#event:redraw\n     * @emits Highcharts.Chart#event:render\n     * @emits Highcharts.Chart#event:updatedData\n     */\n    redraw(animation) {\n        fireEvent(this, 'beforeRedraw');\n        const chart = this, axes = chart.hasCartesianSeries ? chart.axes : chart.colorAxis || [], series = chart.series, pointer = chart.pointer, legend = chart.legend, legendUserOptions = chart.userOptions.legend, renderer = chart.renderer, isHiddenChart = renderer.isHidden(), afterRedraw = [];\n        let hasDirtyStacks, hasStackedSeries, i, isDirtyBox = chart.isDirtyBox, redrawLegend = chart.isDirtyLegend, serie;\n        renderer.rootFontSize = renderer.boxWrapper.getStyle('font-size');\n        // Handle responsive rules, not only on resize (#6130)\n        if (chart.setResponsive) {\n            chart.setResponsive(false);\n        }\n        // Set the global animation. When chart.hasRendered is not true, the\n        // redraw call comes from a responsive rule and animation should not\n        // occur.\n        setAnimation(chart.hasRendered ? animation : false, chart);\n        if (isHiddenChart) {\n            chart.temporaryDisplay();\n        }\n        // Adjust title layout (reflow multiline text)\n        chart.layOutTitles(false);\n        // link stacked series\n        i = series.length;\n        while (i--) {\n            serie = series[i];\n            if (serie.options.stacking || serie.options.centerInCategory) {\n                hasStackedSeries = true;\n                if (serie.isDirty) {\n                    hasDirtyStacks = true;\n                    break;\n                }\n            }\n        }\n        if (hasDirtyStacks) { // mark others as dirty\n            i = series.length;\n            while (i--) {\n                serie = series[i];\n                if (serie.options.stacking) {\n                    serie.isDirty = true;\n                }\n            }\n        }\n        // Handle updated data in the series\n        series.forEach(function (serie) {\n            if (serie.isDirty) {\n                if (serie.options.legendType === 'point') {\n                    if (typeof serie.updateTotals === 'function') {\n                        serie.updateTotals();\n                    }\n                    redrawLegend = true;\n                }\n                else if (legendUserOptions &&\n                    (!!legendUserOptions.labelFormatter ||\n                        legendUserOptions.labelFormat)) {\n                    redrawLegend = true; // #2165\n                }\n            }\n            if (serie.isDirtyData) {\n                fireEvent(serie, 'updatedData');\n            }\n        });\n        // handle added or removed series\n        if (redrawLegend && legend && legend.options.enabled) {\n            // draw legend graphics\n            legend.render();\n            chart.isDirtyLegend = false;\n        }\n        // reset stacks\n        if (hasStackedSeries) {\n            chart.getStacks();\n        }\n        // set axes scales\n        axes.forEach(function (axis) {\n            axis.updateNames();\n            axis.setScale();\n        });\n        chart.getMargins(); // #3098\n        // If one axis is dirty, all axes must be redrawn (#792, #2169)\n        axes.forEach(function (axis) {\n            if (axis.isDirty) {\n                isDirtyBox = true;\n            }\n        });\n        // redraw axes\n        axes.forEach(function (axis) {\n            // Fire 'afterSetExtremes' only if extremes are set\n            const key = axis.min + ',' + axis.max;\n            if (axis.extKey !== key) { // #821, #4452\n                axis.extKey = key;\n                // prevent a recursive call to chart.redraw() (#1119)\n                afterRedraw.push(function () {\n                    fireEvent(axis, 'afterSetExtremes', extend(axis.eventArgs, axis.getExtremes())); // #747, #751\n                    delete axis.eventArgs;\n                });\n            }\n            if (isDirtyBox || hasStackedSeries) {\n                axis.redraw();\n            }\n        });\n        // the plot areas size has changed\n        if (isDirtyBox) {\n            chart.drawChartBox();\n        }\n        // Fire an event before redrawing series, used by the boost module to\n        // clear previous series renderings.\n        fireEvent(chart, 'predraw');\n        // redraw affected series\n        series.forEach(function (serie) {\n            if ((isDirtyBox || serie.isDirty) && serie.visible) {\n                serie.redraw();\n            }\n            // Set it here, otherwise we will have unlimited 'updatedData' calls\n            // for a hidden series after setData(). Fixes #6012\n            serie.isDirtyData = false;\n        });\n        // move tooltip or reset\n        if (pointer) {\n            pointer.reset(true);\n        }\n        // redraw if canvas\n        renderer.draw();\n        // Fire the events\n        fireEvent(chart, 'redraw');\n        fireEvent(chart, 'render');\n        if (isHiddenChart) {\n            chart.temporaryDisplay(true);\n        }\n        // Fire callbacks that are put on hold until after the redraw\n        afterRedraw.forEach(function (callback) {\n            callback.call();\n        });\n    }\n    /**\n     * Get an axis, series or point object by `id` as given in the configuration\n     * options. Returns `undefined` if no item is found.\n     *\n     * @sample highcharts/plotoptions/series-id/\n     *         Get series by id\n     *\n     * @function Highcharts.Chart#get\n     *\n     * @param {string} id\n     * The id as given in the configuration options.\n     *\n     * @return {Highcharts.Axis|Highcharts.Series|Highcharts.Point|undefined}\n     * The retrieved item.\n     */\n    get(id) {\n        const series = this.series;\n        /**\n         * @private\n         */\n        function itemById(item) {\n            return (item.id === id ||\n                (item.options && item.options.id === id));\n        }\n        let ret = \n        // Search axes\n        find(this.axes, itemById) ||\n            // Search series\n            find(this.series, itemById);\n        // Search points\n        for (let i = 0; !ret && i < series.length; i++) {\n            ret = find(series[i].points || [], itemById);\n        }\n        return ret;\n    }\n    /**\n     * Create the Axis instances based on the config options.\n     *\n     * @private\n     * @function Highcharts.Chart#getAxes\n     * @emits Highcharts.Chart#event:afterGetAxes\n     * @emits Highcharts.Chart#event:getAxes\n     */\n    getAxes() {\n        const options = this.options;\n        fireEvent(this, 'getAxes');\n        for (const coll of ['xAxis', 'yAxis']) {\n            const arr = options[coll] = splat(options[coll] || {});\n            for (const axisOptions of arr) {\n                // eslint-disable-next-line no-new\n                new Axis(this, axisOptions, coll);\n            }\n        }\n        fireEvent(this, 'afterGetAxes');\n    }\n    /**\n     * Returns an array of all currently selected points in the chart. Points\n     * can be selected by clicking or programmatically by the\n     * {@link Highcharts.Point#select}\n     * function.\n     *\n     * @sample highcharts/plotoptions/series-allowpointselect-line/\n     *         Get selected points\n     *\n     * @function Highcharts.Chart#getSelectedPoints\n     *\n     * @return {Array<Highcharts.Point>}\n     *         The currently selected points.\n     */\n    getSelectedPoints() {\n        return this.series.reduce((acc, series) => {\n            // For one-to-one points inspect series.data in order to retrieve\n            // points outside the visible range (#6445). For grouped data,\n            // inspect the generated series.points.\n            series.getPointsCollection()\n                .forEach((point) => {\n                if (pick(point.selectedStaging, point.selected)) {\n                    acc.push(point);\n                }\n            });\n            return acc;\n        }, []);\n    }\n    /**\n     * Returns an array of all currently selected series in the chart. Series\n     * can be selected either programmatically by the\n     * {@link Highcharts.Series#select}\n     * function or by checking the checkbox next to the legend item if\n     * [series.showCheckBox](https://api.highcharts.com/highcharts/plotOptions.series.showCheckbox)\n     * is true.\n     *\n     * @sample highcharts/members/chart-getselectedseries/\n     *         Get selected series\n     *\n     * @function Highcharts.Chart#getSelectedSeries\n     *\n     * @return {Array<Highcharts.Series>}\n     *         The currently selected series.\n     */\n    getSelectedSeries() {\n        return this.series.filter(function (serie) {\n            return serie.selected;\n        });\n    }\n    /**\n     * Set a new title or subtitle for the chart.\n     *\n     * @sample highcharts/members/chart-settitle/\n     *         Set title text and styles\n     *\n     * @function Highcharts.Chart#setTitle\n     *\n     * @param {Highcharts.TitleOptions} [titleOptions]\n     *        New title options. The title text itself is set by the\n     *        `titleOptions.text` property.\n     *\n     * @param {Highcharts.SubtitleOptions} [subtitleOptions]\n     *        New subtitle options. The subtitle text itself is set by the\n     *        `subtitleOptions.text` property.\n     *\n     * @param {boolean} [redraw]\n     *        Whether to redraw the chart or wait for a later call to\n     *        `chart.redraw()`.\n     */\n    setTitle(titleOptions, subtitleOptions, redraw) {\n        this.applyDescription('title', titleOptions);\n        this.applyDescription('subtitle', subtitleOptions);\n        // The initial call also adds the caption. On update, chart.update will\n        // relay to Chart.setCaption.\n        this.applyDescription('caption', void 0);\n        this.layOutTitles(redraw);\n    }\n    /**\n     * Apply a title, subtitle or caption for the chart\n     *\n     * @private\n     * @function Highcharts.Chart#applyDescription\n     * @param name {string}\n     * Either title, subtitle or caption\n     * @param {Highcharts.TitleOptions|Highcharts.SubtitleOptions|Highcharts.CaptionOptions|undefined} explicitOptions\n     * The options to set, will be merged with default options.\n     */\n    applyDescription(name, explicitOptions) {\n        const chart = this;\n        // Merge default options with explicit options\n        const options = this.options[name] = merge(this.options[name], explicitOptions);\n        let elem = this[name];\n        if (elem && explicitOptions) {\n            this[name] = elem = elem.destroy(); // remove old\n        }\n        if (options && !elem) {\n            elem = this.renderer.text(options.text, 0, 0, options.useHTML)\n                .attr({\n                align: options.align,\n                'class': 'highcharts-' + name,\n                zIndex: options.zIndex || 4\n            })\n                .add();\n            // Update methods, relay to `applyDescription`\n            elem.update = function (updateOptions, redraw) {\n                chart.applyDescription(name, updateOptions);\n                chart.layOutTitles(redraw);\n            };\n            // Presentational\n            if (!this.styledMode) {\n                elem.css(extend(name === 'title' ? {\n                    // #2944\n                    fontSize: this.options.isStock ? '1em' : '1.2em'\n                } : {}, options.style));\n            }\n            /**\n             * The chart title. The title has an `update` method that allows\n             * modifying the options directly or indirectly via\n             * `chart.update`.\n             *\n             * @sample highcharts/members/title-update/\n             *         Updating titles\n             *\n             * @name Highcharts.Chart#title\n             * @type {Highcharts.TitleObject}\n             */\n            /**\n             * The chart subtitle. The subtitle has an `update` method that\n             * allows modifying the options directly or indirectly via\n             * `chart.update`.\n             *\n             * @name Highcharts.Chart#subtitle\n             * @type {Highcharts.SubtitleObject}\n             */\n            this[name] = elem;\n        }\n    }\n    /**\n     * Internal function to lay out the chart title, subtitle and caption, and\n     * cache the full offset height for use in `getMargins`. The result is\n     * stored in `this.titleOffset`.\n     *\n     * @private\n     * @function Highcharts.Chart#layOutTitles\n     *\n     * @param {boolean} [redraw=true]\n     * @emits Highcharts.Chart#event:afterLayOutTitles\n     */\n    layOutTitles(redraw = true) {\n        const titleOffset = [0, 0, 0], renderer = this.renderer, spacingBox = this.spacingBox;\n        // Lay out the title and the subtitle respectively\n        ['title', 'subtitle', 'caption'].forEach(function (key) {\n            const title = this[key], titleOptions = (this.options[key]), verticalAlign = titleOptions.verticalAlign || 'top', offset = key === 'title' ?\n                verticalAlign === 'top' ? -3 : 0 :\n                // Floating subtitle (#6574)\n                verticalAlign === 'top' ? titleOffset[0] + 2 : 0;\n            if (title) {\n                title\n                    .css({\n                    width: (titleOptions.width ||\n                        spacingBox.width + (titleOptions.widthAdjust || 0)) + 'px'\n                });\n                const baseline = renderer.fontMetrics(title).b, \n                // Skip the cache for HTML (#3481, #11666)\n                height = Math.round(title.getBBox(titleOptions.useHTML).height);\n                title.align(extend({\n                    y: verticalAlign === 'bottom' ?\n                        baseline :\n                        offset + baseline,\n                    height\n                }, titleOptions), false, 'spacingBox');\n                if (!titleOptions.floating) {\n                    if (verticalAlign === 'top') {\n                        titleOffset[0] = Math.ceil(titleOffset[0] +\n                            height);\n                    }\n                    else if (verticalAlign === 'bottom') {\n                        titleOffset[2] = Math.ceil(titleOffset[2] +\n                            height);\n                    }\n                }\n            }\n        }, this);\n        // Handle title.margin and caption.margin\n        if (titleOffset[0] &&\n            (this.options.title.verticalAlign || 'top') === 'top') {\n            titleOffset[0] += this.options.title.margin;\n        }\n        if (titleOffset[2] &&\n            this.options.caption.verticalAlign === 'bottom') {\n            titleOffset[2] += this.options.caption.margin;\n        }\n        const requiresDirtyBox = (!this.titleOffset ||\n            this.titleOffset.join(',') !== titleOffset.join(','));\n        // Used in getMargins\n        this.titleOffset = titleOffset;\n        fireEvent(this, 'afterLayOutTitles');\n        if (!this.isDirtyBox && requiresDirtyBox) {\n            this.isDirtyBox = this.isDirtyLegend = requiresDirtyBox;\n            // Redraw if necessary (#2719, #2744)\n            if (this.hasRendered && redraw && this.isDirtyBox) {\n                this.redraw();\n            }\n        }\n    }\n    /**\n     * Internal function to get the available size of the container element\n     *\n     * @private\n     * @function Highcharts.Chart#getContainerBox\n     */\n    getContainerBox() {\n        return {\n            width: getStyle(this.renderTo, 'width', true) || 0,\n            height: getStyle(this.renderTo, 'height', true) || 0\n        };\n    }\n    /**\n     * Internal function to get the chart width and height according to options\n     * and container size. Sets {@link Chart.chartWidth} and\n     * {@link Chart.chartHeight}.\n     *\n     * @private\n     * @function Highcharts.Chart#getChartSize\n     */\n    getChartSize() {\n        const chart = this, optionsChart = chart.options.chart, widthOption = optionsChart.width, heightOption = optionsChart.height, containerBox = chart.getContainerBox();\n        /**\n         * The current pixel width of the chart.\n         *\n         * @name Highcharts.Chart#chartWidth\n         * @type {number}\n         */\n        chart.chartWidth = Math.max(// #1393\n        0, widthOption || containerBox.width || 600 // #1460\n        );\n        /**\n         * The current pixel height of the chart.\n         *\n         * @name Highcharts.Chart#chartHeight\n         * @type {number}\n         */\n        chart.chartHeight = Math.max(0, relativeLength(heightOption, chart.chartWidth) ||\n            (containerBox.height > 1 ? containerBox.height : 400));\n        chart.containerBox = containerBox;\n    }\n    /**\n     * If the renderTo element has no offsetWidth, most likely one or more of\n     * its parents are hidden. Loop up the DOM tree to temporarily display the\n     * parents, then save the original display properties, and when the true\n     * size is retrieved, reset them. Used on first render and on redraws.\n     *\n     * @private\n     * @function Highcharts.Chart#temporaryDisplay\n     *\n     * @param {boolean} [revert]\n     * Revert to the saved original styles.\n     */\n    temporaryDisplay(revert) {\n        let node = this.renderTo, tempStyle;\n        if (!revert) {\n            while (node && node.style) {\n                // When rendering to a detached node, it needs to be temporarily\n                // attached in order to read styling and bounding boxes (#5783,\n                // #7024).\n                if (!doc.body.contains(node) && !node.parentNode) {\n                    node.hcOrigDetached = true;\n                    doc.body.appendChild(node);\n                }\n                if (getStyle(node, 'display', false) === 'none' ||\n                    node.hcOricDetached) {\n                    node.hcOrigStyle = {\n                        display: node.style.display,\n                        height: node.style.height,\n                        overflow: node.style.overflow\n                    };\n                    tempStyle = {\n                        display: 'block',\n                        overflow: 'hidden'\n                    };\n                    if (node !== this.renderTo) {\n                        tempStyle.height = 0;\n                    }\n                    css(node, tempStyle);\n                    // If it still doesn't have an offset width after setting\n                    // display to block, it probably has an !important priority\n                    // #2631, 6803\n                    if (!node.offsetWidth) {\n                        node.style.setProperty('display', 'block', 'important');\n                    }\n                }\n                node = node.parentNode;\n                if (node === doc.body) {\n                    break;\n                }\n            }\n        }\n        else {\n            while (node && node.style) {\n                if (node.hcOrigStyle) {\n                    css(node, node.hcOrigStyle);\n                    delete node.hcOrigStyle;\n                }\n                if (node.hcOrigDetached) {\n                    doc.body.removeChild(node);\n                    node.hcOrigDetached = false;\n                }\n                node = node.parentNode;\n            }\n        }\n    }\n    /**\n     * Set the {@link Chart.container|chart container's} class name, in\n     * addition to `highcharts-container`.\n     *\n     * @function Highcharts.Chart#setClassName\n     *\n     * @param {string} [className]\n     * The additional class name.\n     */\n    setClassName(className) {\n        this.container.className = 'highcharts-container ' + (className || '');\n    }\n    /**\n     * Get the containing element, determine the size and create the inner\n     * container div to hold the chart.\n     *\n     * @private\n     * @function Highcharts.Chart#afterGetContainer\n     * @emits Highcharts.Chart#event:afterGetContainer\n     */\n    getContainer() {\n        const chart = this, options = chart.options, optionsChart = options.chart, indexAttrName = 'data-highcharts-chart', containerId = uniqueKey();\n        let containerStyle, renderTo = chart.renderTo;\n        if (!renderTo) {\n            chart.renderTo = renderTo =\n                optionsChart.renderTo;\n        }\n        if (isString(renderTo)) {\n            chart.renderTo = renderTo =\n                doc.getElementById(renderTo);\n        }\n        // Display an error if the renderTo is wrong\n        if (!renderTo) {\n            error(13, true, chart);\n        }\n        // If the container already holds a chart, destroy it. The check for\n        // hasRendered is there because web pages that are saved to disk from\n        // the browser, will preserve the data-highcharts-chart attribute and\n        // the SVG contents, but not an interactive chart. So in this case,\n        // charts[oldChartIndex] will point to the wrong chart if any (#2609).\n        const oldChartIndex = pInt(attr(renderTo, indexAttrName));\n        if (isNumber(oldChartIndex) &&\n            charts[oldChartIndex] &&\n            charts[oldChartIndex].hasRendered) {\n            charts[oldChartIndex].destroy();\n        }\n        // Make a reference to the chart from the div\n        attr(renderTo, indexAttrName, chart.index);\n        // remove previous chart\n        renderTo.innerHTML = AST.emptyHTML;\n        // If the container doesn't have an offsetWidth, it has or is a child of\n        // a node that has display:none. We need to temporarily move it out to a\n        // visible state to determine the size, else the legend and tooltips\n        // won't render properly. The skipClone option is used in sparklines as\n        // a micro optimization, saving about 1-2 ms each chart.\n        if (!optionsChart.skipClone && !renderTo.offsetWidth) {\n            chart.temporaryDisplay();\n        }\n        // get the width and height\n        chart.getChartSize();\n        const chartWidth = chart.chartWidth;\n        const chartHeight = chart.chartHeight;\n        // Allow table cells and flex-boxes to shrink without the chart blocking\n        // them out (#6427)\n        css(renderTo, { overflow: 'hidden' });\n        // Create the inner container\n        if (!chart.styledMode) {\n            containerStyle = extend({\n                position: 'relative',\n                // needed for context menu (avoidscrollbars) and content\n                // overflow in IE\n                overflow: 'hidden',\n                width: chartWidth + 'px',\n                height: chartHeight + 'px',\n                textAlign: 'left',\n                lineHeight: 'normal',\n                zIndex: 0,\n                '-webkit-tap-highlight-color': 'rgba(0,0,0,0)',\n                userSelect: 'none',\n                'touch-action': 'manipulation',\n                outline: 'none'\n            }, optionsChart.style || {});\n        }\n        /**\n         * The containing HTML element of the chart. The container is\n         * dynamically inserted into the element given as the `renderTo`\n         * parameter in the {@link Highcharts#chart} constructor.\n         *\n         * @name Highcharts.Chart#container\n         * @type {Highcharts.HTMLDOMElement}\n         */\n        const container = createElement('div', {\n            id: containerId\n        }, containerStyle, renderTo);\n        chart.container = container;\n        // cache the cursor (#1650)\n        chart._cursor = container.style.cursor;\n        // Initialize the renderer\n        const Renderer = optionsChart.renderer || !svg ?\n            RendererRegistry.getRendererType(optionsChart.renderer) :\n            SVGRenderer;\n        /**\n         * The renderer instance of the chart. Each chart instance has only one\n         * associated renderer.\n         *\n         * @name Highcharts.Chart#renderer\n         * @type {Highcharts.SVGRenderer}\n         */\n        chart.renderer = new Renderer(container, chartWidth, chartHeight, void 0, optionsChart.forExport, options.exporting && options.exporting.allowHTML, chart.styledMode);\n        chart.containerBox = chart.getContainerBox();\n        // Set the initial animation from the options\n        setAnimation(void 0, chart);\n        chart.setClassName(optionsChart.className);\n        if (!chart.styledMode) {\n            chart.renderer.setStyle(optionsChart.style);\n        }\n        else {\n            // Initialize definitions\n            for (const key in options.defs) { // eslint-disable-line guard-for-in\n                this.renderer.definition(options.defs[key]);\n            }\n        }\n        // Add a reference to the charts index\n        chart.renderer.chartIndex = chart.index;\n        fireEvent(this, 'afterGetContainer');\n    }\n    /**\n     * Calculate margins by rendering axis labels in a preliminary position.\n     * Title, subtitle and legend have already been rendered at this stage, but\n     * will be moved into their final positions.\n     *\n     * @private\n     * @function Highcharts.Chart#getMargins\n     * @emits Highcharts.Chart#event:getMargins\n     */\n    getMargins(skipAxes) {\n        const { spacing, margin, titleOffset } = this;\n        this.resetMargins();\n        // Adjust for title and subtitle\n        if (titleOffset[0] && !defined(margin[0])) {\n            this.plotTop = Math.max(this.plotTop, titleOffset[0] + spacing[0]);\n        }\n        if (titleOffset[2] && !defined(margin[2])) {\n            this.marginBottom = Math.max(this.marginBottom, titleOffset[2] + spacing[2]);\n        }\n        // Adjust for legend\n        if (this.legend && this.legend.display) {\n            this.legend.adjustMargins(margin, spacing);\n        }\n        fireEvent(this, 'getMargins');\n        if (!skipAxes) {\n            this.getAxisMargins();\n        }\n    }\n    /**\n     * @private\n     * @function Highcharts.Chart#getAxisMargins\n     */\n    getAxisMargins() {\n        const chart = this, \n        // [top, right, bottom, left]\n        axisOffset = chart.axisOffset = [0, 0, 0, 0], colorAxis = chart.colorAxis, margin = chart.margin, getOffset = function (axes) {\n            axes.forEach(function (axis) {\n                if (axis.visible) {\n                    axis.getOffset();\n                }\n            });\n        };\n        // pre-render axes to get labels offset width\n        if (chart.hasCartesianSeries) {\n            getOffset(chart.axes);\n        }\n        else if (colorAxis && colorAxis.length) {\n            getOffset(colorAxis);\n        }\n        // Add the axis offsets\n        marginNames.forEach(function (m, side) {\n            if (!defined(margin[side])) {\n                chart[m] += axisOffset[side];\n            }\n        });\n        chart.setChartSize();\n    }\n    /**\n     * Return the current options of the chart, but only those that differ from\n     * default options. Items that can be either an object or an array of\n     * objects, like `series`, `xAxis` and `yAxis`, are always returned as\n     * array.\n     *\n     * @sample highcharts/members/chart-getoptions\n     *\n     * @function Highcharts.Chart#getOptions\n     *\n     * @since 11.1.0\n     */\n    getOptions() {\n        return diffObjects(this.userOptions, defaultOptions);\n    }\n    /**\n     * Reflows the chart to its container. By default, the Resize Observer is\n     * attached to the chart's div which allows to reflows the chart\n     * automatically to its container, as per the\n     * [chart.reflow](https://api.highcharts.com/highcharts/chart.reflow)\n     * option.\n     *\n     * @sample highcharts/chart/events-container/\n     *         Pop up and reflow\n     *\n     * @function Highcharts.Chart#reflow\n     *\n     * @param {global.Event} [e]\n     *        Event arguments. Used primarily when the function is called\n     *        internally as a response to window resize.\n     */\n    reflow(e) {\n        const chart = this, oldBox = chart.containerBox, containerBox = chart.getContainerBox();\n        delete chart.pointer.chartPosition;\n        // Width and height checks for display:none. Target is doc in Opera\n        // and win in Firefox, Chrome and IE9.\n        if (!chart.isPrinting &&\n            !chart.isResizing &&\n            oldBox &&\n            // When fired by resize observer inside hidden container\n            containerBox.width) {\n            if (containerBox.width !== oldBox.width ||\n                containerBox.height !== oldBox.height) {\n                U.clearTimeout(chart.reflowTimeout);\n                // When called from window.resize, e is set, else it's called\n                // directly (#2224)\n                chart.reflowTimeout = syncTimeout(function () {\n                    // Set size, it may have been destroyed in the meantime\n                    // (#1257)\n                    if (chart.container) {\n                        chart.setSize(void 0, void 0, false);\n                    }\n                }, e ? 100 : 0);\n            }\n            chart.containerBox = containerBox;\n        }\n    }\n    /**\n     * Toggle the event handlers necessary for auto resizing, depending on the\n     * `chart.reflow` option.\n     *\n     * @private\n     * @function Highcharts.Chart#setReflow\n     */\n    setReflow() {\n        const chart = this;\n        const runReflow = (e) => {\n            if (chart.options?.chart.reflow && chart.hasLoaded) {\n                chart.reflow(e);\n            }\n        };\n        if (typeof ResizeObserver === 'function') {\n            (new ResizeObserver(runReflow)).observe(chart.renderTo);\n            // Fallback for more legacy browser versions.\n        }\n        else {\n            const unbind = addEvent(win, 'resize', runReflow);\n            addEvent(this, 'destroy', unbind);\n        }\n    }\n    /**\n     * Resize the chart to a given width and height. In order to set the width\n     * only, the height argument may be skipped. To set the height only, pass\n     * `undefined` for the width.\n     *\n     * @sample highcharts/members/chart-setsize-button/\n     *         Test resizing from buttons\n     * @sample highcharts/members/chart-setsize-jquery-resizable/\n     *         Add a jQuery UI resizable\n     * @sample stock/members/chart-setsize/\n     *         Highcharts Stock with UI resizable\n     *\n     * @function Highcharts.Chart#setSize\n     *\n     * @param {number|null} [width]\n     *        The new pixel width of the chart. Since v4.2.6, the argument can\n     *        be `undefined` in order to preserve the current value (when\n     *        setting height only), or `null` to adapt to the width of the\n     *        containing element.\n     *\n     * @param {number|null} [height]\n     *        The new pixel height of the chart. Since v4.2.6, the argument can\n     *        be `undefined` in order to preserve the current value, or `null`\n     *        in order to adapt to the height of the containing element.\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     *        Whether and how to apply animation. When `undefined`, it applies\n     *        the animation that is set in the `chart.animation` option.\n     *\n     *\n     * @emits Highcharts.Chart#event:endResize\n     * @emits Highcharts.Chart#event:resize\n     */\n    setSize(width, height, animation) {\n        const chart = this, renderer = chart.renderer;\n        // Handle the isResizing counter\n        chart.isResizing += 1;\n        // set the animation for the current process\n        setAnimation(animation, chart);\n        const globalAnimation = renderer.globalAnimation;\n        chart.oldChartHeight = chart.chartHeight;\n        chart.oldChartWidth = chart.chartWidth;\n        if (typeof width !== 'undefined') {\n            chart.options.chart.width = width;\n        }\n        if (typeof height !== 'undefined') {\n            chart.options.chart.height = height;\n        }\n        chart.getChartSize();\n        // Resize the container with the global animation applied if enabled\n        // (#2503)\n        if (!chart.styledMode) {\n            (globalAnimation ? animate : css)(chart.container, {\n                width: chart.chartWidth + 'px',\n                height: chart.chartHeight + 'px'\n            }, globalAnimation);\n        }\n        chart.setChartSize(true);\n        renderer.setSize(chart.chartWidth, chart.chartHeight, globalAnimation);\n        // handle axes\n        chart.axes.forEach(function (axis) {\n            axis.isDirty = true;\n            axis.setScale();\n        });\n        chart.isDirtyLegend = true; // force legend redraw\n        chart.isDirtyBox = true; // force redraw of plot and chart border\n        chart.layOutTitles(); // #2857\n        chart.getMargins();\n        chart.redraw(globalAnimation);\n        chart.oldChartHeight = null;\n        fireEvent(chart, 'resize');\n        // Fire endResize and set isResizing back. If animation is disabled,\n        // fire without delay, but in a new thread to avoid triggering the\n        // resize observer (#19027).\n        setTimeout(() => {\n            if (chart) {\n                fireEvent(chart, 'endResize', void 0, () => {\n                    chart.isResizing -= 1;\n                });\n            }\n        }, animObject(globalAnimation).duration);\n    }\n    /**\n     * Set the public chart properties. This is done before and after the\n     * pre-render to determine margin sizes.\n     *\n     * @private\n     * @function Highcharts.Chart#setChartSize\n     * @emits Highcharts.Chart#event:afterSetChartSize\n     */\n    setChartSize(skipAxes) {\n        const chart = this, inverted = chart.inverted, renderer = chart.renderer, chartWidth = chart.chartWidth, chartHeight = chart.chartHeight, optionsChart = chart.options.chart, spacing = chart.spacing, clipOffset = chart.clipOffset;\n        let plotLeft, plotTop, plotWidth, plotHeight;\n        /**\n         * The current left position of the plot area in pixels.\n         *\n         * @name Highcharts.Chart#plotLeft\n         * @type {number}\n         */\n        chart.plotLeft = plotLeft = Math.round(chart.plotLeft);\n        /**\n         * The current top position of the plot area in pixels.\n         *\n         * @name Highcharts.Chart#plotTop\n         * @type {number}\n         */\n        chart.plotTop = plotTop = Math.round(chart.plotTop);\n        /**\n         * The current width of the plot area in pixels.\n         *\n         * @name Highcharts.Chart#plotWidth\n         * @type {number}\n         */\n        chart.plotWidth = plotWidth = Math.max(0, Math.round(chartWidth - plotLeft - chart.marginRight));\n        /**\n         * The current height of the plot area in pixels.\n         *\n         * @name Highcharts.Chart#plotHeight\n         * @type {number}\n         */\n        chart.plotHeight = plotHeight = Math.max(0, Math.round(chartHeight - plotTop - chart.marginBottom));\n        chart.plotSizeX = inverted ? plotHeight : plotWidth;\n        chart.plotSizeY = inverted ? plotWidth : plotHeight;\n        chart.plotBorderWidth = optionsChart.plotBorderWidth || 0;\n        // Set boxes used for alignment\n        chart.spacingBox = renderer.spacingBox = {\n            x: spacing[3],\n            y: spacing[0],\n            width: chartWidth - spacing[3] - spacing[1],\n            height: chartHeight - spacing[0] - spacing[2]\n        };\n        chart.plotBox = renderer.plotBox = {\n            x: plotLeft,\n            y: plotTop,\n            width: plotWidth,\n            height: plotHeight\n        };\n        const plotBorderWidth = 2 * Math.floor(chart.plotBorderWidth / 2), clipX = Math.ceil(Math.max(plotBorderWidth, clipOffset[3]) / 2), clipY = Math.ceil(Math.max(plotBorderWidth, clipOffset[0]) / 2);\n        chart.clipBox = {\n            x: clipX,\n            y: clipY,\n            width: Math.floor(chart.plotSizeX -\n                Math.max(plotBorderWidth, clipOffset[1]) / 2 -\n                clipX),\n            height: Math.max(0, Math.floor(chart.plotSizeY -\n                Math.max(plotBorderWidth, clipOffset[2]) / 2 -\n                clipY))\n        };\n        if (!skipAxes) {\n            chart.axes.forEach(function (axis) {\n                axis.setAxisSize();\n                axis.setAxisTranslation();\n            });\n            renderer.alignElements();\n        }\n        fireEvent(chart, 'afterSetChartSize', { skipAxes: skipAxes });\n    }\n    /**\n     * Initial margins before auto size margins are applied.\n     *\n     * @private\n     * @function Highcharts.Chart#resetMargins\n     */\n    resetMargins() {\n        fireEvent(this, 'resetMargins');\n        const chart = this, chartOptions = chart.options.chart;\n        // Create margin and spacing array\n        ['margin', 'spacing'].forEach(function splashArrays(target) {\n            const value = chartOptions[target], values = isObject(value) ? value : [value, value, value, value];\n            [\n                'Top',\n                'Right',\n                'Bottom',\n                'Left'\n            ].forEach(function (sideName, side) {\n                chart[target][side] = pick(chartOptions[target + sideName], values[side]);\n            });\n        });\n        // Set margin names like chart.plotTop, chart.plotLeft,\n        // chart.marginRight, chart.marginBottom.\n        marginNames.forEach(function (m, side) {\n            chart[m] = pick(chart.margin[side], chart.spacing[side]);\n        });\n        chart.axisOffset = [0, 0, 0, 0]; // top, right, bottom, left\n        chart.clipOffset = [0, 0, 0, 0];\n    }\n    /**\n     * Internal function to draw or redraw the borders and backgrounds for chart\n     * and plot area.\n     *\n     * @private\n     * @function Highcharts.Chart#drawChartBox\n     * @emits Highcharts.Chart#event:afterDrawChartBox\n     */\n    drawChartBox() {\n        const chart = this, optionsChart = chart.options.chart, renderer = chart.renderer, chartWidth = chart.chartWidth, chartHeight = chart.chartHeight, styledMode = chart.styledMode, plotBGImage = chart.plotBGImage, chartBackgroundColor = optionsChart.backgroundColor, plotBackgroundColor = optionsChart.plotBackgroundColor, plotBackgroundImage = optionsChart.plotBackgroundImage, plotLeft = chart.plotLeft, plotTop = chart.plotTop, plotWidth = chart.plotWidth, plotHeight = chart.plotHeight, plotBox = chart.plotBox, clipRect = chart.clipRect, clipBox = chart.clipBox;\n        let chartBackground = chart.chartBackground, plotBackground = chart.plotBackground, plotBorder = chart.plotBorder, chartBorderWidth, mgn, bgAttr, verb = 'animate';\n        // Chart area\n        if (!chartBackground) {\n            chart.chartBackground = chartBackground = renderer.rect()\n                .addClass('highcharts-background')\n                .add();\n            verb = 'attr';\n        }\n        if (!styledMode) {\n            // Presentational\n            chartBorderWidth = optionsChart.borderWidth || 0;\n            mgn = chartBorderWidth + (optionsChart.shadow ? 8 : 0);\n            bgAttr = {\n                fill: chartBackgroundColor || 'none'\n            };\n            if (chartBorderWidth || chartBackground['stroke-width']) { // #980\n                bgAttr.stroke = optionsChart.borderColor;\n                bgAttr['stroke-width'] = chartBorderWidth;\n            }\n            chartBackground\n                .attr(bgAttr)\n                .shadow(optionsChart.shadow);\n        }\n        else {\n            chartBorderWidth = mgn = chartBackground.strokeWidth();\n        }\n        chartBackground[verb]({\n            x: mgn / 2,\n            y: mgn / 2,\n            width: chartWidth - mgn - chartBorderWidth % 2,\n            height: chartHeight - mgn - chartBorderWidth % 2,\n            r: optionsChart.borderRadius\n        });\n        // Plot background\n        verb = 'animate';\n        if (!plotBackground) {\n            verb = 'attr';\n            chart.plotBackground = plotBackground = renderer.rect()\n                .addClass('highcharts-plot-background')\n                .add();\n        }\n        plotBackground[verb](plotBox);\n        if (!styledMode) {\n            // Presentational attributes for the background\n            plotBackground\n                .attr({\n                fill: plotBackgroundColor || 'none'\n            })\n                .shadow(optionsChart.plotShadow);\n            // Create the background image\n            if (plotBackgroundImage) {\n                if (!plotBGImage) {\n                    chart.plotBGImage = renderer.image(plotBackgroundImage, plotLeft, plotTop, plotWidth, plotHeight).add();\n                }\n                else {\n                    if (plotBackgroundImage !== plotBGImage.attr('href')) {\n                        plotBGImage.attr('href', plotBackgroundImage);\n                    }\n                    plotBGImage.animate(plotBox);\n                }\n            }\n        }\n        // Plot clip\n        if (!clipRect) {\n            chart.clipRect = renderer.clipRect(clipBox);\n        }\n        else {\n            clipRect.animate({\n                width: clipBox.width,\n                height: clipBox.height\n            });\n        }\n        // Plot area border\n        verb = 'animate';\n        if (!plotBorder) {\n            verb = 'attr';\n            chart.plotBorder = plotBorder = renderer.rect()\n                .addClass('highcharts-plot-border')\n                .attr({\n                zIndex: 1 // Above the grid\n            })\n                .add();\n        }\n        if (!styledMode) {\n            // Presentational\n            plotBorder.attr({\n                stroke: optionsChart.plotBorderColor,\n                'stroke-width': optionsChart.plotBorderWidth || 0,\n                fill: 'none'\n            });\n        }\n        plotBorder[verb](plotBorder.crisp({\n            x: plotLeft,\n            y: plotTop,\n            width: plotWidth,\n            height: plotHeight\n        }, -plotBorder.strokeWidth())); // #3282 plotBorder should be negative;\n        // reset\n        chart.isDirtyBox = false;\n        fireEvent(this, 'afterDrawChartBox');\n    }\n    /**\n     * Detect whether a certain chart property is needed based on inspecting its\n     * options and series. This mainly applies to the chart.inverted property,\n     * and in extensions to the chart.angular and chart.polar properties.\n     *\n     * @private\n     * @function Highcharts.Chart#propFromSeries\n     */\n    propFromSeries() {\n        const chart = this, optionsChart = chart.options.chart, seriesOptions = chart.options.series;\n        let i, klass, value;\n        /**\n         * The flag is set to `true` if a series of the chart is inverted.\n         *\n         * @name Highcharts.Chart#inverted\n         * @type {boolean|undefined}\n         */\n        ['inverted', 'angular', 'polar'].forEach(function (key) {\n            // The default series type's class\n            klass = seriesTypes[optionsChart.type];\n            // Get the value from available chart-wide properties\n            value =\n                // It is set in the options:\n                optionsChart[key] ||\n                    // The default series class:\n                    (klass && klass.prototype[key]);\n            // requires it\n            // 4. Check if any the chart's series require it\n            i = seriesOptions && seriesOptions.length;\n            while (!value && i--) {\n                klass = seriesTypes[seriesOptions[i].type];\n                if (klass && klass.prototype[key]) {\n                    value = true;\n                }\n            }\n            // Set the chart property\n            chart[key] = value;\n        });\n    }\n    /**\n     * Internal function to link two or more series together, based on the\n     * `linkedTo` option. This is done from `Chart.render`, and after\n     * `Chart.addSeries` and `Series.remove`.\n     *\n     * @private\n     * @function Highcharts.Chart#linkSeries\n     * @emits Highcharts.Chart#event:afterLinkSeries\n     */\n    linkSeries(isUpdating) {\n        const chart = this, chartSeries = chart.series;\n        // Reset links\n        chartSeries.forEach(function (series) {\n            series.linkedSeries.length = 0;\n        });\n        // Apply new links\n        chartSeries.forEach(function (series) {\n            let linkedTo = series.options.linkedTo;\n            if (isString(linkedTo)) {\n                if (linkedTo === ':previous') {\n                    linkedTo = chart.series[series.index - 1];\n                }\n                else {\n                    linkedTo = chart.get(linkedTo);\n                }\n                // #3341 avoid mutual linking\n                if (linkedTo && linkedTo.linkedParent !== series) {\n                    linkedTo.linkedSeries.push(series);\n                    series.linkedParent = linkedTo;\n                    if (linkedTo.enabledDataSorting) {\n                        series.setDataSortingOptions();\n                    }\n                    series.visible = pick(series.options.visible, linkedTo.options.visible, series.visible); // #3879\n                }\n            }\n        });\n        fireEvent(this, 'afterLinkSeries', { isUpdating });\n    }\n    /**\n     * Render series for the chart.\n     *\n     * @private\n     * @function Highcharts.Chart#renderSeries\n     */\n    renderSeries() {\n        this.series.forEach(function (serie) {\n            serie.translate();\n            serie.render();\n        });\n    }\n    /**\n     * Render all graphics for the chart. Runs internally on initialization.\n     *\n     * @private\n     * @function Highcharts.Chart#render\n     */\n    render() {\n        const chart = this, axes = chart.axes, colorAxis = chart.colorAxis, renderer = chart.renderer, renderAxes = function (axes) {\n            axes.forEach(function (axis) {\n                if (axis.visible) {\n                    axis.render();\n                }\n            });\n        };\n        let correction = 0; // correction for X axis labels\n        // Title\n        chart.setTitle();\n        // Fire an event before the margins are computed. This is where the\n        // legend is assigned.\n        fireEvent(chart, 'beforeMargins');\n        // Get stacks\n        if (chart.getStacks) {\n            chart.getStacks();\n        }\n        // Get chart margins\n        chart.getMargins(true);\n        chart.setChartSize();\n        // Record preliminary dimensions for later comparison\n        const tempWidth = chart.plotWidth;\n        axes.some(function (axis) {\n            if (axis.horiz &&\n                axis.visible &&\n                axis.options.labels.enabled &&\n                axis.series.length) {\n                // 21 is the most common correction for X axis labels\n                correction = 21;\n                return true;\n            }\n        });\n        // use Math.max to prevent negative plotHeight\n        chart.plotHeight = Math.max(chart.plotHeight - correction, 0);\n        const tempHeight = chart.plotHeight;\n        // Get margins by pre-rendering axes\n        axes.forEach(function (axis) {\n            axis.setScale();\n        });\n        chart.getAxisMargins();\n        // If the plot area size has changed significantly, calculate tick\n        // positions again\n        const redoHorizontal = tempWidth / chart.plotWidth > 1.1;\n        // Height is more sensitive, use lower threshold\n        const redoVertical = tempHeight / chart.plotHeight > 1.05;\n        if (redoHorizontal || redoVertical) {\n            axes.forEach(function (axis) {\n                if ((axis.horiz && redoHorizontal) ||\n                    (!axis.horiz && redoVertical)) {\n                    // update to reflect the new margins\n                    axis.setTickInterval(true);\n                }\n            });\n            chart.getMargins(); // second pass to check for new labels\n        }\n        // Draw the borders and backgrounds\n        chart.drawChartBox();\n        // Axes\n        if (chart.hasCartesianSeries) {\n            renderAxes(axes);\n        }\n        else if (colorAxis && colorAxis.length) {\n            renderAxes(colorAxis);\n        }\n        // The series\n        if (!chart.seriesGroup) {\n            chart.seriesGroup = renderer.g('series-group')\n                .attr({ zIndex: 3 })\n                .shadow(chart.options.chart.seriesGroupShadow)\n                .add();\n        }\n        chart.renderSeries();\n        // Credits\n        chart.addCredits();\n        // Handle responsiveness\n        if (chart.setResponsive) {\n            chart.setResponsive();\n        }\n        // Set flag\n        chart.hasRendered = true;\n    }\n    /**\n     * Set a new credits label for the chart.\n     *\n     * @sample highcharts/credits/credits-update/\n     *         Add and update credits\n     *\n     * @function Highcharts.Chart#addCredits\n     *\n     * @param {Highcharts.CreditsOptions} [credits]\n     * A configuration object for the new credits.\n     */\n    addCredits(credits) {\n        const chart = this, creds = merge(true, this.options.credits, credits);\n        if (creds.enabled && !this.credits) {\n            /**\n             * The chart's credits label. The label has an `update` method that\n             * allows setting new options as per the\n             * [credits options set](https://api.highcharts.com/highcharts/credits).\n             *\n             * @name Highcharts.Chart#credits\n             * @type {Highcharts.SVGElement}\n             */\n            this.credits = this.renderer.text(creds.text + (this.mapCredits || ''), 0, 0)\n                .addClass('highcharts-credits')\n                .on('click', function () {\n                if (creds.href) {\n                    win.location.href = creds.href;\n                }\n            })\n                .attr({\n                align: creds.position.align,\n                zIndex: 8\n            });\n            if (!chart.styledMode) {\n                this.credits.css(creds.style);\n            }\n            this.credits\n                .add()\n                .align(creds.position);\n            // Dynamically update\n            this.credits.update = function (options) {\n                chart.credits = chart.credits.destroy();\n                chart.addCredits(options);\n            };\n        }\n    }\n    /**\n     * Remove the chart and purge memory. This method is called internally\n     * before adding a second chart into the same container, as well as on\n     * window unload to prevent leaks.\n     *\n     * @sample highcharts/members/chart-destroy/\n     *         Destroy the chart from a button\n     * @sample stock/members/chart-destroy/\n     *         Destroy with Highcharts Stock\n     *\n     * @function Highcharts.Chart#destroy\n     *\n     * @emits Highcharts.Chart#event:destroy\n     */\n    destroy() {\n        const chart = this, axes = chart.axes, series = chart.series, container = chart.container, parentNode = container && container.parentNode;\n        let i;\n        // fire the chart.destoy event\n        fireEvent(chart, 'destroy');\n        // Delete the chart from charts lookup array\n        if (chart.renderer.forExport) {\n            erase(charts, chart); // #6569\n        }\n        else {\n            charts[chart.index] = void 0;\n        }\n        H.chartCount--;\n        chart.renderTo.removeAttribute('data-highcharts-chart');\n        // remove events\n        removeEvent(chart);\n        // ==== Destroy collections:\n        // Destroy axes\n        i = axes.length;\n        while (i--) {\n            axes[i] = axes[i].destroy();\n        }\n        // Destroy scroller & scroller series before destroying base series\n        if (this.scroller && this.scroller.destroy) {\n            this.scroller.destroy();\n        }\n        // Destroy each series\n        i = series.length;\n        while (i--) {\n            series[i] = series[i].destroy();\n        }\n        // ==== Destroy chart properties:\n        [\n            'title', 'subtitle', 'chartBackground', 'plotBackground',\n            'plotBGImage', 'plotBorder', 'seriesGroup', 'clipRect', 'credits',\n            'pointer', 'rangeSelector', 'legend', 'resetZoomButton', 'tooltip',\n            'renderer'\n        ].forEach(function (name) {\n            const prop = chart[name];\n            if (prop && prop.destroy) {\n                chart[name] = prop.destroy();\n            }\n        });\n        // Remove container and all SVG, check container as it can break in IE\n        // when destroyed before finished loading\n        if (container) {\n            container.innerHTML = AST.emptyHTML;\n            removeEvent(container);\n            if (parentNode) {\n                discardElement(container);\n            }\n        }\n        // clean it all up\n        objectEach(chart, function (val, key) {\n            delete chart[key];\n        });\n    }\n    /**\n     * Prepare for first rendering after all data are loaded.\n     *\n     * @private\n     * @function Highcharts.Chart#firstRender\n     * @emits Highcharts.Chart#event:beforeRender\n     */\n    firstRender() {\n        const chart = this, options = chart.options;\n        // Create the container\n        chart.getContainer();\n        chart.resetMargins();\n        chart.setChartSize();\n        // Set the common chart properties (mainly invert) from the given series\n        chart.propFromSeries();\n        // get axes\n        chart.getAxes();\n        // Initialize the series\n        const series = isArray(options.series) ? options.series : [];\n        options.series = []; // Avoid mutation\n        series.forEach(\n        // #9680\n        function (serieOptions) {\n            chart.initSeries(serieOptions);\n        });\n        chart.linkSeries();\n        chart.setSeriesData();\n        // Run an event after axes and series are initialized, but before\n        // render. At this stage, the series data is indexed and cached in the\n        // xData and yData arrays, so we can access those before rendering. Used\n        // in Highcharts Stock.\n        fireEvent(chart, 'beforeRender');\n        chart.render();\n        chart.pointer.getChartPosition(); // #14973\n        // Fire the load event if there are no external images\n        if (!chart.renderer.imgCount && !chart.hasLoaded) {\n            chart.onload();\n        }\n        // If the chart was rendered outside the top container, put it back in\n        // (#3679)\n        chart.temporaryDisplay(true);\n    }\n    /**\n     * Internal function that runs on chart load, async if any images are loaded\n     * in the chart. Runs the callbacks and triggers the `load` and `render`\n     * events.\n     *\n     * @private\n     * @function Highcharts.Chart#onload\n     * @emits Highcharts.Chart#event:load\n     * @emits Highcharts.Chart#event:render\n     */\n    onload() {\n        // Run callbacks, first the ones registered by modules, then user's one\n        this.callbacks.concat([this.callback]).forEach(function (fn) {\n            // Chart destroyed in its own callback (#3600)\n            if (fn && typeof this.index !== 'undefined') {\n                fn.apply(this, [this]);\n            }\n        }, this);\n        fireEvent(this, 'load');\n        fireEvent(this, 'render');\n        // Set up auto resize, check for not destroyed (#6068)\n        if (defined(this.index)) {\n            this.setReflow();\n        }\n        this.warnIfA11yModuleNotLoaded();\n        // Don't run again\n        this.hasLoaded = true;\n    }\n    /**\n     * Emit console warning if the a11y module is not loaded.\n     */\n    warnIfA11yModuleNotLoaded() {\n        const { options, title } = this;\n        if (options && !this.accessibility) {\n            // Make chart behave as an image with the title as alt text\n            this.renderer.boxWrapper.attr({\n                role: 'img',\n                'aria-label': ((title && title.element.textContent) || ''\n                // #17753, < is not allowed in SVG attributes\n                ).replace(/</g, '&lt;')\n            });\n            if (!(options.accessibility && options.accessibility.enabled === false)) {\n                error('Highcharts warning: Consider including the ' +\n                    '\"accessibility.js\" module to make your chart more ' +\n                    'usable for people with disabilities. Set the ' +\n                    '\"accessibility.enabled\" option to false to remove this ' +\n                    'warning. See https://www.highcharts.com/docs/accessibility/accessibility-module.', false, this);\n            }\n        }\n    }\n    /**\n     * Add a series to the chart after render time. Note that this method should\n     * never be used when adding data synchronously at chart render time, as it\n     * adds expense to the calculations and rendering. When adding data at the\n     * same time as the chart is initialized, add the series as a configuration\n     * option instead. With multiple axes, the `offset` is dynamically adjusted.\n     *\n     * @sample highcharts/members/chart-addseries/\n     *         Add a series from a button\n     * @sample stock/members/chart-addseries/\n     *         Add a series in Highcharts Stock\n     *\n     * @function Highcharts.Chart#addSeries\n     *\n     * @param {Highcharts.SeriesOptionsType} options\n     *        The config options for the series.\n     *\n     * @param {boolean} [redraw=true]\n     *        Whether to redraw the chart after adding.\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     *        Whether to apply animation, and optionally animation\n     *        configuration. When `undefined`, it applies the animation that is\n     *        set in the `chart.animation` option.\n     *\n     * @return {Highcharts.Series}\n     *         The newly created series object.\n     *\n     * @emits Highcharts.Chart#event:addSeries\n     * @emits Highcharts.Chart#event:afterAddSeries\n     */\n    addSeries(options, redraw, animation) {\n        const chart = this;\n        let series;\n        if (options) { // <- not necessary\n            redraw = pick(redraw, true); // defaults to true\n            fireEvent(chart, 'addSeries', { options: options }, function () {\n                series = chart.initSeries(options);\n                chart.isDirtyLegend = true;\n                chart.linkSeries();\n                if (series.enabledDataSorting) {\n                    // We need to call `setData` after `linkSeries`\n                    series.setData(options.data, false);\n                }\n                fireEvent(chart, 'afterAddSeries', { series: series });\n                if (redraw) {\n                    chart.redraw(animation);\n                }\n            });\n        }\n        return series;\n    }\n    /**\n     * Add an axis to the chart after render time. Note that this method should\n     * never be used when adding data synchronously at chart render time, as it\n     * adds expense to the calculations and rendering. When adding data at the\n     * same time as the chart is initialized, add the axis as a configuration\n     * option instead.\n     *\n     * @sample highcharts/members/chart-addaxis/\n     *         Add and remove axes\n     *\n     * @function Highcharts.Chart#addAxis\n     *\n     * @param {Highcharts.AxisOptions} options\n     *        The axis options.\n     *\n     * @param {boolean} [isX=false]\n     *        Whether it is an X axis or a value axis.\n     *\n     * @param {boolean} [redraw=true]\n     *        Whether to redraw the chart after adding.\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     *        Whether and how to apply animation in the redraw. When\n     *        `undefined`, it applies the animation that is set in the\n     *        `chart.animation` option.\n     *\n     * @return {Highcharts.Axis}\n     *         The newly generated Axis object.\n     */\n    addAxis(options, isX, redraw, animation) {\n        return this.createAxis(isX ? 'xAxis' : 'yAxis', { axis: options, redraw: redraw, animation: animation });\n    }\n    /**\n     * Add a color axis to the chart after render time. Note that this method\n     * should never be used when adding data synchronously at chart render time,\n     * as it adds expense to the calculations and rendering. When adding data at\n     * the same time as the chart is initialized, add the axis as a\n     * configuration option instead.\n     *\n     * @sample highcharts/members/chart-addaxis/\n     *         Add and remove axes\n     *\n     * @function Highcharts.Chart#addColorAxis\n     *\n     * @param {Highcharts.ColorAxisOptions} options\n     *        The axis options.\n     *\n     * @param {boolean} [redraw=true]\n     *        Whether to redraw the chart after adding.\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     *        Whether and how to apply animation in the redraw. When\n     *        `undefined`, it applies the animation that is set in the\n     *        `chart.animation` option.\n     *\n     * @return {Highcharts.Axis}\n     *         The newly generated Axis object.\n     */\n    addColorAxis(options, redraw, animation) {\n        return this.createAxis('colorAxis', { axis: options, redraw: redraw, animation: animation });\n    }\n    /**\n     * Factory for creating different axis types.\n     *\n     * @private\n     * @function Highcharts.Chart#createAxis\n     *\n     * @param {string} coll\n     *        An axis type.\n     *\n     * @param {...Array<*>} arguments\n     *        All arguments for the constructor.\n     *\n     * @return {Highcharts.Axis}\n     *         The newly generated Axis object.\n     */\n    createAxis(coll, options) {\n        const axis = new Axis(this, options.axis, coll);\n        if (pick(options.redraw, true)) {\n            this.redraw(options.animation);\n        }\n        return axis;\n    }\n    /**\n     * Dim the chart and show a loading text or symbol. Options for the loading\n     * screen are defined in {@link\n     * https://api.highcharts.com/highcharts/loading|the loading options}.\n     *\n     * @sample highcharts/members/chart-hideloading/\n     *         Show and hide loading from a button\n     * @sample highcharts/members/chart-showloading/\n     *         Apply different text labels\n     * @sample stock/members/chart-show-hide-loading/\n     *         Toggle loading in Highcharts Stock\n     *\n     * @function Highcharts.Chart#showLoading\n     *\n     * @param {string} [str]\n     *        An optional text to show in the loading label instead of the\n     *        default one. The default text is set in\n     *        [lang.loading](https://api.highcharts.com/highcharts/lang.loading).\n     */\n    showLoading(str) {\n        const chart = this, options = chart.options, loadingOptions = options.loading, setLoadingSize = function () {\n            if (loadingDiv) {\n                css(loadingDiv, {\n                    left: chart.plotLeft + 'px',\n                    top: chart.plotTop + 'px',\n                    width: chart.plotWidth + 'px',\n                    height: chart.plotHeight + 'px'\n                });\n            }\n        };\n        let loadingDiv = chart.loadingDiv, loadingSpan = chart.loadingSpan;\n        // create the layer at the first call\n        if (!loadingDiv) {\n            chart.loadingDiv = loadingDiv = createElement('div', {\n                className: 'highcharts-loading highcharts-loading-hidden'\n            }, null, chart.container);\n        }\n        if (!loadingSpan) {\n            chart.loadingSpan = loadingSpan = createElement('span', { className: 'highcharts-loading-inner' }, null, loadingDiv);\n            addEvent(chart, 'redraw', setLoadingSize); // #1080\n        }\n        loadingDiv.className = 'highcharts-loading';\n        // Update text\n        AST.setElementHTML(loadingSpan, pick(str, options.lang.loading, ''));\n        if (!chart.styledMode) {\n            // Update visuals\n            css(loadingDiv, extend(loadingOptions.style, {\n                zIndex: 10\n            }));\n            css(loadingSpan, loadingOptions.labelStyle);\n            // Show it\n            if (!chart.loadingShown) {\n                css(loadingDiv, {\n                    opacity: 0,\n                    display: ''\n                });\n                animate(loadingDiv, {\n                    opacity: loadingOptions.style.opacity || 0.5\n                }, {\n                    duration: loadingOptions.showDuration || 0\n                });\n            }\n        }\n        chart.loadingShown = true;\n        setLoadingSize();\n    }\n    /**\n     * Hide the loading layer.\n     *\n     * @see Highcharts.Chart#showLoading\n     *\n     * @sample highcharts/members/chart-hideloading/\n     *         Show and hide loading from a button\n     * @sample stock/members/chart-show-hide-loading/\n     *         Toggle loading in Highcharts Stock\n     *\n     * @function Highcharts.Chart#hideLoading\n     */\n    hideLoading() {\n        const options = this.options, loadingDiv = this.loadingDiv;\n        if (loadingDiv) {\n            loadingDiv.className =\n                'highcharts-loading highcharts-loading-hidden';\n            if (!this.styledMode) {\n                animate(loadingDiv, {\n                    opacity: 0\n                }, {\n                    duration: options.loading.hideDuration || 100,\n                    complete: function () {\n                        css(loadingDiv, { display: 'none' });\n                    }\n                });\n            }\n        }\n        this.loadingShown = false;\n    }\n    /**\n     * A generic function to update any element of the chart. Elements can be\n     * enabled and disabled, moved, re-styled, re-formatted etc.\n     *\n     * A special case is configuration objects that take arrays, for example\n     * [xAxis](https://api.highcharts.com/highcharts/xAxis),\n     * [yAxis](https://api.highcharts.com/highcharts/yAxis) or\n     * [series](https://api.highcharts.com/highcharts/series). For these\n     * collections, an `id` option is used to map the new option set to an\n     * existing object. If an existing object of the same id is not found, the\n     * corresponding item is updated. So for example, running `chart.update`\n     * with a series item without an id, will cause the existing chart's series\n     * with the same index in the series array to be updated. When the\n     * `oneToOne` parameter is true, `chart.update` will also take care of\n     * adding and removing items from the collection. Read more under the\n     * parameter description below.\n     *\n     * Note that when changing series data, `chart.update` may mutate the passed\n     * data options.\n     *\n     * See also the\n     * [responsive option set](https://api.highcharts.com/highcharts/responsive).\n     * Switching between `responsive.rules` basically runs `chart.update` under\n     * the hood.\n     *\n     * @sample highcharts/members/chart-update/\n     *         Update chart geometry\n     *\n     * @function Highcharts.Chart#update\n     *\n     * @param {Highcharts.Options} options\n     *        A configuration object for the new chart options.\n     *\n     * @param {boolean} [redraw=true]\n     *        Whether to redraw the chart.\n     *\n     * @param {boolean} [oneToOne=false]\n     *        When `true`, the `series`, `xAxis`, `yAxis` and `annotations`\n     *        collections will be updated one to one, and items will be either\n     *        added or removed to match the new updated options. For example,\n     *        if the chart has two series and we call `chart.update` with a\n     *        configuration containing three series, one will be added. If we\n     *        call `chart.update` with one series, one will be removed. Setting\n     *        an empty `series` array will remove all series, but leaving out\n     *        the`series` property will leave all series untouched. If the\n     *        series have id's, the new series options will be matched by id,\n     *        and the remaining ones removed.\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     *        Whether to apply animation, and optionally animation\n     *        configuration. When `undefined`, it applies the animation that is\n     *        set in the `chart.animation` option.\n     *\n     * @emits Highcharts.Chart#event:update\n     * @emits Highcharts.Chart#event:afterUpdate\n     */\n    update(options, redraw, oneToOne, animation) {\n        const chart = this, adders = {\n            credits: 'addCredits',\n            title: 'setTitle',\n            subtitle: 'setSubtitle',\n            caption: 'setCaption'\n        }, isResponsiveOptions = options.isResponsiveOptions, itemsForRemoval = [];\n        let updateAllAxes, updateAllSeries, runSetSize;\n        fireEvent(chart, 'update', { options: options });\n        // If there are responsive rules in action, undo the responsive rules\n        // before we apply the updated options and replay the responsive rules\n        // on top from the chart.redraw function (#9617).\n        if (!isResponsiveOptions) {\n            chart.setResponsive(false, true);\n        }\n        options = diffObjects(options, chart.options);\n        chart.userOptions = merge(chart.userOptions, options);\n        // If the top-level chart option is present, some special updates are\n        // required\n        const optionsChart = options.chart;\n        if (optionsChart) {\n            merge(true, chart.options.chart, optionsChart);\n            // Add support for deprecated zooming options like zoomType, #17861\n            this.setZoomOptions();\n            // Setter function\n            if ('className' in optionsChart) {\n                chart.setClassName(optionsChart.className);\n            }\n            if ('inverted' in optionsChart ||\n                'polar' in optionsChart ||\n                'type' in optionsChart) {\n                // Parse options.chart.inverted and options.chart.polar together\n                // with the available series.\n                chart.propFromSeries();\n                updateAllAxes = true;\n            }\n            if ('alignTicks' in optionsChart) { // #6452\n                updateAllAxes = true;\n            }\n            if ('events' in optionsChart) {\n                // Chart event handlers\n                registerEventOptions(this, optionsChart);\n            }\n            objectEach(optionsChart, function (val, key) {\n                if (chart.propsRequireUpdateSeries.indexOf('chart.' + key) !==\n                    -1) {\n                    updateAllSeries = true;\n                }\n                // Only dirty box\n                if (chart.propsRequireDirtyBox.indexOf(key) !== -1) {\n                    chart.isDirtyBox = true;\n                }\n                // Chart setSize\n                if (chart.propsRequireReflow.indexOf(key) !== -1) {\n                    if (isResponsiveOptions) {\n                        chart.isDirtyBox = true;\n                    }\n                    else {\n                        runSetSize = true;\n                    }\n                }\n            });\n            if (!chart.styledMode && optionsChart.style) {\n                chart.renderer.setStyle(chart.options.chart.style || {});\n            }\n        }\n        // Moved up, because tooltip needs updated plotOptions (#6218)\n        if (!chart.styledMode && options.colors) {\n            this.options.colors = options.colors;\n        }\n        if (options.time) {\n            // Maintaining legacy global time. If the chart is instanciated\n            // first with global time, then updated with time options, we need\n            // to create a new Time instance to avoid mutating the global time\n            // (#10536).\n            if (this.time === defaultTime) {\n                this.time = new Time(options.time);\n            }\n            // If we're updating, the time class is different from other chart\n            // classes (chart.legend, chart.tooltip etc) in that it doesn't know\n            // about the chart. The other chart[something].update functions also\n            // set the chart.options[something]. For the time class however we\n            // need to update the chart options separately. #14230.\n            merge(true, chart.options.time, options.time);\n        }\n        // Some option stuctures correspond one-to-one to chart objects that\n        // have update methods, for example\n        // options.credits => chart.credits\n        // options.legend => chart.legend\n        // options.title => chart.title\n        // options.tooltip => chart.tooltip\n        // options.subtitle => chart.subtitle\n        // options.mapNavigation => chart.mapNavigation\n        // options.navigator => chart.navigator\n        // options.scrollbar => chart.scrollbar\n        objectEach(options, function (val, key) {\n            if (chart[key] &&\n                typeof chart[key].update === 'function') {\n                chart[key].update(val, false);\n                // If a one-to-one object does not exist, look for an adder function\n            }\n            else if (typeof chart[adders[key]] === 'function') {\n                chart[adders[key]](val);\n                // Else, just merge the options. For nodes like loading, noData,\n                // plotOptions\n            }\n            else if (key !== 'colors' &&\n                chart.collectionsWithUpdate.indexOf(key) === -1) {\n                merge(true, chart.options[key], options[key]);\n            }\n            if (key !== 'chart' &&\n                chart.propsRequireUpdateSeries.indexOf(key) !== -1) {\n                updateAllSeries = true;\n            }\n        });\n        // Setters for collections. For axes and series, each item is referred\n        // by an id. If the id is not found, it defaults to the corresponding\n        // item in the collection, so setting one series without an id, will\n        // update the first series in the chart. Setting two series without\n        // an id will update the first and the second respectively (#6019)\n        // chart.update and responsive.\n        this.collectionsWithUpdate.forEach(function (coll) {\n            if (options[coll]) {\n                splat(options[coll]).forEach(function (newOptions, i) {\n                    const hasId = defined(newOptions.id);\n                    let item;\n                    // Match by id\n                    if (hasId) {\n                        item = chart.get(newOptions.id);\n                    }\n                    // No match by id found, match by index instead\n                    if (!item && chart[coll]) {\n                        item = chart[coll][pick(newOptions.index, i)];\n                        // Check if we grabbed an item with an exising but\n                        // different id (#13541). Check that the item in this\n                        // position is not internal (navigator).\n                        if (item && ((hasId && defined(item.options.id)) ||\n                            item.options.isInternal)) {\n                            item = void 0;\n                        }\n                    }\n                    if (item && item.coll === coll) {\n                        item.update(newOptions, false);\n                        if (oneToOne) {\n                            item.touched = true;\n                        }\n                    }\n                    // If oneToOne and no matching item is found, add one\n                    if (!item && oneToOne && chart.collectionsWithInit[coll]) {\n                        chart.collectionsWithInit[coll][0].apply(chart, \n                        // [newOptions, ...extraArguments, redraw=false]\n                        [\n                            newOptions\n                        ].concat(\n                        // Not all initializers require extra args\n                        chart.collectionsWithInit[coll][1] || []).concat([\n                            false\n                        ])).touched = true;\n                    }\n                });\n                // Add items for removal\n                if (oneToOne) {\n                    chart[coll].forEach(function (item) {\n                        if (!item.touched && !item.options.isInternal) {\n                            itemsForRemoval.push(item);\n                        }\n                        else {\n                            delete item.touched;\n                        }\n                    });\n                }\n            }\n        });\n        itemsForRemoval.forEach(function (item) {\n            if (item.chart && item.remove) { // #9097, avoid removing twice\n                item.remove(false);\n            }\n        });\n        if (updateAllAxes) {\n            chart.axes.forEach(function (axis) {\n                axis.update({}, false);\n            });\n        }\n        // Certain options require the whole series structure to be thrown away\n        // and rebuilt\n        if (updateAllSeries) {\n            chart.getSeriesOrderByLinks().forEach(function (series) {\n                // Avoid removed navigator series\n                if (series.chart) {\n                    series.update({}, false);\n                }\n            }, this);\n        }\n        // Update size. Redraw is forced.\n        const newWidth = optionsChart && optionsChart.width;\n        const newHeight = optionsChart && (isString(optionsChart.height) ?\n            relativeLength(optionsChart.height, newWidth || chart.chartWidth) :\n            optionsChart.height);\n        if (\n        // In this case, run chart.setSize with newWidth and newHeight which\n        // are undefined, only for reflowing chart elements because margin\n        // or spacing has been set (#8190)\n        runSetSize ||\n            // In this case, the size is actually set\n            (isNumber(newWidth) && newWidth !== chart.chartWidth) ||\n            (isNumber(newHeight) && newHeight !== chart.chartHeight)) {\n            chart.setSize(newWidth, newHeight, animation);\n        }\n        else if (pick(redraw, true)) {\n            chart.redraw(animation);\n        }\n        fireEvent(chart, 'afterUpdate', {\n            options: options,\n            redraw: redraw,\n            animation: animation\n        });\n    }\n    /**\n     * Shortcut to set the subtitle options. This can also be done from {@link\n     * Chart#update} or {@link Chart#setTitle}.\n     *\n     * @function Highcharts.Chart#setSubtitle\n     *\n     * @param {Highcharts.SubtitleOptions} options\n     *        New subtitle options. The subtitle text itself is set by the\n     *        `options.text` property.\n     */\n    setSubtitle(options, redraw) {\n        this.applyDescription('subtitle', options);\n        this.layOutTitles(redraw);\n    }\n    /**\n     * Set the caption options. This can also be done from {@link\n     * Chart#update}.\n     *\n     * @function Highcharts.Chart#setCaption\n     *\n     * @param {Highcharts.CaptionOptions} options\n     *        New caption options. The caption text itself is set by the\n     *        `options.text` property.\n     */\n    setCaption(options, redraw) {\n        this.applyDescription('caption', options);\n        this.layOutTitles(redraw);\n    }\n    /**\n     * Display the zoom button, so users can reset zoom to the default view\n     * settings.\n     *\n     * @function Highcharts.Chart#showResetZoom\n     *\n     * @emits Highcharts.Chart#event:afterShowResetZoom\n     * @emits Highcharts.Chart#event:beforeShowResetZoom\n     */\n    showResetZoom() {\n        const chart = this, lang = defaultOptions.lang, btnOptions = chart.zooming.resetButton, theme = btnOptions.theme, alignTo = (btnOptions.relativeTo === 'chart' ||\n            btnOptions.relativeTo === 'spacingBox' ?\n            null :\n            'scrollablePlotBox');\n        /**\n         * @private\n         */\n        function zoomOut() {\n            chart.zoomOut();\n        }\n        fireEvent(this, 'beforeShowResetZoom', null, function () {\n            chart.resetZoomButton = chart.renderer\n                .button(lang.resetZoom, null, null, zoomOut, theme)\n                .attr({\n                align: btnOptions.position.align,\n                title: lang.resetZoomTitle\n            })\n                .addClass('highcharts-reset-zoom')\n                .add()\n                .align(btnOptions.position, false, alignTo);\n        });\n        fireEvent(this, 'afterShowResetZoom');\n    }\n    /**\n     * Zoom the chart out after a user has zoomed in. See also\n     * [Axis.setExtremes](/class-reference/Highcharts.Axis#setExtremes).\n     *\n     * @function Highcharts.Chart#zoomOut\n     *\n     * @emits Highcharts.Chart#event:selection\n     */\n    zoomOut() {\n        fireEvent(this, 'selection', { resetSelection: true }, this.zoom);\n    }\n    /**\n     * Zoom into a given portion of the chart given by axis coordinates.\n     *\n     * @private\n     * @function Highcharts.Chart#zoom\n     * @param {Highcharts.SelectEventObject} event\n     */\n    zoom(event) {\n        const chart = this, pointer = chart.pointer;\n        let displayButton = false, hasZoomed;\n        // If zoom is called with no arguments, reset the axes\n        if (!event || event.resetSelection) {\n            chart.axes.forEach(function (axis) {\n                hasZoomed = axis.zoom();\n            });\n            pointer.initiated = false; // #6804\n        }\n        else { // Else, zoom in on all axes\n            event.xAxis.concat(event.yAxis).forEach(function (axisData) {\n                const axis = axisData.axis, isXAxis = axis.isXAxis, { hasPinched, mouseDownX, mouseDownY } = pointer;\n                // Don't zoom more than minRange\n                if (pointer[isXAxis ? 'zoomX' : 'zoomY'] &&\n                    (defined(mouseDownX) &&\n                        defined(mouseDownY) &&\n                        chart.isInsidePlot(mouseDownX - chart.plotLeft, mouseDownY - chart.plotTop, {\n                            axis,\n                            // Ignore touch positions if pinched on mobile\n                            // #18062\n                            ignoreX: hasPinched,\n                            ignoreY: hasPinched\n                        })) || !defined(chart.inverted ? mouseDownX : mouseDownY)) {\n                    hasZoomed = axis.zoom(axisData.min, axisData.max);\n                    if (axis.displayBtn) {\n                        displayButton = true;\n                    }\n                }\n            });\n        }\n        // Show or hide the Reset zoom button\n        const resetZoomButton = chart.resetZoomButton;\n        if (displayButton && !resetZoomButton) {\n            chart.showResetZoom();\n        }\n        else if (!displayButton && isObject(resetZoomButton)) {\n            chart.resetZoomButton = resetZoomButton.destroy();\n        }\n        // Redraw\n        if (hasZoomed) {\n            chart.redraw(pick(chart.options.chart.animation, event && event.animation, chart.pointCount < 100));\n        }\n    }\n    /**\n     * Pan the chart by dragging the mouse across the pane. This function is\n     * called on mouse move, and the distance to pan is computed from chartX\n     * compared to the first chartX position in the dragging operation.\n     *\n     * @private\n     * @function Highcharts.Chart#pan\n     * @param {Highcharts.PointerEventObject} e\n     * @param {string} panning\n     */\n    pan(e, panning) {\n        const chart = this, hoverPoints = chart.hoverPoints, panningOptions = (typeof panning === 'object' ?\n            panning :\n            {\n                enabled: panning,\n                type: 'x'\n            }), chartOptions = chart.options.chart;\n        if (chartOptions && chartOptions.panning) {\n            chartOptions.panning = panningOptions;\n        }\n        const type = panningOptions.type;\n        let doRedraw;\n        fireEvent(this, 'pan', { originalEvent: e }, function () {\n            // remove active points for shared tooltip\n            if (hoverPoints) {\n                hoverPoints.forEach(function (point) {\n                    point.setState();\n                });\n            }\n            let axes = chart.xAxis;\n            if (type === 'xy') {\n                axes = axes.concat(chart.yAxis);\n            }\n            else if (type === 'y') {\n                axes = chart.yAxis;\n            }\n            const nextMousePos = {};\n            axes.forEach(function (axis) {\n                if (!axis.options.panningEnabled || axis.options.isInternal) {\n                    return;\n                }\n                const horiz = axis.horiz, mousePos = e[horiz ? 'chartX' : 'chartY'], mouseDown = horiz ? 'mouseDownX' : 'mouseDownY', startPos = chart[mouseDown], halfPointRange = axis.minPointOffset || 0, pointRangeDirection = (axis.reversed && !chart.inverted) ||\n                    (!axis.reversed && chart.inverted) ?\n                    -1 :\n                    1, extremes = axis.getExtremes(), panMin = axis.toValue(startPos - mousePos, true) +\n                    halfPointRange * pointRangeDirection, panMax = axis.toValue(startPos + axis.len - mousePos, true) -\n                    ((halfPointRange * pointRangeDirection) ||\n                        (axis.isXAxis && axis.pointRangePadding) ||\n                        0), flipped = panMax < panMin, hasVerticalPanning = axis.hasVerticalPanning();\n                let newMin = flipped ? panMax : panMin, newMax = flipped ? panMin : panMax, panningState = axis.panningState, spill;\n                // General calculations of panning state.\n                // This is related to using vertical panning. (#11315).\n                if (hasVerticalPanning &&\n                    !axis.isXAxis && (!panningState || panningState.isDirty)) {\n                    axis.series.forEach(function (series) {\n                        const processedData = series.getProcessedData(true), dataExtremes = series.getExtremes(processedData.yData, true);\n                        if (!panningState) {\n                            panningState = {\n                                startMin: Number.MAX_VALUE,\n                                startMax: -Number.MAX_VALUE\n                            };\n                        }\n                        if (isNumber(dataExtremes.dataMin) &&\n                            isNumber(dataExtremes.dataMax)) {\n                            panningState.startMin = Math.min(pick(series.options.threshold, Infinity), dataExtremes.dataMin, panningState.startMin);\n                            panningState.startMax = Math.max(pick(series.options.threshold, -Infinity), dataExtremes.dataMax, panningState.startMax);\n                        }\n                    });\n                }\n                const paddedMin = Math.min(pick(panningState && panningState.startMin, extremes.dataMin), halfPointRange ?\n                    extremes.min :\n                    axis.toValue(axis.toPixels(extremes.min) -\n                        axis.minPixelPadding));\n                const paddedMax = Math.max(pick(panningState && panningState.startMax, extremes.dataMax), halfPointRange ?\n                    extremes.max :\n                    axis.toValue(axis.toPixels(extremes.max) +\n                        axis.minPixelPadding));\n                axis.panningState = panningState;\n                // It is not necessary to calculate extremes on ordinal axis,\n                // because they are already calculated, so we don't want to\n                // override them.\n                if (!axis.isOrdinal) {\n                    // If the new range spills over, either to the min or max,\n                    // adjust the new range.\n                    spill = paddedMin - newMin;\n                    if (spill > 0) {\n                        newMax += spill;\n                        newMin = paddedMin;\n                    }\n                    spill = newMax - paddedMax;\n                    if (spill > 0) {\n                        newMax = paddedMax;\n                        newMin -= spill;\n                    }\n                    // Set new extremes if they are actually new\n                    if (axis.series.length &&\n                        newMin !== extremes.min &&\n                        newMax !== extremes.max &&\n                        newMin >= paddedMin &&\n                        newMax <= paddedMax) {\n                        axis.setExtremes(newMin, newMax, false, false, { trigger: 'pan' });\n                        if (!chart.resetZoomButton &&\n                            // Show reset zoom button only when both newMin and\n                            // newMax values are between padded axis range.\n                            newMin !== paddedMin &&\n                            newMax !== paddedMax &&\n                            type.match('y')) {\n                            chart.showResetZoom();\n                            axis.displayBtn = false;\n                        }\n                        doRedraw = true;\n                    }\n                    // set new reference for next run:\n                    nextMousePos[mouseDown] = mousePos;\n                }\n            });\n            objectEach(nextMousePos, (pos, down) => {\n                chart[down] = pos;\n            });\n            if (doRedraw) {\n                chart.redraw(false);\n            }\n            css(chart.container, { cursor: 'move' });\n        });\n    }\n}\nextend(Chart.prototype, {\n    // Hook for adding callbacks in modules\n    callbacks: [],\n    /**\n     * These collections (arrays) implement `Chart.addSomethig` method used in\n     * chart.update() to create new object in the collection. Equivalent for\n     * deleting is resolved by simple `Somethig.remove()`.\n     *\n     * Note: We need to define these references after initializers are bound to\n     * chart's prototype.\n     *\n     * @private\n     */\n    collectionsWithInit: {\n        // collectionName: [ initializingMethod, [extraArguments] ]\n        xAxis: [Chart.prototype.addAxis, [true]],\n        yAxis: [Chart.prototype.addAxis, [false]],\n        series: [Chart.prototype.addSeries]\n    },\n    /**\n     * These collections (arrays) implement update() methods with support for\n     * one-to-one option.\n     * @private\n     */\n    collectionsWithUpdate: [\n        'xAxis',\n        'yAxis',\n        'series'\n    ],\n    /**\n     * These properties cause isDirtyBox to be set to true when updating. Can be\n     * extended from plugins.\n     * @private\n     */\n    propsRequireDirtyBox: [\n        'backgroundColor',\n        'borderColor',\n        'borderWidth',\n        'borderRadius',\n        'plotBackgroundColor',\n        'plotBackgroundImage',\n        'plotBorderColor',\n        'plotBorderWidth',\n        'plotShadow',\n        'shadow'\n    ],\n    /**\n     * These properties require a full reflow of chart elements, best\n     * implemented through running `Chart.setSize` internally (#8190).\n     * @private\n     */\n    propsRequireReflow: [\n        'margin',\n        'marginTop',\n        'marginRight',\n        'marginBottom',\n        'marginLeft',\n        'spacing',\n        'spacingTop',\n        'spacingRight',\n        'spacingBottom',\n        'spacingLeft'\n    ],\n    /**\n     * These properties cause all series to be updated when updating. Can be\n     * extended from plugins.\n     * @private\n     */\n    propsRequireUpdateSeries: [\n        'chart.inverted',\n        'chart.polar',\n        'chart.ignoreHiddenSeries',\n        'chart.type',\n        'colors',\n        'plotOptions',\n        'time',\n        'tooltip'\n    ]\n});\n/* *\n *\n *  Default Export\n *\n * */\nexport default Chart;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Callback for chart constructors.\n *\n * @callback Highcharts.ChartCallbackFunction\n *\n * @param {Highcharts.Chart} chart\n *        Created chart.\n */\n/**\n * Format a number and return a string based on input settings.\n *\n * @callback Highcharts.NumberFormatterCallbackFunction\n *\n * @param {number} number\n *        The input number to format.\n *\n * @param {number} decimals\n *        The amount of decimals. A value of -1 preserves the amount in the\n *        input number.\n *\n * @param {string} [decimalPoint]\n *        The decimal point, defaults to the one given in the lang options, or\n *        a dot.\n *\n * @param {string} [thousandsSep]\n *        The thousands separator, defaults to the one given in the lang\n *        options, or a space character.\n *\n * @return {string} The formatted number.\n */\n/**\n * The chart title. The title has an `update` method that allows modifying the\n * options directly or indirectly via `chart.update`.\n *\n * @interface Highcharts.TitleObject\n * @extends Highcharts.SVGElement\n */ /**\n* Modify options for the title.\n*\n* @function Highcharts.TitleObject#update\n*\n* @param {Highcharts.TitleOptions} titleOptions\n*        Options to modify.\n*\n* @param {boolean} [redraw=true]\n*        Whether to redraw the chart after the title is altered. If doing more\n*        operations on the chart, it is a good idea to set redraw to false and\n*        call {@link Chart#redraw} after.\n*/\n/**\n * The chart subtitle. The subtitle has an `update` method that\n * allows modifying the options directly or indirectly via\n * `chart.update`.\n *\n * @interface Highcharts.SubtitleObject\n * @extends Highcharts.SVGElement\n */ /**\n* Modify options for the subtitle.\n*\n* @function Highcharts.SubtitleObject#update\n*\n* @param {Highcharts.SubtitleOptions} subtitleOptions\n*        Options to modify.\n*\n* @param {boolean} [redraw=true]\n*        Whether to redraw the chart after the subtitle is altered. If doing\n*        more operations on the chart, it is a good idea to set redraw to false\n*        and call {@link Chart#redraw} after.\n*/\n/**\n * The chart caption. The caption has an `update` method that\n * allows modifying the options directly or indirectly via\n * `chart.update`.\n *\n * @interface Highcharts.CaptionObject\n * @extends Highcharts.SVGElement\n */ /**\n* Modify options for the caption.\n*\n* @function Highcharts.CaptionObject#update\n*\n* @param {Highcharts.CaptionOptions} captionOptions\n*        Options to modify.\n*\n* @param {boolean} [redraw=true]\n*        Whether to redraw the chart after the caption is altered. If doing\n*        more operations on the chart, it is a good idea to set redraw to false\n*        and call {@link Chart#redraw} after.\n*/\n/**\n * @interface Highcharts.ChartIsInsideOptionsObject\n */ /**\n* @name Highcharts.ChartIsInsideOptionsObject#axis\n* @type {Highcharts.Axis|undefined}\n*/ /**\n* @name Highcharts.ChartIsInsideOptionsObject#ignoreX\n* @type {boolean|undefined}\n*/ /**\n* @name Highcharts.ChartIsInsideOptionsObject#ignoreY\n* @type {boolean|undefined}\n*/ /**\n* @name Highcharts.ChartIsInsideOptionsObject#inverted\n* @type {boolean|undefined}\n*/ /**\n* @name Highcharts.ChartIsInsideOptionsObject#paneCoordinates\n* @type {boolean|undefined}\n*/ /**\n* @name Highcharts.ChartIsInsideOptionsObject#series\n* @type {Highcharts.Series|undefined}\n*/ /**\n* @name Highcharts.ChartIsInsideOptionsObject#visiblePlotOnly\n* @type {boolean|undefined}\n*/\n''; // keeps doclets above in JS file\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AACZ,OAAOA,CAAC,MAAM,oCAAoC;AAClD,MAAM;EAAEC,OAAO;EAAEC,UAAU;EAAEC;AAAa,CAAC,GAAGH,CAAC;AAC/C,OAAOI,IAAI,MAAM,iBAAiB;AAClC,OAAOC,CAAC,MAAM,gBAAgB;AAC9B,MAAM;EAAEC,cAAc;EAAEC;AAAY,CAAC,GAAGF,CAAC;AACzC,OAAOG,UAAU,MAAM,kBAAkB;AACzC,MAAM;EAAEC;AAAa,CAAC,GAAGD,UAAU;AACnC,OAAOE,UAAU,MAAM,kBAAkB;AACzC,MAAM;EAAEC;AAAqB,CAAC,GAAGD,UAAU;AAC3C,OAAOE,CAAC,MAAM,eAAe;AAC7B,MAAM;EAAEC,MAAM;EAAEC,GAAG;EAAEC,WAAW;EAAEC,GAAG;EAAEC;AAAI,CAAC,GAAGL,CAAC;AAChD,OAAOM,gBAAgB,MAAM,iCAAiC;AAC9D,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,cAAc,MAAM,6BAA6B;AACxD,MAAM;EAAEC;AAAY,CAAC,GAAGD,cAAc;AACtC,OAAOE,WAAW,MAAM,gCAAgC;AACxD,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAOC,CAAC,MAAM,iBAAiB;AAC/B,OAAOC,GAAG,MAAM,yBAAyB;AACzC,MAAM;EAAEC,QAAQ;EAAEC,IAAI;EAAEC,aAAa;EAAEC,GAAG;EAAEC,OAAO;EAAEC,WAAW;EAAEC,cAAc;EAAEC,KAAK;EAAEC,KAAK;EAAEC,MAAM;EAAEC,IAAI;EAAEC,SAAS;EAAEC,QAAQ;EAAEC,OAAO;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC,KAAK;EAAEC,UAAU;EAAEC,IAAI;EAAEC,IAAI;EAAEC,cAAc;EAAEC,WAAW;EAAEC,KAAK;EAAEC,WAAW;EAAEC;AAAU,CAAC,GAAG3B,CAAC;AACzQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4B,KAAK,CAAC;EACR;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,KAAKA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAClB,OAAO,IAAIJ,KAAK,CAACE,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EAC7B;EACAC,WAAWA,CAACH,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IACjB,IAAI,CAACE,IAAI,GAAG,KAAK,CAAC;IAClB,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACC,MAAM,GAAG,KAAK,CAAC;IACpB,IAAI,CAACC,WAAW,GAAG,KAAK,CAAC;IACzB,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACC,OAAO,GAAG,KAAK,CAAC;IACrB,IAAI,CAACC,YAAY,GAAG,KAAK,CAAC;IAC1B,IAAI,CAACC,SAAS,GAAG,KAAK,CAAC;IACvB,IAAI,CAACC,YAAY,GAAG,KAAK,CAAC;IAC1B,IAAI,CAACC,KAAK,GAAG,KAAK,CAAC;IACnB,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACC,eAAe,GAAG,KAAK,CAAC;IAC7B,IAAI,CAACC,MAAM,GAAG,KAAK,CAAC;IACpB,IAAI,CAACC,eAAe,GAAG,KAAK,CAAC;IAC7B,IAAI,CAACC,OAAO,GAAG,KAAK,CAAC;IACrB,IAAI,CAACC,OAAO,GAAG,KAAK,CAAC;IACrB,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACC,QAAQ,GAAG,KAAK,CAAC;IACtB,IAAI,CAACC,OAAO,GAAG,KAAK,CAAC;IACrB,IAAI,CAACC,SAAS,GAAG,KAAK,CAAC;IACvB,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACC,OAAO,GAAG,KAAK,CAAC;IACrB,IAAI,CAACC,QAAQ,GAAG,KAAK,CAAC;IACtB,IAAI,CAACC,QAAQ,GAAG,KAAK,CAAC;IACtB,IAAI,CAACC,MAAM,GAAG,KAAK,CAAC;IACpB,IAAI,CAACC,WAAW,GAAG,CAAC,CAAC;IACrB,IAAI,CAACC,OAAO,GAAG,KAAK,CAAC;IACrB,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACC,aAAa,GAAG,KAAK,CAAC;IAC3B,IAAI,CAACC,IAAI,GAAG,KAAK,CAAC;IAClB,IAAI,CAACC,WAAW,GAAG,KAAK,CAAC;IACzB,IAAI,CAACC,WAAW,GAAG,KAAK,CAAC;IACzB,IAAI,CAACC,KAAK,GAAG,KAAK,CAAC;IACnB,IAAI,CAACC,KAAK,GAAG,KAAK,CAAC;IACnB,IAAI,CAACC,OAAO,GAAG,KAAK,CAAC;IACrB,IAAI,CAACC,OAAO,CAACvC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EACzB;EACA;AACJ;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIqC,OAAOA,CAACvC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IACb;IACA;IACA,IAAId,QAAQ,CAACY,CAAC,CAAC,IAAIA,CAAC,CAACwC,QAAQ,EAAE;MAC3B,IAAI,CAACb,QAAQ,GAAG3B,CAAC;MACjB,IAAI,CAACyC,IAAI,CAACxC,CAAC,EAAEC,CAAC,CAAC;IACnB,CAAC,MACI;MACD,IAAI,CAACuC,IAAI,CAACzC,CAAC,EAAEC,CAAC,CAAC;IACnB;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIyC,cAAcA,CAAA,EAAG;IACb,MAAM3C,KAAK,GAAG,IAAI;MAAEmB,OAAO,GAAGnB,KAAK,CAACmB,OAAO,CAACnB,KAAK;MAAEuC,OAAO,GAAGpB,OAAO,CAACoB,OAAO;IAC5EvC,KAAK,CAACuC,OAAO,GAAG;MACZ,GAAGA,OAAO;MACVK,IAAI,EAAEpD,IAAI,CAAC2B,OAAO,CAAC0B,QAAQ,EAAEN,OAAO,CAACK,IAAI,CAAC;MAC1CE,GAAG,EAAEtD,IAAI,CAAC2B,OAAO,CAAC4B,OAAO,EAAER,OAAO,CAACO,GAAG,CAAC;MACvCE,SAAS,EAAExD,IAAI,CAAC2B,OAAO,CAAC6B,SAAS,EAAET,OAAO,CAACS,SAAS,CAAC;MACrDC,WAAW,EAAEzD,IAAI,CAAC2B,OAAO,CAAC+B,iBAAiB,EAAEX,OAAO,CAACU,WAAW,EAAE,KAAK,CAAC;MACxEE,WAAW,EAAE7D,KAAK,CAACiD,OAAO,CAACY,WAAW,EAAEhC,OAAO,CAACiC,eAAe;IACnE,CAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIV,IAAIA,CAACN,WAAW,EAAEiB,QAAQ,EAAE;IACxB;IACArE,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE;MAAEsE,IAAI,EAAEC;IAAU,CAAC,EAAE,YAAY;MACrD,MAAMpC,OAAO,GAAG7B,KAAK,CAACrC,cAAc,EAAEmF,WAAW,CAAC;QAAE;QACpDoB,YAAY,GAAGrC,OAAO,CAACnB,KAAK;MAC5B;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY,IAAI,CAACoC,WAAW,GAAGtD,MAAM,CAAC,CAAC,CAAC,EAAEsD,WAAW,CAAC;MAC1C,IAAI,CAACnB,MAAM,GAAG,EAAE;MAChB,IAAI,CAACc,OAAO,GAAG,EAAE;MACjB;MACA,IAAI,CAACxB,MAAM,GAAG;QAAEkD,CAAC,EAAE,CAAC,CAAC;QAAEC,CAAC,EAAE,CAAC;MAAE,CAAC;MAC9B;MACA;MACA,IAAI,CAAC1C,eAAe,GAAG,EAAE;MACzB,IAAI,CAACqC,QAAQ,GAAGA,QAAQ;MACxB,IAAI,CAACtC,UAAU,GAAG,CAAC;MACnB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,IAAI,CAACI,OAAO,GAAGA,OAAO;MACtB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY,IAAI,CAACd,IAAI,GAAG,EAAE;MACd;AACZ;AACA;AACA;AACA;AACA;MACY,IAAI,CAACwB,MAAM,GAAG,EAAE;MAChB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY,IAAI,CAACK,IAAI,GACLE,WAAW,CAACF,IAAI,IAAIyB,MAAM,CAACC,IAAI,CAACxB,WAAW,CAACF,IAAI,CAAC,CAAC2B,MAAM,GACpD,IAAI3F,IAAI,CAACkE,WAAW,CAACF,IAAI,CAAC,GAC1B3E,CAAC,CAAC2E,IAAI;MACd;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,IAAI,CAAChB,eAAe,GAAGsC,YAAY,CAACtC,eAAe,IAAI9D,YAAY;MACnE;AACZ;AACA;AACA;AACA;AACA;AACA;MACY,IAAI,CAAC0G,UAAU,GAAGN,YAAY,CAACM,UAAU;MACzC,IAAI,CAACC,kBAAkB,GAAGP,YAAY,CAACQ,QAAQ;MAC/C,MAAMhE,KAAK,GAAG,IAAI;MAClB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYA,KAAK,CAACc,KAAK,GAAGtD,MAAM,CAACqG,MAAM,CAAC,CAAC;MAC7BrG,MAAM,CAACyG,IAAI,CAACjE,KAAK,CAAC;MAClBzC,CAAC,CAAC2G,UAAU,EAAE;MACd;MACA5G,oBAAoB,CAAC,IAAI,EAAEkG,YAAY,CAAC;MACxC;AACZ;AACA;AACA;AACA;AACA;MACYxD,KAAK,CAACqC,KAAK,GAAG,EAAE;MAChB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYrC,KAAK,CAACsC,KAAK,GAAG,EAAE;MAChBtC,KAAK,CAACyB,UAAU,GAAGzB,KAAK,CAACW,YAAY,GAAGX,KAAK,CAACiC,aAAa,GAAG,CAAC;MAC/D,IAAI,CAACU,cAAc,CAAC,CAAC;MACrB;MACA;MACA3D,SAAS,CAACgB,KAAK,EAAE,WAAW,CAAC;MAC7BA,KAAK,CAACmE,WAAW,CAAC,CAAC;IACvB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAACjD,OAAO,EAAE;IAChB,MAAMnB,KAAK,GAAG,IAAI;MAAEwD,YAAY,GAAGxD,KAAK,CAACmB,OAAO,CAACnB,KAAK;MAAE4C,IAAI,GAAIzB,OAAO,CAACyB,IAAI,IACxEY,YAAY,CAACZ,IAAK;MAAEyB,WAAW,GAAGrG,WAAW,CAAC4E,IAAI,CAAC;IACvD;IACA,IAAI,CAACyB,WAAW,EAAE;MACdxF,KAAK,CAAC,EAAE,EAAE,IAAI,EAAEmB,KAAK,EAAE;QAAEsE,gBAAgB,EAAE1B;MAAK,CAAC,CAAC;IACtD;IACA,MAAMf,MAAM,GAAG,IAAIwC,WAAW,CAAC,CAAC;IAChC,IAAI,OAAOxC,MAAM,CAACa,IAAI,KAAK,UAAU,EAAE;MACnCb,MAAM,CAACa,IAAI,CAAC1C,KAAK,EAAEmB,OAAO,CAAC;IAC/B;IACA,OAAOU,MAAM;EACjB;EACA;AACJ;AACA;AACA;AACA;AACA;EACI0C,aAAaA,CAAA,EAAG;IACZ,IAAI,CAACC,qBAAqB,CAAC,CAAC,CAACC,OAAO,CAAC,UAAU5C,MAAM,EAAE;MACnD;MACA,IAAI,CAACA,MAAM,CAAC6C,MAAM,IAAI,CAAC7C,MAAM,CAAC8C,IAAI,IAAI9C,MAAM,CAAC+C,kBAAkB,EAAE;QAC7D/C,MAAM,CAACgD,OAAO,CAAChD,MAAM,CAACV,OAAO,CAACwD,IAAI,EAAE,KAAK,CAAC;MAC9C;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIH,qBAAqBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAAC3C,MAAM,CAACiD,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC,UAAU9E,CAAC,EAAEC,CAAC,EAAE;MAC7C,IAAID,CAAC,CAAC+E,YAAY,CAACnB,MAAM,IAAI3D,CAAC,CAAC8E,YAAY,CAACnB,MAAM,EAAE;QAChD,OAAO3D,CAAC,CAAC8E,YAAY,CAACnB,MAAM,GAAG5D,CAAC,CAAC+E,YAAY,CAACnB,MAAM;MACxD;MACA,OAAO,CAAC;IACZ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIoB,UAAUA,CAACC,IAAI,EAAEC,SAAS,GAAG,CAAC,EAAE;IAC5B,MAAMC,UAAU,GAAG,IAAI,CAACF,IAAI,CAAC;MAC7B;MACA;MACAG,YAAY,GAAG,IAAI,CAAClE,OAAO,CAAC+D,IAAI,CAAC,GAAGtF,KAAK,CAAC,IAAI,CAACuB,OAAO,CAAC+D,IAAI,CAAC,CAAC,CACxDI,KAAK,CAAC,CAAC;MAAEC,gBAAgB,GAAG,IAAI,CAACnD,WAAW,CAAC8C,IAAI,CAAC,GAAG,IAAI,CAAC9C,WAAW,CAAC8C,IAAI,CAAC,GAC5EtF,KAAK,CAAC,IAAI,CAACwC,WAAW,CAAC8C,IAAI,CAAC,CAAC,CAACI,KAAK,CAAC,CAAC,GACrC,EAAE;IACN,IAAI,IAAI,CAACE,WAAW,EAAE;MAClB;MACAH,YAAY,CAACI,MAAM,CAACN,SAAS,CAAC;MAC9BI,gBAAgB,CAACE,MAAM,CAACN,SAAS,CAAC;IACtC;IACA,IAAIC,UAAU,EAAE;MACZ,KAAK,IAAIM,CAAC,GAAGP,SAAS,EAAEQ,IAAI,GAAGP,UAAU,CAACvB,MAAM,EAAE6B,CAAC,GAAGC,IAAI,EAAE,EAAED,CAAC,EAAE;QAC7D,MAAME,IAAI,GAAGR,UAAU,CAACM,CAAC,CAAC;QAC1B,IAAIE,IAAI,EAAE;UACN;AACpB;AACA;AACA;AACA;AACA;AACA;UACoBA,IAAI,CAAC9E,KAAK,GAAG4E,CAAC;UACd,IAAIE,IAAI,YAAY9H,MAAM,EAAE;YACxB8H,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACE,OAAO,CAAC,CAAC;UAC9B;UACA,IAAI,CAACF,IAAI,CAACzE,OAAO,CAAC4E,UAAU,EAAE;YAC1BV,YAAY,CAACK,CAAC,CAAC,GAAGE,IAAI,CAACzE,OAAO;YAC9BoE,gBAAgB,CAACG,CAAC,CAAC,GAAGE,IAAI,CAACxD,WAAW;UAC1C;QACJ;MACJ;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI4D,YAAYA,CAACC,KAAK,EAAEC,KAAK,EAAE/E,OAAO,GAAG,CAAC,CAAC,EAAE;IACrC,MAAM;MAAEgF,QAAQ;MAAE/E,OAAO;MAAEE,QAAQ;MAAEC,OAAO;MAAE6E;IAAkB,CAAC,GAAG,IAAI;IACxE,IAAIC,UAAU,GAAG,CAAC;MAAEC,SAAS,GAAG,CAAC;IACjC,IAAInF,OAAO,CAACoF,eAAe,IAAI,IAAI,CAACC,kBAAkB,EAAE;MACpD,CAAC;QAAEH,UAAU;QAAEC;MAAU,CAAC,GAAG,IAAI,CAACE,kBAAkB;IACxD;IACA,MAAM3E,MAAM,GAAGV,OAAO,CAACU,MAAM;MAAE4E,GAAG,GAAItF,OAAO,CAACoF,eAAe,IAAIH,iBAAiB,IAAKhF,OAAO;MAAEsF,CAAC,GAAGvF,OAAO,CAACgF,QAAQ,GAAGD,KAAK,GAAGD,KAAK;MAAEU,CAAC,GAAGxF,OAAO,CAACgF,QAAQ,GAAGF,KAAK,GAAGC,KAAK;MAAEU,CAAC,GAAG;QAC5KF,CAAC;QACDC,CAAC;QACDX,YAAY,EAAE,IAAI;QAClB7E;MACJ,CAAC;IACD,IAAI,CAACA,OAAO,CAAC0F,OAAO,EAAE;MAClB,MAAMxE,KAAK,GAAIR,MAAM,KAChBsE,QAAQ,IAAI,CAAC,IAAI,CAACW,KAAK,GAAGjF,MAAM,CAACS,KAAK,GAAGT,MAAM,CAACQ,KAAK,CAAC,IAAK;QAC5D0E,GAAG,EAAEzF,QAAQ;QACb0F,GAAG,EAAEC;MACT,CAAC;MACD,MAAMC,MAAM,GAAG/F,OAAO,CAACgG,eAAe,GAClC9E,KAAK,CAAC0E,GAAG,GAAGL,CAAC,GAAGpF,QAAQ,GAAGoF,CAAC;MAChC,IAAI,EAAEQ,MAAM,IAAIE,IAAI,CAACC,GAAG,CAAChB,UAAU,GAAG/E,QAAQ,EAAEe,KAAK,CAAC0E,GAAG,CAAC,IACtDG,MAAM,IAAIE,IAAI,CAACE,GAAG,CAACjB,UAAU,GAAG/E,QAAQ,GAAGmF,GAAG,CAACc,KAAK,EAAElF,KAAK,CAAC0E,GAAG,GAAG1E,KAAK,CAAC2E,GAAG,CAAC,CAAC,EAAE;QAC/EJ,CAAC,CAACZ,YAAY,GAAG,KAAK;MAC1B;IACJ;IACA,IAAI,CAAC7E,OAAO,CAACqG,OAAO,IAAIZ,CAAC,CAACZ,YAAY,EAAE;MACpC,MAAM1D,KAAK,GAAI,CAAC6D,QAAQ,IAAIhF,OAAO,CAACsG,IAAI,IACpC,CAACtG,OAAO,CAACsG,IAAI,CAACC,OAAO,IAAIvG,OAAO,CAACsG,IAAI,IAAM5F,MAAM,KAAKsE,QAAQ,GAAGtE,MAAM,CAACQ,KAAK,GAAGR,MAAM,CAACS,KAAK,CAAE,IAAI;QAClGyE,GAAG,EAAExF,OAAO;QACZyF,GAAG,EAAEC;MACT,CAAC;MACD,MAAMU,MAAM,GAAGxG,OAAO,CAACgG,eAAe,GAClC7E,KAAK,CAACyE,GAAG,GAAGJ,CAAC,GAAGpF,OAAO,GAAGoF,CAAC;MAC/B,IAAI,EAAEgB,MAAM,IAAIP,IAAI,CAACC,GAAG,CAACf,SAAS,GAAG/E,OAAO,EAAEe,KAAK,CAACyE,GAAG,CAAC,IACpDY,MAAM,IAAIP,IAAI,CAACE,GAAG,CAAChB,SAAS,GAAG/E,OAAO,GAAGkF,GAAG,CAACmB,MAAM,EAAEtF,KAAK,CAACyE,GAAG,GAAGzE,KAAK,CAAC0E,GAAG,CAAC,CAAC,EAAE;QAC9EJ,CAAC,CAACZ,YAAY,GAAG,KAAK;MAC1B;IACJ;IACAhH,SAAS,CAAC,IAAI,EAAE,mBAAmB,EAAE4H,CAAC,CAAC;IACvC,OAAOA,CAAC,CAACZ,YAAY;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI6B,MAAMA,CAACC,SAAS,EAAE;IACd9I,SAAS,CAAC,IAAI,EAAE,cAAc,CAAC;IAC/B,MAAMgB,KAAK,GAAG,IAAI;MAAEK,IAAI,GAAGL,KAAK,CAAC+D,kBAAkB,GAAG/D,KAAK,CAACK,IAAI,GAAGL,KAAK,CAAC+H,SAAS,IAAI,EAAE;MAAElG,MAAM,GAAG7B,KAAK,CAAC6B,MAAM;MAAEH,OAAO,GAAG1B,KAAK,CAAC0B,OAAO;MAAEsG,MAAM,GAAGhI,KAAK,CAACgI,MAAM;MAAEC,iBAAiB,GAAGjI,KAAK,CAACoC,WAAW,CAAC4F,MAAM;MAAErG,QAAQ,GAAG3B,KAAK,CAAC2B,QAAQ;MAAEuG,aAAa,GAAGvG,QAAQ,CAACwG,QAAQ,CAAC,CAAC;MAAEC,WAAW,GAAG,EAAE;IAC/R,IAAIC,cAAc;MAAEC,gBAAgB;MAAE5C,CAAC;MAAE6C,UAAU,GAAGvI,KAAK,CAACuI,UAAU;MAAEC,YAAY,GAAGxI,KAAK,CAACyI,aAAa;MAAEC,KAAK;IACjH/G,QAAQ,CAACgH,YAAY,GAAGhH,QAAQ,CAACiH,UAAU,CAAC3J,QAAQ,CAAC,WAAW,CAAC;IACjE;IACA,IAAIe,KAAK,CAAC6I,aAAa,EAAE;MACrB7I,KAAK,CAAC6I,aAAa,CAAC,KAAK,CAAC;IAC9B;IACA;IACA;IACA;IACA/L,YAAY,CAACkD,KAAK,CAACwF,WAAW,GAAGsC,SAAS,GAAG,KAAK,EAAE9H,KAAK,CAAC;IAC1D,IAAIkI,aAAa,EAAE;MACflI,KAAK,CAAC8I,gBAAgB,CAAC,CAAC;IAC5B;IACA;IACA9I,KAAK,CAAC+I,YAAY,CAAC,KAAK,CAAC;IACzB;IACArD,CAAC,GAAG7D,MAAM,CAACgC,MAAM;IACjB,OAAO6B,CAAC,EAAE,EAAE;MACRgD,KAAK,GAAG7G,MAAM,CAAC6D,CAAC,CAAC;MACjB,IAAIgD,KAAK,CAACvH,OAAO,CAAC6H,QAAQ,IAAIN,KAAK,CAACvH,OAAO,CAAC8H,gBAAgB,EAAE;QAC1DX,gBAAgB,GAAG,IAAI;QACvB,IAAII,KAAK,CAACQ,OAAO,EAAE;UACfb,cAAc,GAAG,IAAI;UACrB;QACJ;MACJ;IACJ;IACA,IAAIA,cAAc,EAAE;MAAE;MAClB3C,CAAC,GAAG7D,MAAM,CAACgC,MAAM;MACjB,OAAO6B,CAAC,EAAE,EAAE;QACRgD,KAAK,GAAG7G,MAAM,CAAC6D,CAAC,CAAC;QACjB,IAAIgD,KAAK,CAACvH,OAAO,CAAC6H,QAAQ,EAAE;UACxBN,KAAK,CAACQ,OAAO,GAAG,IAAI;QACxB;MACJ;IACJ;IACA;IACArH,MAAM,CAAC4C,OAAO,CAAC,UAAUiE,KAAK,EAAE;MAC5B,IAAIA,KAAK,CAACQ,OAAO,EAAE;QACf,IAAIR,KAAK,CAACvH,OAAO,CAACgI,UAAU,KAAK,OAAO,EAAE;UACtC,IAAI,OAAOT,KAAK,CAACU,YAAY,KAAK,UAAU,EAAE;YAC1CV,KAAK,CAACU,YAAY,CAAC,CAAC;UACxB;UACAZ,YAAY,GAAG,IAAI;QACvB,CAAC,MACI,IAAIP,iBAAiB,KACrB,CAAC,CAACA,iBAAiB,CAACoB,cAAc,IAC/BpB,iBAAiB,CAACqB,WAAW,CAAC,EAAE;UACpCd,YAAY,GAAG,IAAI,CAAC,CAAC;QACzB;MACJ;;MACA,IAAIE,KAAK,CAACa,WAAW,EAAE;QACnBvK,SAAS,CAAC0J,KAAK,EAAE,aAAa,CAAC;MACnC;IACJ,CAAC,CAAC;IACF;IACA,IAAIF,YAAY,IAAIR,MAAM,IAAIA,MAAM,CAAC7G,OAAO,CAACqI,OAAO,EAAE;MAClD;MACAxB,MAAM,CAACyB,MAAM,CAAC,CAAC;MACfzJ,KAAK,CAACyI,aAAa,GAAG,KAAK;IAC/B;IACA;IACA,IAAIH,gBAAgB,EAAE;MAClBtI,KAAK,CAAC0J,SAAS,CAAC,CAAC;IACrB;IACA;IACArJ,IAAI,CAACoE,OAAO,CAAC,UAAUgD,IAAI,EAAE;MACzBA,IAAI,CAACkC,WAAW,CAAC,CAAC;MAClBlC,IAAI,CAACmC,QAAQ,CAAC,CAAC;IACnB,CAAC,CAAC;IACF5J,KAAK,CAAC6J,UAAU,CAAC,CAAC,CAAC,CAAC;IACpB;IACAxJ,IAAI,CAACoE,OAAO,CAAC,UAAUgD,IAAI,EAAE;MACzB,IAAIA,IAAI,CAACyB,OAAO,EAAE;QACdX,UAAU,GAAG,IAAI;MACrB;IACJ,CAAC,CAAC;IACF;IACAlI,IAAI,CAACoE,OAAO,CAAC,UAAUgD,IAAI,EAAE;MACzB;MACA,MAAM3E,GAAG,GAAG2E,IAAI,CAACH,GAAG,GAAG,GAAG,GAAGG,IAAI,CAACJ,GAAG;MACrC,IAAII,IAAI,CAACqC,MAAM,KAAKhH,GAAG,EAAE;QAAE;QACvB2E,IAAI,CAACqC,MAAM,GAAGhH,GAAG;QACjB;QACAsF,WAAW,CAACnE,IAAI,CAAC,YAAY;UACzBjF,SAAS,CAACyI,IAAI,EAAE,kBAAkB,EAAE3I,MAAM,CAAC2I,IAAI,CAACsC,SAAS,EAAEtC,IAAI,CAACuC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACjF,OAAOvC,IAAI,CAACsC,SAAS;QACzB,CAAC,CAAC;MACN;MACA,IAAIxB,UAAU,IAAID,gBAAgB,EAAE;QAChCb,IAAI,CAACI,MAAM,CAAC,CAAC;MACjB;IACJ,CAAC,CAAC;IACF;IACA,IAAIU,UAAU,EAAE;MACZvI,KAAK,CAACiK,YAAY,CAAC,CAAC;IACxB;IACA;IACA;IACAjL,SAAS,CAACgB,KAAK,EAAE,SAAS,CAAC;IAC3B;IACA6B,MAAM,CAAC4C,OAAO,CAAC,UAAUiE,KAAK,EAAE;MAC5B,IAAI,CAACH,UAAU,IAAIG,KAAK,CAACQ,OAAO,KAAKR,KAAK,CAACwB,OAAO,EAAE;QAChDxB,KAAK,CAACb,MAAM,CAAC,CAAC;MAClB;MACA;MACA;MACAa,KAAK,CAACa,WAAW,GAAG,KAAK;IAC7B,CAAC,CAAC;IACF;IACA,IAAI7H,OAAO,EAAE;MACTA,OAAO,CAACyI,KAAK,CAAC,IAAI,CAAC;IACvB;IACA;IACAxI,QAAQ,CAACyI,IAAI,CAAC,CAAC;IACf;IACApL,SAAS,CAACgB,KAAK,EAAE,QAAQ,CAAC;IAC1BhB,SAAS,CAACgB,KAAK,EAAE,QAAQ,CAAC;IAC1B,IAAIkI,aAAa,EAAE;MACflI,KAAK,CAAC8I,gBAAgB,CAAC,IAAI,CAAC;IAChC;IACA;IACAV,WAAW,CAAC3D,OAAO,CAAC,UAAUpB,QAAQ,EAAE;MACpCA,QAAQ,CAACgH,IAAI,CAAC,CAAC;IACnB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,GAAGA,CAACC,EAAE,EAAE;IACJ,MAAM1I,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B;AACR;AACA;IACQ,SAAS2I,QAAQA,CAAC5E,IAAI,EAAE;MACpB,OAAQA,IAAI,CAAC2E,EAAE,KAAKA,EAAE,IACjB3E,IAAI,CAACzE,OAAO,IAAIyE,IAAI,CAACzE,OAAO,CAACoJ,EAAE,KAAKA,EAAG;IAChD;IACA,IAAIE,GAAG;IACP;IACA1L,IAAI,CAAC,IAAI,CAACsB,IAAI,EAAEmK,QAAQ,CAAC;IACrB;IACAzL,IAAI,CAAC,IAAI,CAAC8C,MAAM,EAAE2I,QAAQ,CAAC;IAC/B;IACA,KAAK,IAAI9E,CAAC,GAAG,CAAC,EAAE,CAAC+E,GAAG,IAAI/E,CAAC,GAAG7D,MAAM,CAACgC,MAAM,EAAE6B,CAAC,EAAE,EAAE;MAC5C+E,GAAG,GAAG1L,IAAI,CAAC8C,MAAM,CAAC6D,CAAC,CAAC,CAAChB,MAAM,IAAI,EAAE,EAAE8F,QAAQ,CAAC;IAChD;IACA,OAAOC,GAAG;EACd;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,OAAOA,CAAA,EAAG;IACN,MAAMvJ,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5BnC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC;IAC1B,KAAK,MAAMkG,IAAI,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE;MACnC,MAAMyF,GAAG,GAAGxJ,OAAO,CAAC+D,IAAI,CAAC,GAAGtF,KAAK,CAACuB,OAAO,CAAC+D,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;MACtD,KAAK,MAAM0F,WAAW,IAAID,GAAG,EAAE;QAC3B;QACA,IAAI5N,IAAI,CAAC,IAAI,EAAE6N,WAAW,EAAE1F,IAAI,CAAC;MACrC;IACJ;IACAlG,SAAS,CAAC,IAAI,EAAE,cAAc,CAAC;EACnC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI6L,iBAAiBA,CAAA,EAAG;IAChB,OAAO,IAAI,CAAChJ,MAAM,CAACiJ,MAAM,CAAC,CAACC,GAAG,EAAElJ,MAAM,KAAK;MACvC;MACA;MACA;MACAA,MAAM,CAACmJ,mBAAmB,CAAC,CAAC,CACvBvG,OAAO,CAAEwG,KAAK,IAAK;QACpB,IAAIzL,IAAI,CAACyL,KAAK,CAACC,eAAe,EAAED,KAAK,CAACE,QAAQ,CAAC,EAAE;UAC7CJ,GAAG,CAAC9G,IAAI,CAACgH,KAAK,CAAC;QACnB;MACJ,CAAC,CAAC;MACF,OAAOF,GAAG;IACd,CAAC,EAAE,EAAE,CAAC;EACV;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,iBAAiBA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACvJ,MAAM,CAACwJ,MAAM,CAAC,UAAU3C,KAAK,EAAE;MACvC,OAAOA,KAAK,CAACyC,QAAQ;IACzB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,QAAQA,CAACC,YAAY,EAAEC,eAAe,EAAE3D,MAAM,EAAE;IAC5C,IAAI,CAAC4D,gBAAgB,CAAC,OAAO,EAAEF,YAAY,CAAC;IAC5C,IAAI,CAACE,gBAAgB,CAAC,UAAU,EAAED,eAAe,CAAC;IAClD;IACA;IACA,IAAI,CAACC,gBAAgB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IACxC,IAAI,CAAC1C,YAAY,CAAClB,MAAM,CAAC;EAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI4D,gBAAgBA,CAAC5F,IAAI,EAAE6F,eAAe,EAAE;IACpC,MAAM1L,KAAK,GAAG,IAAI;IAClB;IACA,MAAMmB,OAAO,GAAG,IAAI,CAACA,OAAO,CAAC0E,IAAI,CAAC,GAAGvG,KAAK,CAAC,IAAI,CAAC6B,OAAO,CAAC0E,IAAI,CAAC,EAAE6F,eAAe,CAAC;IAC/E,IAAIC,IAAI,GAAG,IAAI,CAAC9F,IAAI,CAAC;IACrB,IAAI8F,IAAI,IAAID,eAAe,EAAE;MACzB,IAAI,CAAC7F,IAAI,CAAC,GAAG8F,IAAI,GAAGA,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;IACxC;;IACA,IAAIzK,OAAO,IAAI,CAACwK,IAAI,EAAE;MAClBA,IAAI,GAAG,IAAI,CAAChK,QAAQ,CAACkK,IAAI,CAAC1K,OAAO,CAAC0K,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE1K,OAAO,CAAC2K,OAAO,CAAC,CACzDxN,IAAI,CAAC;QACNyN,KAAK,EAAE5K,OAAO,CAAC4K,KAAK;QACpB,OAAO,EAAE,aAAa,GAAGlG,IAAI;QAC7BmG,MAAM,EAAE7K,OAAO,CAAC6K,MAAM,IAAI;MAC9B,CAAC,CAAC,CACGC,GAAG,CAAC,CAAC;MACV;MACAN,IAAI,CAACO,MAAM,GAAG,UAAUC,aAAa,EAAEtE,MAAM,EAAE;QAC3C7H,KAAK,CAACyL,gBAAgB,CAAC5F,IAAI,EAAEsG,aAAa,CAAC;QAC3CnM,KAAK,CAAC+I,YAAY,CAAClB,MAAM,CAAC;MAC9B,CAAC;MACD;MACA,IAAI,CAAC,IAAI,CAAC/D,UAAU,EAAE;QAClB6H,IAAI,CAACnN,GAAG,CAACM,MAAM,CAAC+G,IAAI,KAAK,OAAO,GAAG;UAC/B;UACAuG,QAAQ,EAAE,IAAI,CAACjL,OAAO,CAACkL,OAAO,GAAG,KAAK,GAAG;QAC7C,CAAC,GAAG,CAAC,CAAC,EAAElL,OAAO,CAACmL,KAAK,CAAC,CAAC;MAC3B;MACA;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,IAAI,CAACzG,IAAI,CAAC,GAAG8F,IAAI;IACrB;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI5C,YAAYA,CAAClB,MAAM,GAAG,IAAI,EAAE;IACxB,MAAM1F,WAAW,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAAER,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAAEK,UAAU,GAAG,IAAI,CAACA,UAAU;IACrF;IACA,CAAC,OAAO,EAAE,UAAU,EAAE,SAAS,CAAC,CAACyC,OAAO,CAAC,UAAU3B,GAAG,EAAE;MACpD,MAAMyJ,KAAK,GAAG,IAAI,CAACzJ,GAAG,CAAC;QAAEyI,YAAY,GAAI,IAAI,CAACpK,OAAO,CAAC2B,GAAG,CAAE;QAAE0J,aAAa,GAAGjB,YAAY,CAACiB,aAAa,IAAI,KAAK;QAAEC,MAAM,GAAG3J,GAAG,KAAK,OAAO,GACtI0J,aAAa,KAAK,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC;QAChC;QACAA,aAAa,KAAK,KAAK,GAAGrK,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;MACpD,IAAIoK,KAAK,EAAE;QACPA,KAAK,CACA/N,GAAG,CAAC;UACL+I,KAAK,EAAE,CAACgE,YAAY,CAAChE,KAAK,IACtBvF,UAAU,CAACuF,KAAK,IAAIgE,YAAY,CAACmB,WAAW,IAAI,CAAC,CAAC,IAAI;QAC9D,CAAC,CAAC;QACF,MAAMC,QAAQ,GAAGhL,QAAQ,CAACiL,WAAW,CAACL,KAAK,CAAC,CAACrM,CAAC;UAC9C;UACA0H,MAAM,GAAGR,IAAI,CAACyF,KAAK,CAACN,KAAK,CAACO,OAAO,CAACvB,YAAY,CAACO,OAAO,CAAC,CAAClE,MAAM,CAAC;QAC/D2E,KAAK,CAACR,KAAK,CAACjN,MAAM,CAAC;UACf6H,CAAC,EAAE6F,aAAa,KAAK,QAAQ,GACzBG,QAAQ,GACRF,MAAM,GAAGE,QAAQ;UACrB/E;QACJ,CAAC,EAAE2D,YAAY,CAAC,EAAE,KAAK,EAAE,YAAY,CAAC;QACtC,IAAI,CAACA,YAAY,CAACwB,QAAQ,EAAE;UACxB,IAAIP,aAAa,KAAK,KAAK,EAAE;YACzBrK,WAAW,CAAC,CAAC,CAAC,GAAGiF,IAAI,CAAC4F,IAAI,CAAC7K,WAAW,CAAC,CAAC,CAAC,GACrCyF,MAAM,CAAC;UACf,CAAC,MACI,IAAI4E,aAAa,KAAK,QAAQ,EAAE;YACjCrK,WAAW,CAAC,CAAC,CAAC,GAAGiF,IAAI,CAAC4F,IAAI,CAAC7K,WAAW,CAAC,CAAC,CAAC,GACrCyF,MAAM,CAAC;UACf;QACJ;MACJ;IACJ,CAAC,EAAE,IAAI,CAAC;IACR;IACA,IAAIzF,WAAW,CAAC,CAAC,CAAC,IACd,CAAC,IAAI,CAAChB,OAAO,CAACoL,KAAK,CAACC,aAAa,IAAI,KAAK,MAAM,KAAK,EAAE;MACvDrK,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI,CAAChB,OAAO,CAACoL,KAAK,CAACtL,MAAM;IAC/C;IACA,IAAIkB,WAAW,CAAC,CAAC,CAAC,IACd,IAAI,CAAChB,OAAO,CAAC8L,OAAO,CAACT,aAAa,KAAK,QAAQ,EAAE;MACjDrK,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI,CAAChB,OAAO,CAAC8L,OAAO,CAAChM,MAAM;IACjD;IACA,MAAMiM,gBAAgB,GAAI,CAAC,IAAI,CAAC/K,WAAW,IACvC,IAAI,CAACA,WAAW,CAACgL,IAAI,CAAC,GAAG,CAAC,KAAKhL,WAAW,CAACgL,IAAI,CAAC,GAAG,CAAE;IACzD;IACA,IAAI,CAAChL,WAAW,GAAGA,WAAW;IAC9BnD,SAAS,CAAC,IAAI,EAAE,mBAAmB,CAAC;IACpC,IAAI,CAAC,IAAI,CAACuJ,UAAU,IAAI2E,gBAAgB,EAAE;MACtC,IAAI,CAAC3E,UAAU,GAAG,IAAI,CAACE,aAAa,GAAGyE,gBAAgB;MACvD;MACA,IAAI,IAAI,CAAC1H,WAAW,IAAIqC,MAAM,IAAI,IAAI,CAACU,UAAU,EAAE;QAC/C,IAAI,CAACV,MAAM,CAAC,CAAC;MACjB;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIuF,eAAeA,CAAA,EAAG;IACd,OAAO;MACH7F,KAAK,EAAEtI,QAAQ,CAAC,IAAI,CAAC2C,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC;MAClDgG,MAAM,EAAE3I,QAAQ,CAAC,IAAI,CAAC2C,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI;IACvD,CAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIyL,YAAYA,CAAA,EAAG;IACX,MAAMrN,KAAK,GAAG,IAAI;MAAEwD,YAAY,GAAGxD,KAAK,CAACmB,OAAO,CAACnB,KAAK;MAAEsN,WAAW,GAAG9J,YAAY,CAAC+D,KAAK;MAAEgG,YAAY,GAAG/J,YAAY,CAACoE,MAAM;MAAE4F,YAAY,GAAGxN,KAAK,CAACoN,eAAe,CAAC,CAAC;IACpK;AACR;AACA;AACA;AACA;AACA;IACQpN,KAAK,CAACS,UAAU,GAAG2G,IAAI,CAACC,GAAG;IAAC;IAC5B,CAAC,EAAEiG,WAAW,IAAIE,YAAY,CAACjG,KAAK,IAAI,GAAG,CAAC;IAC5C,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;IACQvH,KAAK,CAACQ,WAAW,GAAG4G,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE3H,cAAc,CAAC6N,YAAY,EAAEvN,KAAK,CAACS,UAAU,CAAC,KACzE+M,YAAY,CAAC5F,MAAM,GAAG,CAAC,GAAG4F,YAAY,CAAC5F,MAAM,GAAG,GAAG,CAAC,CAAC;IAC1D5H,KAAK,CAACwN,YAAY,GAAGA,YAAY;EACrC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI1E,gBAAgBA,CAAC2E,MAAM,EAAE;IACrB,IAAIC,IAAI,GAAG,IAAI,CAAC9L,QAAQ;MAAE+L,SAAS;IACnC,IAAI,CAACF,MAAM,EAAE;MACT,OAAOC,IAAI,IAAIA,IAAI,CAACpB,KAAK,EAAE;QACvB;QACA;QACA;QACA,IAAI,CAAC7O,GAAG,CAACmQ,IAAI,CAACC,QAAQ,CAACH,IAAI,CAAC,IAAI,CAACA,IAAI,CAACI,UAAU,EAAE;UAC9CJ,IAAI,CAACK,cAAc,GAAG,IAAI;UAC1BtQ,GAAG,CAACmQ,IAAI,CAACI,WAAW,CAACN,IAAI,CAAC;QAC9B;QACA,IAAIzO,QAAQ,CAACyO,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,KAAK,MAAM,IAC3CA,IAAI,CAACO,cAAc,EAAE;UACrBP,IAAI,CAACQ,WAAW,GAAG;YACfC,OAAO,EAAET,IAAI,CAACpB,KAAK,CAAC6B,OAAO;YAC3BvG,MAAM,EAAE8F,IAAI,CAACpB,KAAK,CAAC1E,MAAM;YACzBwG,QAAQ,EAAEV,IAAI,CAACpB,KAAK,CAAC8B;UACzB,CAAC;UACDT,SAAS,GAAG;YACRQ,OAAO,EAAE,OAAO;YAChBC,QAAQ,EAAE;UACd,CAAC;UACD,IAAIV,IAAI,KAAK,IAAI,CAAC9L,QAAQ,EAAE;YACxB+L,SAAS,CAAC/F,MAAM,GAAG,CAAC;UACxB;UACApJ,GAAG,CAACkP,IAAI,EAAEC,SAAS,CAAC;UACpB;UACA;UACA;UACA,IAAI,CAACD,IAAI,CAACW,WAAW,EAAE;YACnBX,IAAI,CAACpB,KAAK,CAACgC,WAAW,CAAC,SAAS,EAAE,OAAO,EAAE,WAAW,CAAC;UAC3D;QACJ;QACAZ,IAAI,GAAGA,IAAI,CAACI,UAAU;QACtB,IAAIJ,IAAI,KAAKjQ,GAAG,CAACmQ,IAAI,EAAE;UACnB;QACJ;MACJ;IACJ,CAAC,MACI;MACD,OAAOF,IAAI,IAAIA,IAAI,CAACpB,KAAK,EAAE;QACvB,IAAIoB,IAAI,CAACQ,WAAW,EAAE;UAClB1P,GAAG,CAACkP,IAAI,EAAEA,IAAI,CAACQ,WAAW,CAAC;UAC3B,OAAOR,IAAI,CAACQ,WAAW;QAC3B;QACA,IAAIR,IAAI,CAACK,cAAc,EAAE;UACrBtQ,GAAG,CAACmQ,IAAI,CAACW,WAAW,CAACb,IAAI,CAAC;UAC1BA,IAAI,CAACK,cAAc,GAAG,KAAK;QAC/B;QACAL,IAAI,GAAGA,IAAI,CAACI,UAAU;MAC1B;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIU,YAAYA,CAACC,SAAS,EAAE;IACpB,IAAI,CAAC7N,SAAS,CAAC6N,SAAS,GAAG,uBAAuB,IAAIA,SAAS,IAAI,EAAE,CAAC;EAC1E;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,YAAYA,CAAA,EAAG;IACX,MAAM1O,KAAK,GAAG,IAAI;MAAEmB,OAAO,GAAGnB,KAAK,CAACmB,OAAO;MAAEqC,YAAY,GAAGrC,OAAO,CAACnB,KAAK;MAAE2O,aAAa,GAAG,uBAAuB;MAAEC,WAAW,GAAG9O,SAAS,CAAC,CAAC;IAC7I,IAAI+O,cAAc;MAAEjN,QAAQ,GAAG5B,KAAK,CAAC4B,QAAQ;IAC7C,IAAI,CAACA,QAAQ,EAAE;MACX5B,KAAK,CAAC4B,QAAQ,GAAGA,QAAQ,GACrB4B,YAAY,CAAC5B,QAAQ;IAC7B;IACA,IAAIvC,QAAQ,CAACuC,QAAQ,CAAC,EAAE;MACpB5B,KAAK,CAAC4B,QAAQ,GAAGA,QAAQ,GACrBnE,GAAG,CAACqR,cAAc,CAAClN,QAAQ,CAAC;IACpC;IACA;IACA,IAAI,CAACA,QAAQ,EAAE;MACX/C,KAAK,CAAC,EAAE,EAAE,IAAI,EAAEmB,KAAK,CAAC;IAC1B;IACA;IACA;IACA;IACA;IACA;IACA,MAAM+O,aAAa,GAAGtP,IAAI,CAACnB,IAAI,CAACsD,QAAQ,EAAE+M,aAAa,CAAC,CAAC;IACzD,IAAIxP,QAAQ,CAAC4P,aAAa,CAAC,IACvBvR,MAAM,CAACuR,aAAa,CAAC,IACrBvR,MAAM,CAACuR,aAAa,CAAC,CAACvJ,WAAW,EAAE;MACnChI,MAAM,CAACuR,aAAa,CAAC,CAACnD,OAAO,CAAC,CAAC;IACnC;IACA;IACAtN,IAAI,CAACsD,QAAQ,EAAE+M,aAAa,EAAE3O,KAAK,CAACc,KAAK,CAAC;IAC1C;IACAc,QAAQ,CAACoN,SAAS,GAAG5Q,GAAG,CAAC6Q,SAAS;IAClC;IACA;IACA;IACA;IACA;IACA,IAAI,CAACzL,YAAY,CAAC0L,SAAS,IAAI,CAACtN,QAAQ,CAACyM,WAAW,EAAE;MAClDrO,KAAK,CAAC8I,gBAAgB,CAAC,CAAC;IAC5B;IACA;IACA9I,KAAK,CAACqN,YAAY,CAAC,CAAC;IACpB,MAAM5M,UAAU,GAAGT,KAAK,CAACS,UAAU;IACnC,MAAMD,WAAW,GAAGR,KAAK,CAACQ,WAAW;IACrC;IACA;IACAhC,GAAG,CAACoD,QAAQ,EAAE;MAAEwM,QAAQ,EAAE;IAAS,CAAC,CAAC;IACrC;IACA,IAAI,CAACpO,KAAK,CAAC8D,UAAU,EAAE;MACnB+K,cAAc,GAAG/P,MAAM,CAAC;QACpBqQ,QAAQ,EAAE,UAAU;QACpB;QACA;QACAf,QAAQ,EAAE,QAAQ;QAClB7G,KAAK,EAAE9G,UAAU,GAAG,IAAI;QACxBmH,MAAM,EAAEpH,WAAW,GAAG,IAAI;QAC1B4O,SAAS,EAAE,MAAM;QACjBC,UAAU,EAAE,QAAQ;QACpBrD,MAAM,EAAE,CAAC;QACT,6BAA6B,EAAE,eAAe;QAC9CsD,UAAU,EAAE,MAAM;QAClB,cAAc,EAAE,cAAc;QAC9BC,OAAO,EAAE;MACb,CAAC,EAAE/L,YAAY,CAAC8I,KAAK,IAAI,CAAC,CAAC,CAAC;IAChC;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,MAAM1L,SAAS,GAAGrC,aAAa,CAAC,KAAK,EAAE;MACnCgM,EAAE,EAAEqE;IACR,CAAC,EAAEC,cAAc,EAAEjN,QAAQ,CAAC;IAC5B5B,KAAK,CAACY,SAAS,GAAGA,SAAS;IAC3B;IACAZ,KAAK,CAACwP,OAAO,GAAG5O,SAAS,CAAC0L,KAAK,CAACmD,MAAM;IACtC;IACA,MAAMC,QAAQ,GAAGlM,YAAY,CAAC7B,QAAQ,IAAI,CAAChE,GAAG,GAC1CE,gBAAgB,CAAC8R,eAAe,CAACnM,YAAY,CAAC7B,QAAQ,CAAC,GACvD1D,WAAW;IACf;AACR;AACA;AACA;AACA;AACA;AACA;IACQ+B,KAAK,CAAC2B,QAAQ,GAAG,IAAI+N,QAAQ,CAAC9O,SAAS,EAAEH,UAAU,EAAED,WAAW,EAAE,KAAK,CAAC,EAAEgD,YAAY,CAACoM,SAAS,EAAEzO,OAAO,CAAC0O,SAAS,IAAI1O,OAAO,CAAC0O,SAAS,CAACC,SAAS,EAAE9P,KAAK,CAAC8D,UAAU,CAAC;IACrK9D,KAAK,CAACwN,YAAY,GAAGxN,KAAK,CAACoN,eAAe,CAAC,CAAC;IAC5C;IACAtQ,YAAY,CAAC,KAAK,CAAC,EAAEkD,KAAK,CAAC;IAC3BA,KAAK,CAACwO,YAAY,CAAChL,YAAY,CAACiL,SAAS,CAAC;IAC1C,IAAI,CAACzO,KAAK,CAAC8D,UAAU,EAAE;MACnB9D,KAAK,CAAC2B,QAAQ,CAACoO,QAAQ,CAACvM,YAAY,CAAC8I,KAAK,CAAC;IAC/C,CAAC,MACI;MACD;MACA,KAAK,MAAMxJ,GAAG,IAAI3B,OAAO,CAAC6O,IAAI,EAAE;QAAE;QAC9B,IAAI,CAACrO,QAAQ,CAACsO,UAAU,CAAC9O,OAAO,CAAC6O,IAAI,CAAClN,GAAG,CAAC,CAAC;MAC/C;IACJ;IACA;IACA9C,KAAK,CAAC2B,QAAQ,CAACuO,UAAU,GAAGlQ,KAAK,CAACc,KAAK;IACvC9B,SAAS,CAAC,IAAI,EAAE,mBAAmB,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI6K,UAAUA,CAACsG,QAAQ,EAAE;IACjB,MAAM;MAAEpO,OAAO;MAAEd,MAAM;MAAEkB;IAAY,CAAC,GAAG,IAAI;IAC7C,IAAI,CAACiO,YAAY,CAAC,CAAC;IACnB;IACA,IAAIjO,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC1D,OAAO,CAACwC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;MACvC,IAAI,CAACM,OAAO,GAAG6F,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC9F,OAAO,EAAEY,WAAW,CAAC,CAAC,CAAC,GAAGJ,OAAO,CAAC,CAAC,CAAC,CAAC;IACtE;IACA,IAAII,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC1D,OAAO,CAACwC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;MACvC,IAAI,CAACoP,YAAY,GAAGjJ,IAAI,CAACC,GAAG,CAAC,IAAI,CAACgJ,YAAY,EAAElO,WAAW,CAAC,CAAC,CAAC,GAAGJ,OAAO,CAAC,CAAC,CAAC,CAAC;IAChF;IACA;IACA,IAAI,IAAI,CAACiG,MAAM,IAAI,IAAI,CAACA,MAAM,CAACmG,OAAO,EAAE;MACpC,IAAI,CAACnG,MAAM,CAACsI,aAAa,CAACrP,MAAM,EAAEc,OAAO,CAAC;IAC9C;IACA/C,SAAS,CAAC,IAAI,EAAE,YAAY,CAAC;IAC7B,IAAI,CAACmR,QAAQ,EAAE;MACX,IAAI,CAACI,cAAc,CAAC,CAAC;IACzB;EACJ;EACA;AACJ;AACA;AACA;EACIA,cAAcA,CAAA,EAAG;IACb,MAAMvQ,KAAK,GAAG,IAAI;MAClB;MACAM,UAAU,GAAGN,KAAK,CAACM,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAAEyH,SAAS,GAAG/H,KAAK,CAAC+H,SAAS;MAAE9G,MAAM,GAAGjB,KAAK,CAACiB,MAAM;MAAEuP,SAAS,GAAG,SAAAA,CAAUnQ,IAAI,EAAE;QAC1HA,IAAI,CAACoE,OAAO,CAAC,UAAUgD,IAAI,EAAE;UACzB,IAAIA,IAAI,CAACyC,OAAO,EAAE;YACdzC,IAAI,CAAC+I,SAAS,CAAC,CAAC;UACpB;QACJ,CAAC,CAAC;MACN,CAAC;IACD;IACA,IAAIxQ,KAAK,CAAC+D,kBAAkB,EAAE;MAC1ByM,SAAS,CAACxQ,KAAK,CAACK,IAAI,CAAC;IACzB,CAAC,MACI,IAAI0H,SAAS,IAAIA,SAAS,CAAClE,MAAM,EAAE;MACpC2M,SAAS,CAACzI,SAAS,CAAC;IACxB;IACA;IACArK,WAAW,CAAC+G,OAAO,CAAC,UAAUgM,CAAC,EAAEC,IAAI,EAAE;MACnC,IAAI,CAACjS,OAAO,CAACwC,MAAM,CAACyP,IAAI,CAAC,CAAC,EAAE;QACxB1Q,KAAK,CAACyQ,CAAC,CAAC,IAAInQ,UAAU,CAACoQ,IAAI,CAAC;MAChC;IACJ,CAAC,CAAC;IACF1Q,KAAK,CAAC2Q,YAAY,CAAC,CAAC;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAAA,EAAG;IACT,OAAOlS,WAAW,CAAC,IAAI,CAAC0D,WAAW,EAAEnF,cAAc,CAAC;EACxD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI4T,MAAMA,CAACjK,CAAC,EAAE;IACN,MAAM5G,KAAK,GAAG,IAAI;MAAE8Q,MAAM,GAAG9Q,KAAK,CAACwN,YAAY;MAAEA,YAAY,GAAGxN,KAAK,CAACoN,eAAe,CAAC,CAAC;IACvF,OAAOpN,KAAK,CAAC0B,OAAO,CAACqP,aAAa;IAClC;IACA;IACA,IAAI,CAAC/Q,KAAK,CAACgR,UAAU,IACjB,CAAChR,KAAK,CAACe,UAAU,IACjB+P,MAAM;IACN;IACAtD,YAAY,CAACjG,KAAK,EAAE;MACpB,IAAIiG,YAAY,CAACjG,KAAK,KAAKuJ,MAAM,CAACvJ,KAAK,IACnCiG,YAAY,CAAC5F,MAAM,KAAKkJ,MAAM,CAAClJ,MAAM,EAAE;QACvCzJ,CAAC,CAAC8S,YAAY,CAACjR,KAAK,CAACkR,aAAa,CAAC;QACnC;QACA;QACAlR,KAAK,CAACkR,aAAa,GAAGrR,WAAW,CAAC,YAAY;UAC1C;UACA;UACA,IAAIG,KAAK,CAACY,SAAS,EAAE;YACjBZ,KAAK,CAACmR,OAAO,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC;UACxC;QACJ,CAAC,EAAEvK,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;MACnB;MACA5G,KAAK,CAACwN,YAAY,GAAGA,YAAY;IACrC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI4D,SAASA,CAAA,EAAG;IACR,MAAMpR,KAAK,GAAG,IAAI;IAClB,MAAMqR,SAAS,GAAIzK,CAAC,IAAK;MACrB,IAAI5G,KAAK,CAACmB,OAAO,EAAEnB,KAAK,CAAC6Q,MAAM,IAAI7Q,KAAK,CAACsR,SAAS,EAAE;QAChDtR,KAAK,CAAC6Q,MAAM,CAACjK,CAAC,CAAC;MACnB;IACJ,CAAC;IACD,IAAI,OAAO2K,cAAc,KAAK,UAAU,EAAE;MACrC,IAAIA,cAAc,CAACF,SAAS,CAAC,CAAEG,OAAO,CAACxR,KAAK,CAAC4B,QAAQ,CAAC;MACvD;IACJ,CAAC,MACI;MACD,MAAM6P,MAAM,GAAGpT,QAAQ,CAACT,GAAG,EAAE,QAAQ,EAAEyT,SAAS,CAAC;MACjDhT,QAAQ,CAAC,IAAI,EAAE,SAAS,EAAEoT,MAAM,CAAC;IACrC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIN,OAAOA,CAAC5J,KAAK,EAAEK,MAAM,EAAEE,SAAS,EAAE;IAC9B,MAAM9H,KAAK,GAAG,IAAI;MAAE2B,QAAQ,GAAG3B,KAAK,CAAC2B,QAAQ;IAC7C;IACA3B,KAAK,CAACe,UAAU,IAAI,CAAC;IACrB;IACAjE,YAAY,CAACgL,SAAS,EAAE9H,KAAK,CAAC;IAC9B,MAAM0R,eAAe,GAAG/P,QAAQ,CAAC+P,eAAe;IAChD1R,KAAK,CAAC2R,cAAc,GAAG3R,KAAK,CAACQ,WAAW;IACxCR,KAAK,CAAC4R,aAAa,GAAG5R,KAAK,CAACS,UAAU;IACtC,IAAI,OAAO8G,KAAK,KAAK,WAAW,EAAE;MAC9BvH,KAAK,CAACmB,OAAO,CAACnB,KAAK,CAACuH,KAAK,GAAGA,KAAK;IACrC;IACA,IAAI,OAAOK,MAAM,KAAK,WAAW,EAAE;MAC/B5H,KAAK,CAACmB,OAAO,CAACnB,KAAK,CAAC4H,MAAM,GAAGA,MAAM;IACvC;IACA5H,KAAK,CAACqN,YAAY,CAAC,CAAC;IACpB;IACA;IACA,IAAI,CAACrN,KAAK,CAAC8D,UAAU,EAAE;MACnB,CAAC4N,eAAe,GAAG9U,OAAO,GAAG4B,GAAG,EAAEwB,KAAK,CAACY,SAAS,EAAE;QAC/C2G,KAAK,EAAEvH,KAAK,CAACS,UAAU,GAAG,IAAI;QAC9BmH,MAAM,EAAE5H,KAAK,CAACQ,WAAW,GAAG;MAChC,CAAC,EAAEkR,eAAe,CAAC;IACvB;IACA1R,KAAK,CAAC2Q,YAAY,CAAC,IAAI,CAAC;IACxBhP,QAAQ,CAACwP,OAAO,CAACnR,KAAK,CAACS,UAAU,EAAET,KAAK,CAACQ,WAAW,EAAEkR,eAAe,CAAC;IACtE;IACA1R,KAAK,CAACK,IAAI,CAACoE,OAAO,CAAC,UAAUgD,IAAI,EAAE;MAC/BA,IAAI,CAACyB,OAAO,GAAG,IAAI;MACnBzB,IAAI,CAACmC,QAAQ,CAAC,CAAC;IACnB,CAAC,CAAC;IACF5J,KAAK,CAACyI,aAAa,GAAG,IAAI,CAAC,CAAC;IAC5BzI,KAAK,CAACuI,UAAU,GAAG,IAAI,CAAC,CAAC;IACzBvI,KAAK,CAAC+I,YAAY,CAAC,CAAC,CAAC,CAAC;IACtB/I,KAAK,CAAC6J,UAAU,CAAC,CAAC;IAClB7J,KAAK,CAAC6H,MAAM,CAAC6J,eAAe,CAAC;IAC7B1R,KAAK,CAAC2R,cAAc,GAAG,IAAI;IAC3B3S,SAAS,CAACgB,KAAK,EAAE,QAAQ,CAAC;IAC1B;IACA;IACA;IACA6R,UAAU,CAAC,MAAM;MACb,IAAI7R,KAAK,EAAE;QACPhB,SAAS,CAACgB,KAAK,EAAE,WAAW,EAAE,KAAK,CAAC,EAAE,MAAM;UACxCA,KAAK,CAACe,UAAU,IAAI,CAAC;QACzB,CAAC,CAAC;MACN;IACJ,CAAC,EAAElE,UAAU,CAAC6U,eAAe,CAAC,CAACI,QAAQ,CAAC;EAC5C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACInB,YAAYA,CAACR,QAAQ,EAAE;IACnB,MAAMnQ,KAAK,GAAG,IAAI;MAAEmG,QAAQ,GAAGnG,KAAK,CAACmG,QAAQ;MAAExE,QAAQ,GAAG3B,KAAK,CAAC2B,QAAQ;MAAElB,UAAU,GAAGT,KAAK,CAACS,UAAU;MAAED,WAAW,GAAGR,KAAK,CAACQ,WAAW;MAAEgD,YAAY,GAAGxD,KAAK,CAACmB,OAAO,CAACnB,KAAK;MAAE+B,OAAO,GAAG/B,KAAK,CAAC+B,OAAO;MAAEgQ,UAAU,GAAG/R,KAAK,CAAC+R,UAAU;IACpO,IAAIzQ,QAAQ,EAAEC,OAAO,EAAEC,SAAS,EAAEH,UAAU;IAC5C;AACR;AACA;AACA;AACA;AACA;IACQrB,KAAK,CAACsB,QAAQ,GAAGA,QAAQ,GAAG8F,IAAI,CAACyF,KAAK,CAAC7M,KAAK,CAACsB,QAAQ,CAAC;IACtD;AACR;AACA;AACA;AACA;AACA;IACQtB,KAAK,CAACuB,OAAO,GAAGA,OAAO,GAAG6F,IAAI,CAACyF,KAAK,CAAC7M,KAAK,CAACuB,OAAO,CAAC;IACnD;AACR;AACA;AACA;AACA;AACA;IACQvB,KAAK,CAACwB,SAAS,GAAGA,SAAS,GAAG4F,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACyF,KAAK,CAACpM,UAAU,GAAGa,QAAQ,GAAGtB,KAAK,CAACgS,WAAW,CAAC,CAAC;IAChG;AACR;AACA;AACA;AACA;AACA;IACQhS,KAAK,CAACqB,UAAU,GAAGA,UAAU,GAAG+F,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACyF,KAAK,CAACrM,WAAW,GAAGe,OAAO,GAAGvB,KAAK,CAACqQ,YAAY,CAAC,CAAC;IACnGrQ,KAAK,CAACiS,SAAS,GAAG9L,QAAQ,GAAG9E,UAAU,GAAGG,SAAS;IACnDxB,KAAK,CAACkS,SAAS,GAAG/L,QAAQ,GAAG3E,SAAS,GAAGH,UAAU;IACnDrB,KAAK,CAACmS,eAAe,GAAG3O,YAAY,CAAC2O,eAAe,IAAI,CAAC;IACzD;IACAnS,KAAK,CAACgC,UAAU,GAAGL,QAAQ,CAACK,UAAU,GAAG;MACrC0E,CAAC,EAAE3E,OAAO,CAAC,CAAC,CAAC;MACb4E,CAAC,EAAE5E,OAAO,CAAC,CAAC,CAAC;MACbwF,KAAK,EAAE9G,UAAU,GAAGsB,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC;MAC3C6F,MAAM,EAAEpH,WAAW,GAAGuB,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC;IAChD,CAAC;IACD/B,KAAK,CAACoB,OAAO,GAAGO,QAAQ,CAACP,OAAO,GAAG;MAC/BsF,CAAC,EAAEpF,QAAQ;MACXqF,CAAC,EAAEpF,OAAO;MACVgG,KAAK,EAAE/F,SAAS;MAChBoG,MAAM,EAAEvG;IACZ,CAAC;IACD,MAAM8Q,eAAe,GAAG,CAAC,GAAG/K,IAAI,CAACgL,KAAK,CAACpS,KAAK,CAACmS,eAAe,GAAG,CAAC,CAAC;MAAEE,KAAK,GAAGjL,IAAI,CAAC4F,IAAI,CAAC5F,IAAI,CAACC,GAAG,CAAC8K,eAAe,EAAEJ,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAAEO,KAAK,GAAGlL,IAAI,CAAC4F,IAAI,CAAC5F,IAAI,CAACC,GAAG,CAAC8K,eAAe,EAAEJ,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACnM/R,KAAK,CAACU,OAAO,GAAG;MACZgG,CAAC,EAAE2L,KAAK;MACR1L,CAAC,EAAE2L,KAAK;MACR/K,KAAK,EAAEH,IAAI,CAACgL,KAAK,CAACpS,KAAK,CAACiS,SAAS,GAC7B7K,IAAI,CAACC,GAAG,CAAC8K,eAAe,EAAEJ,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAC5CM,KAAK,CAAC;MACVzK,MAAM,EAAER,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACgL,KAAK,CAACpS,KAAK,CAACkS,SAAS,GAC1C9K,IAAI,CAACC,GAAG,CAAC8K,eAAe,EAAEJ,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAC5CO,KAAK,CAAC;IACd,CAAC;IACD,IAAI,CAACnC,QAAQ,EAAE;MACXnQ,KAAK,CAACK,IAAI,CAACoE,OAAO,CAAC,UAAUgD,IAAI,EAAE;QAC/BA,IAAI,CAAC8K,WAAW,CAAC,CAAC;QAClB9K,IAAI,CAAC+K,kBAAkB,CAAC,CAAC;MAC7B,CAAC,CAAC;MACF7Q,QAAQ,CAAC8Q,aAAa,CAAC,CAAC;IAC5B;IACAzT,SAAS,CAACgB,KAAK,EAAE,mBAAmB,EAAE;MAAEmQ,QAAQ,EAAEA;IAAS,CAAC,CAAC;EACjE;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,YAAYA,CAAA,EAAG;IACXpR,SAAS,CAAC,IAAI,EAAE,cAAc,CAAC;IAC/B,MAAMgB,KAAK,GAAG,IAAI;MAAE0S,YAAY,GAAG1S,KAAK,CAACmB,OAAO,CAACnB,KAAK;IACtD;IACA,CAAC,QAAQ,EAAE,SAAS,CAAC,CAACyE,OAAO,CAAC,SAASkO,YAAYA,CAACC,MAAM,EAAE;MACxD,MAAMC,KAAK,GAAGH,YAAY,CAACE,MAAM,CAAC;QAAEE,MAAM,GAAG1T,QAAQ,CAACyT,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,EAAEA,KAAK,EAAEA,KAAK,EAAEA,KAAK,CAAC;MACnG,CACI,KAAK,EACL,OAAO,EACP,QAAQ,EACR,MAAM,CACT,CAACpO,OAAO,CAAC,UAAUsO,QAAQ,EAAErC,IAAI,EAAE;QAChC1Q,KAAK,CAAC4S,MAAM,CAAC,CAAClC,IAAI,CAAC,GAAGlR,IAAI,CAACkT,YAAY,CAACE,MAAM,GAAGG,QAAQ,CAAC,EAAED,MAAM,CAACpC,IAAI,CAAC,CAAC;MAC7E,CAAC,CAAC;IACN,CAAC,CAAC;IACF;IACA;IACAhT,WAAW,CAAC+G,OAAO,CAAC,UAAUgM,CAAC,EAAEC,IAAI,EAAE;MACnC1Q,KAAK,CAACyQ,CAAC,CAAC,GAAGjR,IAAI,CAACQ,KAAK,CAACiB,MAAM,CAACyP,IAAI,CAAC,EAAE1Q,KAAK,CAAC+B,OAAO,CAAC2O,IAAI,CAAC,CAAC;IAC5D,CAAC,CAAC;IACF1Q,KAAK,CAACM,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjCN,KAAK,CAAC+R,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACnC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI9H,YAAYA,CAAA,EAAG;IACX,MAAMjK,KAAK,GAAG,IAAI;MAAEwD,YAAY,GAAGxD,KAAK,CAACmB,OAAO,CAACnB,KAAK;MAAE2B,QAAQ,GAAG3B,KAAK,CAAC2B,QAAQ;MAAElB,UAAU,GAAGT,KAAK,CAACS,UAAU;MAAED,WAAW,GAAGR,KAAK,CAACQ,WAAW;MAAEsD,UAAU,GAAG9D,KAAK,CAAC8D,UAAU;MAAEkP,WAAW,GAAGhT,KAAK,CAACgT,WAAW;MAAEC,oBAAoB,GAAGzP,YAAY,CAAC0P,eAAe;MAAEC,mBAAmB,GAAG3P,YAAY,CAAC2P,mBAAmB;MAAEC,mBAAmB,GAAG5P,YAAY,CAAC4P,mBAAmB;MAAE9R,QAAQ,GAAGtB,KAAK,CAACsB,QAAQ;MAAEC,OAAO,GAAGvB,KAAK,CAACuB,OAAO;MAAEC,SAAS,GAAGxB,KAAK,CAACwB,SAAS;MAAEH,UAAU,GAAGrB,KAAK,CAACqB,UAAU;MAAED,OAAO,GAAGpB,KAAK,CAACoB,OAAO;MAAEiS,QAAQ,GAAGrT,KAAK,CAACqT,QAAQ;MAAE3S,OAAO,GAAGV,KAAK,CAACU,OAAO;IACnjB,IAAI4S,eAAe,GAAGtT,KAAK,CAACsT,eAAe;MAAEC,cAAc,GAAGvT,KAAK,CAACuT,cAAc;MAAEC,UAAU,GAAGxT,KAAK,CAACwT,UAAU;MAAEC,gBAAgB;MAAEC,GAAG;MAAEC,MAAM;MAAEC,IAAI,GAAG,SAAS;IAClK;IACA,IAAI,CAACN,eAAe,EAAE;MAClBtT,KAAK,CAACsT,eAAe,GAAGA,eAAe,GAAG3R,QAAQ,CAACkS,IAAI,CAAC,CAAC,CACpDC,QAAQ,CAAC,uBAAuB,CAAC,CACjC7H,GAAG,CAAC,CAAC;MACV2H,IAAI,GAAG,MAAM;IACjB;IACA,IAAI,CAAC9P,UAAU,EAAE;MACb;MACA2P,gBAAgB,GAAGjQ,YAAY,CAACuQ,WAAW,IAAI,CAAC;MAChDL,GAAG,GAAGD,gBAAgB,IAAIjQ,YAAY,CAACwQ,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;MACtDL,MAAM,GAAG;QACLM,IAAI,EAAEhB,oBAAoB,IAAI;MAClC,CAAC;MACD,IAAIQ,gBAAgB,IAAIH,eAAe,CAAC,cAAc,CAAC,EAAE;QAAE;QACvDK,MAAM,CAACO,MAAM,GAAG1Q,YAAY,CAAC2Q,WAAW;QACxCR,MAAM,CAAC,cAAc,CAAC,GAAGF,gBAAgB;MAC7C;MACAH,eAAe,CACVhV,IAAI,CAACqV,MAAM,CAAC,CACZK,MAAM,CAACxQ,YAAY,CAACwQ,MAAM,CAAC;IACpC,CAAC,MACI;MACDP,gBAAgB,GAAGC,GAAG,GAAGJ,eAAe,CAACc,WAAW,CAAC,CAAC;IAC1D;IACAd,eAAe,CAACM,IAAI,CAAC,CAAC;MAClBlN,CAAC,EAAEgN,GAAG,GAAG,CAAC;MACV/M,CAAC,EAAE+M,GAAG,GAAG,CAAC;MACVnM,KAAK,EAAE9G,UAAU,GAAGiT,GAAG,GAAGD,gBAAgB,GAAG,CAAC;MAC9C7L,MAAM,EAAEpH,WAAW,GAAGkT,GAAG,GAAGD,gBAAgB,GAAG,CAAC;MAChDY,CAAC,EAAE7Q,YAAY,CAAC8Q;IACpB,CAAC,CAAC;IACF;IACAV,IAAI,GAAG,SAAS;IAChB,IAAI,CAACL,cAAc,EAAE;MACjBK,IAAI,GAAG,MAAM;MACb5T,KAAK,CAACuT,cAAc,GAAGA,cAAc,GAAG5R,QAAQ,CAACkS,IAAI,CAAC,CAAC,CAClDC,QAAQ,CAAC,4BAA4B,CAAC,CACtC7H,GAAG,CAAC,CAAC;IACd;IACAsH,cAAc,CAACK,IAAI,CAAC,CAACxS,OAAO,CAAC;IAC7B,IAAI,CAAC0C,UAAU,EAAE;MACb;MACAyP,cAAc,CACTjV,IAAI,CAAC;QACN2V,IAAI,EAAEd,mBAAmB,IAAI;MACjC,CAAC,CAAC,CACGa,MAAM,CAACxQ,YAAY,CAAC+Q,UAAU,CAAC;MACpC;MACA,IAAInB,mBAAmB,EAAE;QACrB,IAAI,CAACJ,WAAW,EAAE;UACdhT,KAAK,CAACgT,WAAW,GAAGrR,QAAQ,CAAC6S,KAAK,CAACpB,mBAAmB,EAAE9R,QAAQ,EAAEC,OAAO,EAAEC,SAAS,EAAEH,UAAU,CAAC,CAAC4K,GAAG,CAAC,CAAC;QAC3G,CAAC,MACI;UACD,IAAImH,mBAAmB,KAAKJ,WAAW,CAAC1U,IAAI,CAAC,MAAM,CAAC,EAAE;YAClD0U,WAAW,CAAC1U,IAAI,CAAC,MAAM,EAAE8U,mBAAmB,CAAC;UACjD;UACAJ,WAAW,CAACpW,OAAO,CAACwE,OAAO,CAAC;QAChC;MACJ;IACJ;IACA;IACA,IAAI,CAACiS,QAAQ,EAAE;MACXrT,KAAK,CAACqT,QAAQ,GAAG1R,QAAQ,CAAC0R,QAAQ,CAAC3S,OAAO,CAAC;IAC/C,CAAC,MACI;MACD2S,QAAQ,CAACzW,OAAO,CAAC;QACb2K,KAAK,EAAE7G,OAAO,CAAC6G,KAAK;QACpBK,MAAM,EAAElH,OAAO,CAACkH;MACpB,CAAC,CAAC;IACN;IACA;IACAgM,IAAI,GAAG,SAAS;IAChB,IAAI,CAACJ,UAAU,EAAE;MACbI,IAAI,GAAG,MAAM;MACb5T,KAAK,CAACwT,UAAU,GAAGA,UAAU,GAAG7R,QAAQ,CAACkS,IAAI,CAAC,CAAC,CAC1CC,QAAQ,CAAC,wBAAwB,CAAC,CAClCxV,IAAI,CAAC;QACN0N,MAAM,EAAE,CAAC,CAAC;MACd,CAAC,CAAC,CACGC,GAAG,CAAC,CAAC;IACd;IACA,IAAI,CAACnI,UAAU,EAAE;MACb;MACA0P,UAAU,CAAClV,IAAI,CAAC;QACZ4V,MAAM,EAAE1Q,YAAY,CAACiR,eAAe;QACpC,cAAc,EAAEjR,YAAY,CAAC2O,eAAe,IAAI,CAAC;QACjD8B,IAAI,EAAE;MACV,CAAC,CAAC;IACN;IACAT,UAAU,CAACI,IAAI,CAAC,CAACJ,UAAU,CAACkB,KAAK,CAAC;MAC9BhO,CAAC,EAAEpF,QAAQ;MACXqF,CAAC,EAAEpF,OAAO;MACVgG,KAAK,EAAE/F,SAAS;MAChBoG,MAAM,EAAEvG;IACZ,CAAC,EAAE,CAACmS,UAAU,CAACY,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC;IACApU,KAAK,CAACuI,UAAU,GAAG,KAAK;IACxBvJ,SAAS,CAAC,IAAI,EAAE,mBAAmB,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI2V,cAAcA,CAAA,EAAG;IACb,MAAM3U,KAAK,GAAG,IAAI;MAAEwD,YAAY,GAAGxD,KAAK,CAACmB,OAAO,CAACnB,KAAK;MAAE4U,aAAa,GAAG5U,KAAK,CAACmB,OAAO,CAACU,MAAM;IAC5F,IAAI6D,CAAC,EAAEmP,KAAK,EAAEhC,KAAK;IACnB;AACR;AACA;AACA;AACA;AACA;IACQ,CAAC,UAAU,EAAE,SAAS,EAAE,OAAO,CAAC,CAACpO,OAAO,CAAC,UAAU3B,GAAG,EAAE;MACpD;MACA+R,KAAK,GAAG7W,WAAW,CAACwF,YAAY,CAACZ,IAAI,CAAC;MACtC;MACAiQ,KAAK;MACD;MACArP,YAAY,CAACV,GAAG,CAAC;MACb;MACC+R,KAAK,IAAIA,KAAK,CAACC,SAAS,CAAChS,GAAG,CAAE;MACvC;MACA;MACA4C,CAAC,GAAGkP,aAAa,IAAIA,aAAa,CAAC/Q,MAAM;MACzC,OAAO,CAACgP,KAAK,IAAInN,CAAC,EAAE,EAAE;QAClBmP,KAAK,GAAG7W,WAAW,CAAC4W,aAAa,CAAClP,CAAC,CAAC,CAAC9C,IAAI,CAAC;QAC1C,IAAIiS,KAAK,IAAIA,KAAK,CAACC,SAAS,CAAChS,GAAG,CAAC,EAAE;UAC/B+P,KAAK,GAAG,IAAI;QAChB;MACJ;MACA;MACA7S,KAAK,CAAC8C,GAAG,CAAC,GAAG+P,KAAK;IACtB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIkC,UAAUA,CAACC,UAAU,EAAE;IACnB,MAAMhV,KAAK,GAAG,IAAI;MAAEiV,WAAW,GAAGjV,KAAK,CAAC6B,MAAM;IAC9C;IACAoT,WAAW,CAACxQ,OAAO,CAAC,UAAU5C,MAAM,EAAE;MAClCA,MAAM,CAACmD,YAAY,CAACnB,MAAM,GAAG,CAAC;IAClC,CAAC,CAAC;IACF;IACAoR,WAAW,CAACxQ,OAAO,CAAC,UAAU5C,MAAM,EAAE;MAClC,IAAIqT,QAAQ,GAAGrT,MAAM,CAACV,OAAO,CAAC+T,QAAQ;MACtC,IAAI7V,QAAQ,CAAC6V,QAAQ,CAAC,EAAE;QACpB,IAAIA,QAAQ,KAAK,WAAW,EAAE;UAC1BA,QAAQ,GAAGlV,KAAK,CAAC6B,MAAM,CAACA,MAAM,CAACf,KAAK,GAAG,CAAC,CAAC;QAC7C,CAAC,MACI;UACDoU,QAAQ,GAAGlV,KAAK,CAACsK,GAAG,CAAC4K,QAAQ,CAAC;QAClC;QACA;QACA,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,YAAY,KAAKtT,MAAM,EAAE;UAC9CqT,QAAQ,CAAClQ,YAAY,CAACf,IAAI,CAACpC,MAAM,CAAC;UAClCA,MAAM,CAACsT,YAAY,GAAGD,QAAQ;UAC9B,IAAIA,QAAQ,CAACtQ,kBAAkB,EAAE;YAC7B/C,MAAM,CAACuT,qBAAqB,CAAC,CAAC;UAClC;UACAvT,MAAM,CAACqI,OAAO,GAAG1K,IAAI,CAACqC,MAAM,CAACV,OAAO,CAAC+I,OAAO,EAAEgL,QAAQ,CAAC/T,OAAO,CAAC+I,OAAO,EAAErI,MAAM,CAACqI,OAAO,CAAC,CAAC,CAAC;QAC7F;MACJ;IACJ,CAAC,CAAC;;IACFlL,SAAS,CAAC,IAAI,EAAE,iBAAiB,EAAE;MAAEgW;IAAW,CAAC,CAAC;EACtD;EACA;AACJ;AACA;AACA;AACA;AACA;EACIK,YAAYA,CAAA,EAAG;IACX,IAAI,CAACxT,MAAM,CAAC4C,OAAO,CAAC,UAAUiE,KAAK,EAAE;MACjCA,KAAK,CAAC4M,SAAS,CAAC,CAAC;MACjB5M,KAAK,CAACe,MAAM,CAAC,CAAC;IAClB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;EACIA,MAAMA,CAAA,EAAG;IACL,MAAMzJ,KAAK,GAAG,IAAI;MAAEK,IAAI,GAAGL,KAAK,CAACK,IAAI;MAAE0H,SAAS,GAAG/H,KAAK,CAAC+H,SAAS;MAAEpG,QAAQ,GAAG3B,KAAK,CAAC2B,QAAQ;MAAE4T,UAAU,GAAG,SAAAA,CAAUlV,IAAI,EAAE;QACxHA,IAAI,CAACoE,OAAO,CAAC,UAAUgD,IAAI,EAAE;UACzB,IAAIA,IAAI,CAACyC,OAAO,EAAE;YACdzC,IAAI,CAACgC,MAAM,CAAC,CAAC;UACjB;QACJ,CAAC,CAAC;MACN,CAAC;IACD,IAAI+L,UAAU,GAAG,CAAC,CAAC,CAAC;IACpB;IACAxV,KAAK,CAACsL,QAAQ,CAAC,CAAC;IAChB;IACA;IACAtM,SAAS,CAACgB,KAAK,EAAE,eAAe,CAAC;IACjC;IACA,IAAIA,KAAK,CAAC0J,SAAS,EAAE;MACjB1J,KAAK,CAAC0J,SAAS,CAAC,CAAC;IACrB;IACA;IACA1J,KAAK,CAAC6J,UAAU,CAAC,IAAI,CAAC;IACtB7J,KAAK,CAAC2Q,YAAY,CAAC,CAAC;IACpB;IACA,MAAM8E,SAAS,GAAGzV,KAAK,CAACwB,SAAS;IACjCnB,IAAI,CAACqV,IAAI,CAAC,UAAUjO,IAAI,EAAE;MACtB,IAAIA,IAAI,CAACkO,KAAK,IACVlO,IAAI,CAACyC,OAAO,IACZzC,IAAI,CAACtG,OAAO,CAACyU,MAAM,CAACpM,OAAO,IAC3B/B,IAAI,CAAC5F,MAAM,CAACgC,MAAM,EAAE;QACpB;QACA2R,UAAU,GAAG,EAAE;QACf,OAAO,IAAI;MACf;IACJ,CAAC,CAAC;IACF;IACAxV,KAAK,CAACqB,UAAU,GAAG+F,IAAI,CAACC,GAAG,CAACrH,KAAK,CAACqB,UAAU,GAAGmU,UAAU,EAAE,CAAC,CAAC;IAC7D,MAAMK,UAAU,GAAG7V,KAAK,CAACqB,UAAU;IACnC;IACAhB,IAAI,CAACoE,OAAO,CAAC,UAAUgD,IAAI,EAAE;MACzBA,IAAI,CAACmC,QAAQ,CAAC,CAAC;IACnB,CAAC,CAAC;IACF5J,KAAK,CAACuQ,cAAc,CAAC,CAAC;IACtB;IACA;IACA,MAAMuF,cAAc,GAAGL,SAAS,GAAGzV,KAAK,CAACwB,SAAS,GAAG,GAAG;IACxD;IACA,MAAMuU,YAAY,GAAGF,UAAU,GAAG7V,KAAK,CAACqB,UAAU,GAAG,IAAI;IACzD,IAAIyU,cAAc,IAAIC,YAAY,EAAE;MAChC1V,IAAI,CAACoE,OAAO,CAAC,UAAUgD,IAAI,EAAE;QACzB,IAAKA,IAAI,CAACkO,KAAK,IAAIG,cAAc,IAC5B,CAACrO,IAAI,CAACkO,KAAK,IAAII,YAAa,EAAE;UAC/B;UACAtO,IAAI,CAACuO,eAAe,CAAC,IAAI,CAAC;QAC9B;MACJ,CAAC,CAAC;MACFhW,KAAK,CAAC6J,UAAU,CAAC,CAAC,CAAC,CAAC;IACxB;IACA;IACA7J,KAAK,CAACiK,YAAY,CAAC,CAAC;IACpB;IACA,IAAIjK,KAAK,CAAC+D,kBAAkB,EAAE;MAC1BwR,UAAU,CAAClV,IAAI,CAAC;IACpB,CAAC,MACI,IAAI0H,SAAS,IAAIA,SAAS,CAAClE,MAAM,EAAE;MACpC0R,UAAU,CAACxN,SAAS,CAAC;IACzB;IACA;IACA,IAAI,CAAC/H,KAAK,CAACiW,WAAW,EAAE;MACpBjW,KAAK,CAACiW,WAAW,GAAGtU,QAAQ,CAACuU,CAAC,CAAC,cAAc,CAAC,CACzC5X,IAAI,CAAC;QAAE0N,MAAM,EAAE;MAAE,CAAC,CAAC,CACnBgI,MAAM,CAAChU,KAAK,CAACmB,OAAO,CAACnB,KAAK,CAACmW,iBAAiB,CAAC,CAC7ClK,GAAG,CAAC,CAAC;IACd;IACAjM,KAAK,CAACqV,YAAY,CAAC,CAAC;IACpB;IACArV,KAAK,CAACoW,UAAU,CAAC,CAAC;IAClB;IACA,IAAIpW,KAAK,CAAC6I,aAAa,EAAE;MACrB7I,KAAK,CAAC6I,aAAa,CAAC,CAAC;IACzB;IACA;IACA7I,KAAK,CAACwF,WAAW,GAAG,IAAI;EAC5B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI4Q,UAAUA,CAACC,OAAO,EAAE;IAChB,MAAMrW,KAAK,GAAG,IAAI;MAAEsW,KAAK,GAAGhX,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC6B,OAAO,CAACkV,OAAO,EAAEA,OAAO,CAAC;IACtE,IAAIC,KAAK,CAAC9M,OAAO,IAAI,CAAC,IAAI,CAAC6M,OAAO,EAAE;MAChC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,IAAI,CAACA,OAAO,GAAG,IAAI,CAAC1U,QAAQ,CAACkK,IAAI,CAACyK,KAAK,CAACzK,IAAI,IAAI,IAAI,CAAC0K,UAAU,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACxEzC,QAAQ,CAAC,oBAAoB,CAAC,CAC9B0C,EAAE,CAAC,OAAO,EAAE,YAAY;QACzB,IAAIF,KAAK,CAACG,IAAI,EAAE;UACZ7Y,GAAG,CAAC8Y,QAAQ,CAACD,IAAI,GAAGH,KAAK,CAACG,IAAI;QAClC;MACJ,CAAC,CAAC,CACGnY,IAAI,CAAC;QACNyN,KAAK,EAAEuK,KAAK,CAACnH,QAAQ,CAACpD,KAAK;QAC3BC,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,IAAI,CAAChM,KAAK,CAAC8D,UAAU,EAAE;QACnB,IAAI,CAACuS,OAAO,CAAC7X,GAAG,CAAC8X,KAAK,CAAChK,KAAK,CAAC;MACjC;MACA,IAAI,CAAC+J,OAAO,CACPpK,GAAG,CAAC,CAAC,CACLF,KAAK,CAACuK,KAAK,CAACnH,QAAQ,CAAC;MAC1B;MACA,IAAI,CAACkH,OAAO,CAACnK,MAAM,GAAG,UAAU/K,OAAO,EAAE;QACrCnB,KAAK,CAACqW,OAAO,GAAGrW,KAAK,CAACqW,OAAO,CAACzK,OAAO,CAAC,CAAC;QACvC5L,KAAK,CAACoW,UAAU,CAACjV,OAAO,CAAC;MAC7B,CAAC;IACL;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIyK,OAAOA,CAAA,EAAG;IACN,MAAM5L,KAAK,GAAG,IAAI;MAAEK,IAAI,GAAGL,KAAK,CAACK,IAAI;MAAEwB,MAAM,GAAG7B,KAAK,CAAC6B,MAAM;MAAEjB,SAAS,GAAGZ,KAAK,CAACY,SAAS;MAAEkN,UAAU,GAAGlN,SAAS,IAAIA,SAAS,CAACkN,UAAU;IACzI,IAAIpI,CAAC;IACL;IACA1G,SAAS,CAACgB,KAAK,EAAE,SAAS,CAAC;IAC3B;IACA,IAAIA,KAAK,CAAC2B,QAAQ,CAACiO,SAAS,EAAE;MAC1BhR,KAAK,CAACpB,MAAM,EAAEwC,KAAK,CAAC,CAAC,CAAC;IAC1B,CAAC,MACI;MACDxC,MAAM,CAACwC,KAAK,CAACc,KAAK,CAAC,GAAG,KAAK,CAAC;IAChC;IACAvD,CAAC,CAAC2G,UAAU,EAAE;IACdlE,KAAK,CAAC4B,QAAQ,CAAC+U,eAAe,CAAC,uBAAuB,CAAC;IACvD;IACAhX,WAAW,CAACK,KAAK,CAAC;IAClB;IACA;IACA0F,CAAC,GAAGrF,IAAI,CAACwD,MAAM;IACf,OAAO6B,CAAC,EAAE,EAAE;MACRrF,IAAI,CAACqF,CAAC,CAAC,GAAGrF,IAAI,CAACqF,CAAC,CAAC,CAACkG,OAAO,CAAC,CAAC;IAC/B;IACA;IACA,IAAI,IAAI,CAACgL,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAAChL,OAAO,EAAE;MACxC,IAAI,CAACgL,QAAQ,CAAChL,OAAO,CAAC,CAAC;IAC3B;IACA;IACAlG,CAAC,GAAG7D,MAAM,CAACgC,MAAM;IACjB,OAAO6B,CAAC,EAAE,EAAE;MACR7D,MAAM,CAAC6D,CAAC,CAAC,GAAG7D,MAAM,CAAC6D,CAAC,CAAC,CAACkG,OAAO,CAAC,CAAC;IACnC;IACA;IACA,CACI,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,gBAAgB,EACxD,aAAa,EAAE,YAAY,EAAE,aAAa,EAAE,UAAU,EAAE,SAAS,EACjE,SAAS,EAAE,eAAe,EAAE,QAAQ,EAAE,iBAAiB,EAAE,SAAS,EAClE,UAAU,CACb,CAACnH,OAAO,CAAC,UAAUoB,IAAI,EAAE;MACtB,MAAMgR,IAAI,GAAG7W,KAAK,CAAC6F,IAAI,CAAC;MACxB,IAAIgR,IAAI,IAAIA,IAAI,CAACjL,OAAO,EAAE;QACtB5L,KAAK,CAAC6F,IAAI,CAAC,GAAGgR,IAAI,CAACjL,OAAO,CAAC,CAAC;MAChC;IACJ,CAAC,CAAC;IACF;IACA;IACA,IAAIhL,SAAS,EAAE;MACXA,SAAS,CAACoO,SAAS,GAAG5Q,GAAG,CAAC6Q,SAAS;MACnCtP,WAAW,CAACiB,SAAS,CAAC;MACtB,IAAIkN,UAAU,EAAE;QACZnP,cAAc,CAACiC,SAAS,CAAC;MAC7B;IACJ;IACA;IACArB,UAAU,CAACS,KAAK,EAAE,UAAU8W,GAAG,EAAEhU,GAAG,EAAE;MAClC,OAAO9C,KAAK,CAAC8C,GAAG,CAAC;IACrB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIqB,WAAWA,CAAA,EAAG;IACV,MAAMnE,KAAK,GAAG,IAAI;MAAEmB,OAAO,GAAGnB,KAAK,CAACmB,OAAO;IAC3C;IACAnB,KAAK,CAAC0O,YAAY,CAAC,CAAC;IACpB1O,KAAK,CAACoQ,YAAY,CAAC,CAAC;IACpBpQ,KAAK,CAAC2Q,YAAY,CAAC,CAAC;IACpB;IACA3Q,KAAK,CAAC2U,cAAc,CAAC,CAAC;IACtB;IACA3U,KAAK,CAAC0K,OAAO,CAAC,CAAC;IACf;IACA,MAAM7I,MAAM,GAAG3C,OAAO,CAACiC,OAAO,CAACU,MAAM,CAAC,GAAGV,OAAO,CAACU,MAAM,GAAG,EAAE;IAC5DV,OAAO,CAACU,MAAM,GAAG,EAAE,CAAC,CAAC;IACrBA,MAAM,CAAC4C,OAAO;IACd;IACA,UAAUsS,YAAY,EAAE;MACpB/W,KAAK,CAACoE,UAAU,CAAC2S,YAAY,CAAC;IAClC,CAAC,CAAC;IACF/W,KAAK,CAAC+U,UAAU,CAAC,CAAC;IAClB/U,KAAK,CAACuE,aAAa,CAAC,CAAC;IACrB;IACA;IACA;IACA;IACAvF,SAAS,CAACgB,KAAK,EAAE,cAAc,CAAC;IAChCA,KAAK,CAACyJ,MAAM,CAAC,CAAC;IACdzJ,KAAK,CAAC0B,OAAO,CAACsV,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAClC;IACA,IAAI,CAAChX,KAAK,CAAC2B,QAAQ,CAACsV,QAAQ,IAAI,CAACjX,KAAK,CAACsR,SAAS,EAAE;MAC9CtR,KAAK,CAACkX,MAAM,CAAC,CAAC;IAClB;IACA;IACA;IACAlX,KAAK,CAAC8I,gBAAgB,CAAC,IAAI,CAAC;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIoO,MAAMA,CAAA,EAAG;IACL;IACA,IAAI,CAACC,SAAS,CAACrS,MAAM,CAAC,CAAC,IAAI,CAACzB,QAAQ,CAAC,CAAC,CAACoB,OAAO,CAAC,UAAU2S,EAAE,EAAE;MACzD;MACA,IAAIA,EAAE,IAAI,OAAO,IAAI,CAACtW,KAAK,KAAK,WAAW,EAAE;QACzCsW,EAAE,CAACC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC;MAC1B;IACJ,CAAC,EAAE,IAAI,CAAC;IACRrY,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC;IACvBA,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC;IACzB;IACA,IAAIP,OAAO,CAAC,IAAI,CAACqC,KAAK,CAAC,EAAE;MACrB,IAAI,CAACsQ,SAAS,CAAC,CAAC;IACpB;IACA,IAAI,CAACkG,yBAAyB,CAAC,CAAC;IAChC;IACA,IAAI,CAAChG,SAAS,GAAG,IAAI;EACzB;EACA;AACJ;AACA;EACIgG,yBAAyBA,CAAA,EAAG;IACxB,MAAM;MAAEnW,OAAO;MAAEoL;IAAM,CAAC,GAAG,IAAI;IAC/B,IAAIpL,OAAO,IAAI,CAAC,IAAI,CAACoW,aAAa,EAAE;MAChC;MACA,IAAI,CAAC5V,QAAQ,CAACiH,UAAU,CAACtK,IAAI,CAAC;QAC1BkZ,IAAI,EAAE,KAAK;QACX,YAAY,EAAE,CAAEjL,KAAK,IAAIA,KAAK,CAACkL,OAAO,CAACC,WAAW,IAAK;QACvD;QAAA,EACEC,OAAO,CAAC,IAAI,EAAE,MAAM;MAC1B,CAAC,CAAC;MACF,IAAI,EAAExW,OAAO,CAACoW,aAAa,IAAIpW,OAAO,CAACoW,aAAa,CAAC/N,OAAO,KAAK,KAAK,CAAC,EAAE;QACrE3K,KAAK,CAAC,6CAA6C,GAC/C,oDAAoD,GACpD,+CAA+C,GAC/C,yDAAyD,GACzD,kFAAkF,EAAE,KAAK,EAAE,IAAI,CAAC;MACxG;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI+Y,SAASA,CAACzW,OAAO,EAAE0G,MAAM,EAAEC,SAAS,EAAE;IAClC,MAAM9H,KAAK,GAAG,IAAI;IAClB,IAAI6B,MAAM;IACV,IAAIV,OAAO,EAAE;MAAE;MACX0G,MAAM,GAAGrI,IAAI,CAACqI,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;MAC7B7I,SAAS,CAACgB,KAAK,EAAE,WAAW,EAAE;QAAEmB,OAAO,EAAEA;MAAQ,CAAC,EAAE,YAAY;QAC5DU,MAAM,GAAG7B,KAAK,CAACoE,UAAU,CAACjD,OAAO,CAAC;QAClCnB,KAAK,CAACyI,aAAa,GAAG,IAAI;QAC1BzI,KAAK,CAAC+U,UAAU,CAAC,CAAC;QAClB,IAAIlT,MAAM,CAAC+C,kBAAkB,EAAE;UAC3B;UACA/C,MAAM,CAACgD,OAAO,CAAC1D,OAAO,CAACwD,IAAI,EAAE,KAAK,CAAC;QACvC;QACA3F,SAAS,CAACgB,KAAK,EAAE,gBAAgB,EAAE;UAAE6B,MAAM,EAAEA;QAAO,CAAC,CAAC;QACtD,IAAIgG,MAAM,EAAE;UACR7H,KAAK,CAAC6H,MAAM,CAACC,SAAS,CAAC;QAC3B;MACJ,CAAC,CAAC;IACN;IACA,OAAOjG,MAAM;EACjB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIgW,OAAOA,CAAC1W,OAAO,EAAE2W,GAAG,EAAEjQ,MAAM,EAAEC,SAAS,EAAE;IACrC,OAAO,IAAI,CAACiQ,UAAU,CAACD,GAAG,GAAG,OAAO,GAAG,OAAO,EAAE;MAAErQ,IAAI,EAAEtG,OAAO;MAAE0G,MAAM,EAAEA,MAAM;MAAEC,SAAS,EAAEA;IAAU,CAAC,CAAC;EAC5G;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIkQ,YAAYA,CAAC7W,OAAO,EAAE0G,MAAM,EAAEC,SAAS,EAAE;IACrC,OAAO,IAAI,CAACiQ,UAAU,CAAC,WAAW,EAAE;MAAEtQ,IAAI,EAAEtG,OAAO;MAAE0G,MAAM,EAAEA,MAAM;MAAEC,SAAS,EAAEA;IAAU,CAAC,CAAC;EAChG;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIiQ,UAAUA,CAAC7S,IAAI,EAAE/D,OAAO,EAAE;IACtB,MAAMsG,IAAI,GAAG,IAAI1K,IAAI,CAAC,IAAI,EAAEoE,OAAO,CAACsG,IAAI,EAAEvC,IAAI,CAAC;IAC/C,IAAI1F,IAAI,CAAC2B,OAAO,CAAC0G,MAAM,EAAE,IAAI,CAAC,EAAE;MAC5B,IAAI,CAACA,MAAM,CAAC1G,OAAO,CAAC2G,SAAS,CAAC;IAClC;IACA,OAAOL,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIwQ,WAAWA,CAACC,GAAG,EAAE;IACb,MAAMlY,KAAK,GAAG,IAAI;MAAEmB,OAAO,GAAGnB,KAAK,CAACmB,OAAO;MAAEgX,cAAc,GAAGhX,OAAO,CAACiX,OAAO;MAAEC,cAAc,GAAG,SAAAA,CAAA,EAAY;QACxG,IAAIC,UAAU,EAAE;UACZ9Z,GAAG,CAAC8Z,UAAU,EAAE;YACZC,IAAI,EAAEvY,KAAK,CAACsB,QAAQ,GAAG,IAAI;YAC3BkX,GAAG,EAAExY,KAAK,CAACuB,OAAO,GAAG,IAAI;YACzBgG,KAAK,EAAEvH,KAAK,CAACwB,SAAS,GAAG,IAAI;YAC7BoG,MAAM,EAAE5H,KAAK,CAACqB,UAAU,GAAG;UAC/B,CAAC,CAAC;QACN;MACJ,CAAC;IACD,IAAIiX,UAAU,GAAGtY,KAAK,CAACsY,UAAU;MAAEG,WAAW,GAAGzY,KAAK,CAACyY,WAAW;IAClE;IACA,IAAI,CAACH,UAAU,EAAE;MACbtY,KAAK,CAACsY,UAAU,GAAGA,UAAU,GAAG/Z,aAAa,CAAC,KAAK,EAAE;QACjDkQ,SAAS,EAAE;MACf,CAAC,EAAE,IAAI,EAAEzO,KAAK,CAACY,SAAS,CAAC;IAC7B;IACA,IAAI,CAAC6X,WAAW,EAAE;MACdzY,KAAK,CAACyY,WAAW,GAAGA,WAAW,GAAGla,aAAa,CAAC,MAAM,EAAE;QAAEkQ,SAAS,EAAE;MAA2B,CAAC,EAAE,IAAI,EAAE6J,UAAU,CAAC;MACpHja,QAAQ,CAAC2B,KAAK,EAAE,QAAQ,EAAEqY,cAAc,CAAC,CAAC,CAAC;IAC/C;;IACAC,UAAU,CAAC7J,SAAS,GAAG,oBAAoB;IAC3C;IACArQ,GAAG,CAACsa,cAAc,CAACD,WAAW,EAAEjZ,IAAI,CAAC0Y,GAAG,EAAE/W,OAAO,CAACwX,IAAI,CAACP,OAAO,EAAE,EAAE,CAAC,CAAC;IACpE,IAAI,CAACpY,KAAK,CAAC8D,UAAU,EAAE;MACnB;MACAtF,GAAG,CAAC8Z,UAAU,EAAExZ,MAAM,CAACqZ,cAAc,CAAC7L,KAAK,EAAE;QACzCN,MAAM,EAAE;MACZ,CAAC,CAAC,CAAC;MACHxN,GAAG,CAACia,WAAW,EAAEN,cAAc,CAACS,UAAU,CAAC;MAC3C;MACA,IAAI,CAAC5Y,KAAK,CAAC6Y,YAAY,EAAE;QACrBra,GAAG,CAAC8Z,UAAU,EAAE;UACZQ,OAAO,EAAE,CAAC;UACV3K,OAAO,EAAE;QACb,CAAC,CAAC;QACFvR,OAAO,CAAC0b,UAAU,EAAE;UAChBQ,OAAO,EAAEX,cAAc,CAAC7L,KAAK,CAACwM,OAAO,IAAI;QAC7C,CAAC,EAAE;UACChH,QAAQ,EAAEqG,cAAc,CAACY,YAAY,IAAI;QAC7C,CAAC,CAAC;MACN;IACJ;IACA/Y,KAAK,CAAC6Y,YAAY,GAAG,IAAI;IACzBR,cAAc,CAAC,CAAC;EACpB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIW,WAAWA,CAAA,EAAG;IACV,MAAM7X,OAAO,GAAG,IAAI,CAACA,OAAO;MAAEmX,UAAU,GAAG,IAAI,CAACA,UAAU;IAC1D,IAAIA,UAAU,EAAE;MACZA,UAAU,CAAC7J,SAAS,GAChB,8CAA8C;MAClD,IAAI,CAAC,IAAI,CAAC3K,UAAU,EAAE;QAClBlH,OAAO,CAAC0b,UAAU,EAAE;UAChBQ,OAAO,EAAE;QACb,CAAC,EAAE;UACChH,QAAQ,EAAE3Q,OAAO,CAACiX,OAAO,CAACa,YAAY,IAAI,GAAG;UAC7CC,QAAQ,EAAE,SAAAA,CAAA,EAAY;YAClB1a,GAAG,CAAC8Z,UAAU,EAAE;cAAEnK,OAAO,EAAE;YAAO,CAAC,CAAC;UACxC;QACJ,CAAC,CAAC;MACN;IACJ;IACA,IAAI,CAAC0K,YAAY,GAAG,KAAK;EAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI3M,MAAMA,CAAC/K,OAAO,EAAE0G,MAAM,EAAEsR,QAAQ,EAAErR,SAAS,EAAE;IACzC,MAAM9H,KAAK,GAAG,IAAI;MAAEoZ,MAAM,GAAG;QACzB/C,OAAO,EAAE,YAAY;QACrB9J,KAAK,EAAE,UAAU;QACjB8M,QAAQ,EAAE,aAAa;QACvBpM,OAAO,EAAE;MACb,CAAC;MAAEqM,mBAAmB,GAAGnY,OAAO,CAACmY,mBAAmB;MAAEC,eAAe,GAAG,EAAE;IAC1E,IAAIC,aAAa,EAAEC,eAAe,EAAEC,UAAU;IAC9C1a,SAAS,CAACgB,KAAK,EAAE,QAAQ,EAAE;MAAEmB,OAAO,EAAEA;IAAQ,CAAC,CAAC;IAChD;IACA;IACA;IACA,IAAI,CAACmY,mBAAmB,EAAE;MACtBtZ,KAAK,CAAC6I,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC;IACpC;IACA1H,OAAO,GAAGzC,WAAW,CAACyC,OAAO,EAAEnB,KAAK,CAACmB,OAAO,CAAC;IAC7CnB,KAAK,CAACoC,WAAW,GAAG9C,KAAK,CAACU,KAAK,CAACoC,WAAW,EAAEjB,OAAO,CAAC;IACrD;IACA;IACA,MAAMqC,YAAY,GAAGrC,OAAO,CAACnB,KAAK;IAClC,IAAIwD,YAAY,EAAE;MACdlE,KAAK,CAAC,IAAI,EAAEU,KAAK,CAACmB,OAAO,CAACnB,KAAK,EAAEwD,YAAY,CAAC;MAC9C;MACA,IAAI,CAACb,cAAc,CAAC,CAAC;MACrB;MACA,IAAI,WAAW,IAAIa,YAAY,EAAE;QAC7BxD,KAAK,CAACwO,YAAY,CAAChL,YAAY,CAACiL,SAAS,CAAC;MAC9C;MACA,IAAI,UAAU,IAAIjL,YAAY,IAC1B,OAAO,IAAIA,YAAY,IACvB,MAAM,IAAIA,YAAY,EAAE;QACxB;QACA;QACAxD,KAAK,CAAC2U,cAAc,CAAC,CAAC;QACtB6E,aAAa,GAAG,IAAI;MACxB;MACA,IAAI,YAAY,IAAIhW,YAAY,EAAE;QAAE;QAChCgW,aAAa,GAAG,IAAI;MACxB;MACA,IAAI,QAAQ,IAAIhW,YAAY,EAAE;QAC1B;QACAlG,oBAAoB,CAAC,IAAI,EAAEkG,YAAY,CAAC;MAC5C;MACAjE,UAAU,CAACiE,YAAY,EAAE,UAAUsT,GAAG,EAAEhU,GAAG,EAAE;QACzC,IAAI9C,KAAK,CAAC2Z,wBAAwB,CAACC,OAAO,CAAC,QAAQ,GAAG9W,GAAG,CAAC,KACtD,CAAC,CAAC,EAAE;UACJ2W,eAAe,GAAG,IAAI;QAC1B;QACA;QACA,IAAIzZ,KAAK,CAAC6Z,oBAAoB,CAACD,OAAO,CAAC9W,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;UAChD9C,KAAK,CAACuI,UAAU,GAAG,IAAI;QAC3B;QACA;QACA,IAAIvI,KAAK,CAAC8Z,kBAAkB,CAACF,OAAO,CAAC9W,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;UAC9C,IAAIwW,mBAAmB,EAAE;YACrBtZ,KAAK,CAACuI,UAAU,GAAG,IAAI;UAC3B,CAAC,MACI;YACDmR,UAAU,GAAG,IAAI;UACrB;QACJ;MACJ,CAAC,CAAC;MACF,IAAI,CAAC1Z,KAAK,CAAC8D,UAAU,IAAIN,YAAY,CAAC8I,KAAK,EAAE;QACzCtM,KAAK,CAAC2B,QAAQ,CAACoO,QAAQ,CAAC/P,KAAK,CAACmB,OAAO,CAACnB,KAAK,CAACsM,KAAK,IAAI,CAAC,CAAC,CAAC;MAC5D;IACJ;IACA;IACA,IAAI,CAACtM,KAAK,CAAC8D,UAAU,IAAI3C,OAAO,CAAC4Y,MAAM,EAAE;MACrC,IAAI,CAAC5Y,OAAO,CAAC4Y,MAAM,GAAG5Y,OAAO,CAAC4Y,MAAM;IACxC;IACA,IAAI5Y,OAAO,CAACe,IAAI,EAAE;MACd;MACA;MACA;MACA;MACA,IAAI,IAAI,CAACA,IAAI,KAAKhF,WAAW,EAAE;QAC3B,IAAI,CAACgF,IAAI,GAAG,IAAIhE,IAAI,CAACiD,OAAO,CAACe,IAAI,CAAC;MACtC;MACA;MACA;MACA;MACA;MACA;MACA5C,KAAK,CAAC,IAAI,EAAEU,KAAK,CAACmB,OAAO,CAACe,IAAI,EAAEf,OAAO,CAACe,IAAI,CAAC;IACjD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA3C,UAAU,CAAC4B,OAAO,EAAE,UAAU2V,GAAG,EAAEhU,GAAG,EAAE;MACpC,IAAI9C,KAAK,CAAC8C,GAAG,CAAC,IACV,OAAO9C,KAAK,CAAC8C,GAAG,CAAC,CAACoJ,MAAM,KAAK,UAAU,EAAE;QACzClM,KAAK,CAAC8C,GAAG,CAAC,CAACoJ,MAAM,CAAC4K,GAAG,EAAE,KAAK,CAAC;QAC7B;MACJ,CAAC,MACI,IAAI,OAAO9W,KAAK,CAACoZ,MAAM,CAACtW,GAAG,CAAC,CAAC,KAAK,UAAU,EAAE;QAC/C9C,KAAK,CAACoZ,MAAM,CAACtW,GAAG,CAAC,CAAC,CAACgU,GAAG,CAAC;QACvB;QACA;MACJ,CAAC,MACI,IAAIhU,GAAG,KAAK,QAAQ,IACrB9C,KAAK,CAACga,qBAAqB,CAACJ,OAAO,CAAC9W,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;QACjDxD,KAAK,CAAC,IAAI,EAAEU,KAAK,CAACmB,OAAO,CAAC2B,GAAG,CAAC,EAAE3B,OAAO,CAAC2B,GAAG,CAAC,CAAC;MACjD;MACA,IAAIA,GAAG,KAAK,OAAO,IACf9C,KAAK,CAAC2Z,wBAAwB,CAACC,OAAO,CAAC9W,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;QACpD2W,eAAe,GAAG,IAAI;MAC1B;IACJ,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACO,qBAAqB,CAACvV,OAAO,CAAC,UAAUS,IAAI,EAAE;MAC/C,IAAI/D,OAAO,CAAC+D,IAAI,CAAC,EAAE;QACftF,KAAK,CAACuB,OAAO,CAAC+D,IAAI,CAAC,CAAC,CAACT,OAAO,CAAC,UAAUwV,UAAU,EAAEvU,CAAC,EAAE;UAClD,MAAMwU,KAAK,GAAGzb,OAAO,CAACwb,UAAU,CAAC1P,EAAE,CAAC;UACpC,IAAI3E,IAAI;UACR;UACA,IAAIsU,KAAK,EAAE;YACPtU,IAAI,GAAG5F,KAAK,CAACsK,GAAG,CAAC2P,UAAU,CAAC1P,EAAE,CAAC;UACnC;UACA;UACA,IAAI,CAAC3E,IAAI,IAAI5F,KAAK,CAACkF,IAAI,CAAC,EAAE;YACtBU,IAAI,GAAG5F,KAAK,CAACkF,IAAI,CAAC,CAAC1F,IAAI,CAACya,UAAU,CAACnZ,KAAK,EAAE4E,CAAC,CAAC,CAAC;YAC7C;YACA;YACA;YACA,IAAIE,IAAI,KAAMsU,KAAK,IAAIzb,OAAO,CAACmH,IAAI,CAACzE,OAAO,CAACoJ,EAAE,CAAC,IAC3C3E,IAAI,CAACzE,OAAO,CAAC4E,UAAU,CAAC,EAAE;cAC1BH,IAAI,GAAG,KAAK,CAAC;YACjB;UACJ;UACA,IAAIA,IAAI,IAAIA,IAAI,CAACV,IAAI,KAAKA,IAAI,EAAE;YAC5BU,IAAI,CAACsG,MAAM,CAAC+N,UAAU,EAAE,KAAK,CAAC;YAC9B,IAAId,QAAQ,EAAE;cACVvT,IAAI,CAACuU,OAAO,GAAG,IAAI;YACvB;UACJ;UACA;UACA,IAAI,CAACvU,IAAI,IAAIuT,QAAQ,IAAInZ,KAAK,CAACoa,mBAAmB,CAAClV,IAAI,CAAC,EAAE;YACtDlF,KAAK,CAACoa,mBAAmB,CAAClV,IAAI,CAAC,CAAC,CAAC,CAAC,CAACmS,KAAK,CAACrX,KAAK;YAC9C;YACA,CACIia,UAAU,CACb,CAACnV,MAAM;YACR;YACA9E,KAAK,CAACoa,mBAAmB,CAAClV,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAACJ,MAAM,CAAC,CAC7C,KAAK,CACR,CAAC,CAAC,CAACqV,OAAO,GAAG,IAAI;UACtB;QACJ,CAAC,CAAC;QACF;QACA,IAAIhB,QAAQ,EAAE;UACVnZ,KAAK,CAACkF,IAAI,CAAC,CAACT,OAAO,CAAC,UAAUmB,IAAI,EAAE;YAChC,IAAI,CAACA,IAAI,CAACuU,OAAO,IAAI,CAACvU,IAAI,CAACzE,OAAO,CAAC4E,UAAU,EAAE;cAC3CwT,eAAe,CAACtV,IAAI,CAAC2B,IAAI,CAAC;YAC9B,CAAC,MACI;cACD,OAAOA,IAAI,CAACuU,OAAO;YACvB;UACJ,CAAC,CAAC;QACN;MACJ;IACJ,CAAC,CAAC;IACFZ,eAAe,CAAC9U,OAAO,CAAC,UAAUmB,IAAI,EAAE;MACpC,IAAIA,IAAI,CAAC5F,KAAK,IAAI4F,IAAI,CAACyU,MAAM,EAAE;QAAE;QAC7BzU,IAAI,CAACyU,MAAM,CAAC,KAAK,CAAC;MACtB;IACJ,CAAC,CAAC;IACF,IAAIb,aAAa,EAAE;MACfxZ,KAAK,CAACK,IAAI,CAACoE,OAAO,CAAC,UAAUgD,IAAI,EAAE;QAC/BA,IAAI,CAACyE,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;MAC1B,CAAC,CAAC;IACN;IACA;IACA;IACA,IAAIuN,eAAe,EAAE;MACjBzZ,KAAK,CAACwE,qBAAqB,CAAC,CAAC,CAACC,OAAO,CAAC,UAAU5C,MAAM,EAAE;QACpD;QACA,IAAIA,MAAM,CAAC7B,KAAK,EAAE;UACd6B,MAAM,CAACqK,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;QAC5B;MACJ,CAAC,EAAE,IAAI,CAAC;IACZ;IACA;IACA,MAAMoO,QAAQ,GAAG9W,YAAY,IAAIA,YAAY,CAAC+D,KAAK;IACnD,MAAMgT,SAAS,GAAG/W,YAAY,KAAKnE,QAAQ,CAACmE,YAAY,CAACoE,MAAM,CAAC,GAC5DlI,cAAc,CAAC8D,YAAY,CAACoE,MAAM,EAAE0S,QAAQ,IAAIta,KAAK,CAACS,UAAU,CAAC,GACjE+C,YAAY,CAACoE,MAAM,CAAC;IACxB;IACA;IACA;IACA;IACA8R,UAAU;IACN;IACCva,QAAQ,CAACmb,QAAQ,CAAC,IAAIA,QAAQ,KAAKta,KAAK,CAACS,UAAW,IACpDtB,QAAQ,CAACob,SAAS,CAAC,IAAIA,SAAS,KAAKva,KAAK,CAACQ,WAAY,EAAE;MAC1DR,KAAK,CAACmR,OAAO,CAACmJ,QAAQ,EAAEC,SAAS,EAAEzS,SAAS,CAAC;IACjD,CAAC,MACI,IAAItI,IAAI,CAACqI,MAAM,EAAE,IAAI,CAAC,EAAE;MACzB7H,KAAK,CAAC6H,MAAM,CAACC,SAAS,CAAC;IAC3B;IACA9I,SAAS,CAACgB,KAAK,EAAE,aAAa,EAAE;MAC5BmB,OAAO,EAAEA,OAAO;MAChB0G,MAAM,EAAEA,MAAM;MACdC,SAAS,EAAEA;IACf,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI0S,WAAWA,CAACrZ,OAAO,EAAE0G,MAAM,EAAE;IACzB,IAAI,CAAC4D,gBAAgB,CAAC,UAAU,EAAEtK,OAAO,CAAC;IAC1C,IAAI,CAAC4H,YAAY,CAAClB,MAAM,CAAC;EAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI4S,UAAUA,CAACtZ,OAAO,EAAE0G,MAAM,EAAE;IACxB,IAAI,CAAC4D,gBAAgB,CAAC,SAAS,EAAEtK,OAAO,CAAC;IACzC,IAAI,CAAC4H,YAAY,CAAClB,MAAM,CAAC;EAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI6S,aAAaA,CAAA,EAAG;IACZ,MAAM1a,KAAK,GAAG,IAAI;MAAE2Y,IAAI,GAAG1b,cAAc,CAAC0b,IAAI;MAAEgC,UAAU,GAAG3a,KAAK,CAACuC,OAAO,CAACY,WAAW;MAAEyX,KAAK,GAAGD,UAAU,CAACC,KAAK;MAAEC,OAAO,GAAIF,UAAU,CAACG,UAAU,KAAK,OAAO,IAC1JH,UAAU,CAACG,UAAU,KAAK,YAAY,GACtC,IAAI,GACJ,mBAAoB;IACxB;AACR;AACA;IACQ,SAASC,OAAOA,CAAA,EAAG;MACf/a,KAAK,CAAC+a,OAAO,CAAC,CAAC;IACnB;IACA/b,SAAS,CAAC,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,YAAY;MACrDgB,KAAK,CAACoD,eAAe,GAAGpD,KAAK,CAAC2B,QAAQ,CACjCqZ,MAAM,CAACrC,IAAI,CAACsC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAEF,OAAO,EAAEH,KAAK,CAAC,CAClDtc,IAAI,CAAC;QACNyN,KAAK,EAAE4O,UAAU,CAACxL,QAAQ,CAACpD,KAAK;QAChCQ,KAAK,EAAEoM,IAAI,CAACuC;MAChB,CAAC,CAAC,CACGpH,QAAQ,CAAC,uBAAuB,CAAC,CACjC7H,GAAG,CAAC,CAAC,CACLF,KAAK,CAAC4O,UAAU,CAACxL,QAAQ,EAAE,KAAK,EAAE0L,OAAO,CAAC;IACnD,CAAC,CAAC;IACF7b,SAAS,CAAC,IAAI,EAAE,oBAAoB,CAAC;EACzC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI+b,OAAOA,CAAA,EAAG;IACN/b,SAAS,CAAC,IAAI,EAAE,WAAW,EAAE;MAAEmc,cAAc,EAAE;IAAK,CAAC,EAAE,IAAI,CAACC,IAAI,CAAC;EACrE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIA,IAAIA,CAACC,KAAK,EAAE;IACR,MAAMrb,KAAK,GAAG,IAAI;MAAE0B,OAAO,GAAG1B,KAAK,CAAC0B,OAAO;IAC3C,IAAI4Z,aAAa,GAAG,KAAK;MAAEC,SAAS;IACpC;IACA,IAAI,CAACF,KAAK,IAAIA,KAAK,CAACF,cAAc,EAAE;MAChCnb,KAAK,CAACK,IAAI,CAACoE,OAAO,CAAC,UAAUgD,IAAI,EAAE;QAC/B8T,SAAS,GAAG9T,IAAI,CAAC2T,IAAI,CAAC,CAAC;MAC3B,CAAC,CAAC;MACF1Z,OAAO,CAAC8Z,SAAS,GAAG,KAAK,CAAC,CAAC;IAC/B,CAAC,MACI;MAAE;MACHH,KAAK,CAAChZ,KAAK,CAACyC,MAAM,CAACuW,KAAK,CAAC/Y,KAAK,CAAC,CAACmC,OAAO,CAAC,UAAUgX,QAAQ,EAAE;QACxD,MAAMhU,IAAI,GAAGgU,QAAQ,CAAChU,IAAI;UAAEC,OAAO,GAAGD,IAAI,CAACC,OAAO;UAAE;YAAEgU,UAAU;YAAEC,UAAU;YAAEC;UAAW,CAAC,GAAGla,OAAO;QACpG;QACA,IAAIA,OAAO,CAACgG,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC,IACnCjJ,OAAO,CAACkd,UAAU,CAAC,IAChBld,OAAO,CAACmd,UAAU,CAAC,IACnB5b,KAAK,CAACgG,YAAY,CAAC2V,UAAU,GAAG3b,KAAK,CAACsB,QAAQ,EAAEsa,UAAU,GAAG5b,KAAK,CAACuB,OAAO,EAAE;UACxEkG,IAAI;UACJ;UACA;UACAZ,OAAO,EAAE6U,UAAU;UACnBlU,OAAO,EAAEkU;QACb,CAAC,CAAE,IAAI,CAACjd,OAAO,CAACuB,KAAK,CAACmG,QAAQ,GAAGwV,UAAU,GAAGC,UAAU,CAAC,EAAE;UAC/DL,SAAS,GAAG9T,IAAI,CAAC2T,IAAI,CAACK,QAAQ,CAACnU,GAAG,EAAEmU,QAAQ,CAACpU,GAAG,CAAC;UACjD,IAAII,IAAI,CAACoU,UAAU,EAAE;YACjBP,aAAa,GAAG,IAAI;UACxB;QACJ;MACJ,CAAC,CAAC;IACN;IACA;IACA,MAAMlY,eAAe,GAAGpD,KAAK,CAACoD,eAAe;IAC7C,IAAIkY,aAAa,IAAI,CAAClY,eAAe,EAAE;MACnCpD,KAAK,CAAC0a,aAAa,CAAC,CAAC;IACzB,CAAC,MACI,IAAI,CAACY,aAAa,IAAIlc,QAAQ,CAACgE,eAAe,CAAC,EAAE;MAClDpD,KAAK,CAACoD,eAAe,GAAGA,eAAe,CAACwI,OAAO,CAAC,CAAC;IACrD;IACA;IACA,IAAI2P,SAAS,EAAE;MACXvb,KAAK,CAAC6H,MAAM,CAACrI,IAAI,CAACQ,KAAK,CAACmB,OAAO,CAACnB,KAAK,CAAC8H,SAAS,EAAEuT,KAAK,IAAIA,KAAK,CAACvT,SAAS,EAAE9H,KAAK,CAACyB,UAAU,GAAG,GAAG,CAAC,CAAC;IACvG;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIqa,GAAGA,CAAClV,CAAC,EAAEmV,OAAO,EAAE;IACZ,MAAM/b,KAAK,GAAG,IAAI;MAAEgc,WAAW,GAAGhc,KAAK,CAACgc,WAAW;MAAEC,cAAc,GAAI,OAAOF,OAAO,KAAK,QAAQ,GAC9FA,OAAO,GACP;QACIvS,OAAO,EAAEuS,OAAO;QAChBnZ,IAAI,EAAE;MACV,CAAE;MAAE8P,YAAY,GAAG1S,KAAK,CAACmB,OAAO,CAACnB,KAAK;IAC1C,IAAI0S,YAAY,IAAIA,YAAY,CAACqJ,OAAO,EAAE;MACtCrJ,YAAY,CAACqJ,OAAO,GAAGE,cAAc;IACzC;IACA,MAAMrZ,IAAI,GAAGqZ,cAAc,CAACrZ,IAAI;IAChC,IAAIsZ,QAAQ;IACZld,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE;MAAEmd,aAAa,EAAEvV;IAAE,CAAC,EAAE,YAAY;MACrD;MACA,IAAIoV,WAAW,EAAE;QACbA,WAAW,CAACvX,OAAO,CAAC,UAAUwG,KAAK,EAAE;UACjCA,KAAK,CAACmR,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC;MACN;MACA,IAAI/b,IAAI,GAAGL,KAAK,CAACqC,KAAK;MACtB,IAAIO,IAAI,KAAK,IAAI,EAAE;QACfvC,IAAI,GAAGA,IAAI,CAACyE,MAAM,CAAC9E,KAAK,CAACsC,KAAK,CAAC;MACnC,CAAC,MACI,IAAIM,IAAI,KAAK,GAAG,EAAE;QACnBvC,IAAI,GAAGL,KAAK,CAACsC,KAAK;MACtB;MACA,MAAM+Z,YAAY,GAAG,CAAC,CAAC;MACvBhc,IAAI,CAACoE,OAAO,CAAC,UAAUgD,IAAI,EAAE;QACzB,IAAI,CAACA,IAAI,CAACtG,OAAO,CAACmb,cAAc,IAAI7U,IAAI,CAACtG,OAAO,CAAC4E,UAAU,EAAE;UACzD;QACJ;QACA,MAAM4P,KAAK,GAAGlO,IAAI,CAACkO,KAAK;UAAE4G,QAAQ,GAAG3V,CAAC,CAAC+O,KAAK,GAAG,QAAQ,GAAG,QAAQ,CAAC;UAAE6G,SAAS,GAAG7G,KAAK,GAAG,YAAY,GAAG,YAAY;UAAE8G,QAAQ,GAAGzc,KAAK,CAACwc,SAAS,CAAC;UAAEE,cAAc,GAAGjV,IAAI,CAACkV,cAAc,IAAI,CAAC;UAAEC,mBAAmB,GAAInV,IAAI,CAACoV,QAAQ,IAAI,CAAC7c,KAAK,CAACmG,QAAQ,IAChP,CAACsB,IAAI,CAACoV,QAAQ,IAAI7c,KAAK,CAACmG,QAAS,GAClC,CAAC,CAAC,GACF,CAAC;UAAE2W,QAAQ,GAAGrV,IAAI,CAACuC,WAAW,CAAC,CAAC;UAAE+S,MAAM,GAAGtV,IAAI,CAACuV,OAAO,CAACP,QAAQ,GAAGF,QAAQ,EAAE,IAAI,CAAC,GAClFG,cAAc,GAAGE,mBAAmB;UAAEK,MAAM,GAAGxV,IAAI,CAACuV,OAAO,CAACP,QAAQ,GAAGhV,IAAI,CAACT,GAAG,GAAGuV,QAAQ,EAAE,IAAI,CAAC,IAC/FG,cAAc,GAAGE,mBAAmB,IACjCnV,IAAI,CAACC,OAAO,IAAID,IAAI,CAACyV,iBAAkB,IACxC,CAAC,CAAC;UAAEC,OAAO,GAAGF,MAAM,GAAGF,MAAM;UAAEK,kBAAkB,GAAG3V,IAAI,CAAC2V,kBAAkB,CAAC,CAAC;QACrF,IAAIC,MAAM,GAAGF,OAAO,GAAGF,MAAM,GAAGF,MAAM;UAAEO,MAAM,GAAGH,OAAO,GAAGJ,MAAM,GAAGE,MAAM;UAAEM,YAAY,GAAG9V,IAAI,CAAC8V,YAAY;UAAEC,KAAK;QACnH;QACA;QACA,IAAIJ,kBAAkB,IAClB,CAAC3V,IAAI,CAACC,OAAO,KAAK,CAAC6V,YAAY,IAAIA,YAAY,CAACrU,OAAO,CAAC,EAAE;UAC1DzB,IAAI,CAAC5F,MAAM,CAAC4C,OAAO,CAAC,UAAU5C,MAAM,EAAE;YAClC,MAAM4b,aAAa,GAAG5b,MAAM,CAAC6b,gBAAgB,CAAC,IAAI,CAAC;cAAEC,YAAY,GAAG9b,MAAM,CAACmI,WAAW,CAACyT,aAAa,CAACG,KAAK,EAAE,IAAI,CAAC;YACjH,IAAI,CAACL,YAAY,EAAE;cACfA,YAAY,GAAG;gBACXM,QAAQ,EAAEC,MAAM,CAACC,SAAS;gBAC1BC,QAAQ,EAAE,CAACF,MAAM,CAACC;cACtB,CAAC;YACL;YACA,IAAI5e,QAAQ,CAACwe,YAAY,CAACM,OAAO,CAAC,IAC9B9e,QAAQ,CAACwe,YAAY,CAACO,OAAO,CAAC,EAAE;cAChCX,YAAY,CAACM,QAAQ,GAAGzW,IAAI,CAACE,GAAG,CAAC9H,IAAI,CAACqC,MAAM,CAACV,OAAO,CAACgd,SAAS,EAAElX,QAAQ,CAAC,EAAE0W,YAAY,CAACM,OAAO,EAAEV,YAAY,CAACM,QAAQ,CAAC;cACvHN,YAAY,CAACS,QAAQ,GAAG5W,IAAI,CAACC,GAAG,CAAC7H,IAAI,CAACqC,MAAM,CAACV,OAAO,CAACgd,SAAS,EAAE,CAAClX,QAAQ,CAAC,EAAE0W,YAAY,CAACO,OAAO,EAAEX,YAAY,CAACS,QAAQ,CAAC;YAC5H;UACJ,CAAC,CAAC;QACN;QACA,MAAMI,SAAS,GAAGhX,IAAI,CAACE,GAAG,CAAC9H,IAAI,CAAC+d,YAAY,IAAIA,YAAY,CAACM,QAAQ,EAAEf,QAAQ,CAACmB,OAAO,CAAC,EAAEvB,cAAc,GACpGI,QAAQ,CAACxV,GAAG,GACZG,IAAI,CAACuV,OAAO,CAACvV,IAAI,CAAC4W,QAAQ,CAACvB,QAAQ,CAACxV,GAAG,CAAC,GACpCG,IAAI,CAAC6W,eAAe,CAAC,CAAC;QAC9B,MAAMC,SAAS,GAAGnX,IAAI,CAACC,GAAG,CAAC7H,IAAI,CAAC+d,YAAY,IAAIA,YAAY,CAACS,QAAQ,EAAElB,QAAQ,CAACoB,OAAO,CAAC,EAAExB,cAAc,GACpGI,QAAQ,CAACzV,GAAG,GACZI,IAAI,CAACuV,OAAO,CAACvV,IAAI,CAAC4W,QAAQ,CAACvB,QAAQ,CAACzV,GAAG,CAAC,GACpCI,IAAI,CAAC6W,eAAe,CAAC,CAAC;QAC9B7W,IAAI,CAAC8V,YAAY,GAAGA,YAAY;QAChC;QACA;QACA;QACA,IAAI,CAAC9V,IAAI,CAAC+W,SAAS,EAAE;UACjB;UACA;UACAhB,KAAK,GAAGY,SAAS,GAAGf,MAAM;UAC1B,IAAIG,KAAK,GAAG,CAAC,EAAE;YACXF,MAAM,IAAIE,KAAK;YACfH,MAAM,GAAGe,SAAS;UACtB;UACAZ,KAAK,GAAGF,MAAM,GAAGiB,SAAS;UAC1B,IAAIf,KAAK,GAAG,CAAC,EAAE;YACXF,MAAM,GAAGiB,SAAS;YAClBlB,MAAM,IAAIG,KAAK;UACnB;UACA;UACA,IAAI/V,IAAI,CAAC5F,MAAM,CAACgC,MAAM,IAClBwZ,MAAM,KAAKP,QAAQ,CAACxV,GAAG,IACvBgW,MAAM,KAAKR,QAAQ,CAACzV,GAAG,IACvBgW,MAAM,IAAIe,SAAS,IACnBd,MAAM,IAAIiB,SAAS,EAAE;YACrB9W,IAAI,CAACgX,WAAW,CAACpB,MAAM,EAAEC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE;cAAEoB,OAAO,EAAE;YAAM,CAAC,CAAC;YAClE,IAAI,CAAC1e,KAAK,CAACoD,eAAe;YACtB;YACA;YACAia,MAAM,KAAKe,SAAS,IACpBd,MAAM,KAAKiB,SAAS,IACpB3b,IAAI,CAAC+b,KAAK,CAAC,GAAG,CAAC,EAAE;cACjB3e,KAAK,CAAC0a,aAAa,CAAC,CAAC;cACrBjT,IAAI,CAACoU,UAAU,GAAG,KAAK;YAC3B;YACAK,QAAQ,GAAG,IAAI;UACnB;UACA;UACAG,YAAY,CAACG,SAAS,CAAC,GAAGD,QAAQ;QACtC;MACJ,CAAC,CAAC;MACFhd,UAAU,CAAC8c,YAAY,EAAE,CAACtV,GAAG,EAAE6X,IAAI,KAAK;QACpC5e,KAAK,CAAC4e,IAAI,CAAC,GAAG7X,GAAG;MACrB,CAAC,CAAC;MACF,IAAImV,QAAQ,EAAE;QACVlc,KAAK,CAAC6H,MAAM,CAAC,KAAK,CAAC;MACvB;MACArJ,GAAG,CAACwB,KAAK,CAACY,SAAS,EAAE;QAAE6O,MAAM,EAAE;MAAO,CAAC,CAAC;IAC5C,CAAC,CAAC;EACN;AACJ;AACA3Q,MAAM,CAACiB,KAAK,CAAC+U,SAAS,EAAE;EACpB;EACAqC,SAAS,EAAE,EAAE;EACb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIiD,mBAAmB,EAAE;IACjB;IACA/X,KAAK,EAAE,CAACtC,KAAK,CAAC+U,SAAS,CAAC+C,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;IACxCvV,KAAK,EAAE,CAACvC,KAAK,CAAC+U,SAAS,CAAC+C,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;IACzChW,MAAM,EAAE,CAAC9B,KAAK,CAAC+U,SAAS,CAAC8C,SAAS;EACtC,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIoC,qBAAqB,EAAE,CACnB,OAAO,EACP,OAAO,EACP,QAAQ,CACX;EACD;AACJ;AACA;AACA;AACA;EACIH,oBAAoB,EAAE,CAClB,iBAAiB,EACjB,aAAa,EACb,aAAa,EACb,cAAc,EACd,qBAAqB,EACrB,qBAAqB,EACrB,iBAAiB,EACjB,iBAAiB,EACjB,YAAY,EACZ,QAAQ,CACX;EACD;AACJ;AACA;AACA;AACA;EACIC,kBAAkB,EAAE,CAChB,QAAQ,EACR,WAAW,EACX,aAAa,EACb,cAAc,EACd,YAAY,EACZ,SAAS,EACT,YAAY,EACZ,cAAc,EACd,eAAe,EACf,aAAa,CAChB;EACD;AACJ;AACA;AACA;AACA;EACIH,wBAAwB,EAAE,CACtB,gBAAgB,EAChB,aAAa,EACb,0BAA0B,EAC1B,YAAY,EACZ,QAAQ,EACR,aAAa,EACb,MAAM,EACN,SAAS;AAEjB,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA,eAAe5Z,KAAK;AACpeAHG,CAGA;AACH;AACA;AACA,kBAHG,CAGA;AACH;AACA;AACA,qBAHG,CAGA;AACH;AACA;AACA;AACA,EAAE,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}